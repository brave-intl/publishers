#duplicates
= javascript_pack_tag 'views/admin/publishers/Duplicates'
div.row
  div.col-sm-12
    section.panel
      header.panel-heading
        h4 Publishers
      .action-group
        = form_tag(admin_publishers_path, method: "get")
          .input-group
            = text_field_tag(:q, params[:q], class:'form-control')
            .input-group-btn
              = submit_tag("Search", class: 'btn btn-default', name: nil)
          .form-inline.mt-1
            = select_tag(:status, options_for_select(PublisherStatusUpdate::ALL_STATUSES, params[:status]), include_blank: "Filter by status" , class: "form-control mr-2", onchange:"this.form.submit()")
            = select_tag(:role, options_for_select(Publisher::ROLES, params[:role]), include_blank: "Filter by role" , class: "form-control",  onchange: "this.form.submit()")
            = select_tag(:uphold_status, options_for_select(["ok", "blocked", "restricted", "pending"], params[:uphold_status]), include_blank: "Filter by uphold status" , class: "form-control",  onchange: "this.form.submit()")
      br
      div.panel-body
        div.adv-table
          table.display.table.table-bordered.table-striped.dynamic-table id="dynamic-table"
            tr
              th Email
              th Name
              th ID
              th Status
              th = sort_link(Publisher::VERIFIED_CHANNEL_COUNT, "Number of verified channels")
              th Last note
              th = sort_link(:created_at, "2FA removal time remaining")
              th = sort_link(:created_at, "Account creation time")
              th = sort_link(:last_sign_in_at, "Last sign in at")
            tbody
              - @publishers.left_joins(:channels).each do |publisher|
                tr.gradeX
                  td = publisher_link(publisher)
                  td = publisher.name
                  td.small = publisher.id
                  td = publisher_status(publisher)
                  td = publisher.channels.verified.count
                  td = publisher.notes.order(created_at: :desc).first&.note
                  - if publisher.two_factor_authentication_removal
                    td = publisher.two_factor_authentication_removal.total_time_remaining
                  - else
                     td = "N/A"
                  td = publisher.created_at.strftime('%B %d, %Y')
                  td = distance_of_time_in_words(publisher.last_sign_in_at, Time.now) if publisher.last_sign_in_at.present?
          = will_paginate @publishers
