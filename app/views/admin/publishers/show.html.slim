#publisher
  #publisher-section
    h2 = @publisher.name
    .rounded-box.split-row-container
      .split-row
        .db-info-row
          .db-field = "Email:"
          .db-value = @publisher.email
        .db-info-row
          .db-field = "Role:"
          .db-value = @publisher.role
        - if @publisher.partner?
          - partner = @publisher.becomes(Partner)
          .db-info-row
            .db-field = "Organization:"
            .db-value = link_to partner.organization, admin_organization_path(partner.organization)
        .db-info-row
          .db-field = "Status:"
          .db-value = publisher_status(@publisher)
        .db-info-row
          .db-field = "Uphold once connected:"
          .db-value = @publisher.uphold_verified?
        .db-info-row
          .db-field = "Uphold authorized:"
          .db-value = @publisher.wallet.authorized?
        - if @publisher.wallet.uphold_account_status.present?
          .db-info-row
            .db-field = "Uphold status:"
            .db-value = @publisher.wallet.uphold_account_status
        -if @publisher.uphold_id.present?
          .db-info-row
            .db-field = "Uphold id:"
            .db-value = link_to @publisher.uphold_id, admin_publishers_path(q: @publisher.uphold_id)
        .db-info-row
          .db-field = "Uphold widget enabled?"
          .db-value = @publisher.excluded_from_payout? ? "No" : "Yes"
        .db-info-row
          .db-field = "Pending Payouts"
          .db-value = "#{publisher_humanize_balance(@publisher, "BAT")} BAT, #{publisher_converted_balance(@publisher)}"
        .db-info-row
          .db-field = "Default currency:"
          .db-value = @publisher.default_currency
        - if @publisher.created_by.present?
          .db-info-row
            .db-field = "Created By:"
            .db-value = link_to @publisher.created_by, admin_publisher_path(@publisher.created_by)
        - if @publisher.promo_enabled_2018q1
          .db-info-row
            .db-field = "Referral downloads:"
            .db-value = publisher_referral_totals(@publisher)[PromoRegistration::FIRST_RUNS]
          .db-info-row
            .db-field = "Referral confirmations:"
            .db-value = publisher_referral_totals(@publisher)[PromoRegistration::FINALIZED]
      #statement-section.split-row
        h3.admin-header = "Statements"
        .statement
          = link_to("this month", statement_admin_publishers_path(publisher_id: @publisher.id, statement_period: "this_month"))
        .statement
          = link_to("last month", statement_admin_publishers_path(publisher_id: @publisher.id, statement_period: "last_month"))
        .statement
          = link_to("all", statement_admin_publishers_path(publisher_id: @publisher.id, statement_period: "all"))
  hr
    = link_to("Edit Settings", edit_admin_publisher_path(@publisher), class: "btn btn-primary")
    = link_to("Make partner",
          edit_admin_partner_path(@publisher),
          class: "btn btn-primary partner-button #{@publisher.publisher? ? '' : 'disabled'}")
    = csrf_meta_tag
  hr

  h3.admin-header = "Channels (#{@publisher.channels.count})"
  #channels-section
    - @publisher.channels.each do |channel|
      .channel
        .channel-link
          = link_to(on_channel_type(channel), channel.details.url)
        .channel-info
          - if channel.verification_awaiting_admin_approval?
            .admin-approval
              span.admin-approval-warning = "Admin approval required"
              span.admin-approval-button
                = form_for channel, as: :channel, method: :patch, url: approve_channel_admin_publishers_path(channel_id: channel.id) do |f|
                  = f.submit("Approve", class: "btn btn-primary")
            hr
          - elsif channel.verification_approved_by_admin?
            .admin-approval
              span.admin-approval-success = "Admin approved"
            hr
          .db-info-row
            .db-field = "Pending Payouts"
            .db-value = publisher_channel_balance(@publisher, channel.details.channel_identifier, "BAT")
          - if channel.details.is_a?(SiteChannelDetails)
            .db-info-row
              .db-field = "Verified:"
              .db-value = channel.verified?
            .db-info-row
              .db-field = "Verification Method:"
              .db-value = channel.details.verification_method
            .db-info-row
              .db-field = "Token:"
              .db-value.token = channel.details.verification_token
          - if channel.promo_registration.present?
            .db-info-row
              .db-field = "Referral code:"
              .db-value = channel.promo_registration.referral_code

  hr
  h3.admin-header = "Notes"
  #notes-section
    #create-note.rounded-box
      = form_for @note, { method: :post, url: create_note_admin_publishers_path } do |f|
        = f.text_area(:note, id: "create-note-content")
        = f.hidden_field(:publisher, :value => @publisher.id)
        = f.submit("Add note", class: 'btn btn-primary')
    - @publisher.history.each do |h|
      - if h.is_a?(PublisherNote)
        = render partial: 'note', locals: { note: h }
      - elsif h.is_a?(PublisherStatusUpdate)
        = render partial: 'status', locals: { note: h }

