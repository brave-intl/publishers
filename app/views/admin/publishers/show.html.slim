#publisher
  #publisher-section
    h2 = @publisher.name
    .rounded-box
      .db-info-row
        .db-field = "Email:"
        .db-value = @publisher.email
      .db-info-row
        .db-field = "Status:"
        .db-value = @publisher.last_status_update.present? ? @publisher.last_status_update.status : "active"
      .db-info-row
        .db-field = "Uphold connected:"
        .db-value = @publisher.uphold_verified?
      .db-info-row
        .db-field = "Current contribution balance:"
        .db-value = publisher_converted_balance(@publisher) || publisher_humanize_balance(@publisher, "BAT")
      .db-info-row
        .db-field = "Default currency:"
        .db-value = @publisher.default_currency
      - if @publisher.promo_enabled_2018q1
        .db-info-row
          .db-field = "Referral downloads:"
          .db-value = total_referral_downloads(@publisher)
        .db-info-row
          .db-field = "Referral confirmations:"
          .db-value = confirmed_referral_downloads(@publisher)
  hr
    h3.admin-header = "Statements"
    #statement-section
      .statement
        = form_for(@publisher, url: generate_statement_admin_publishers_path, html: { id: "statement_generator" }) do |f|
          .form-group
            = hidden_field_tag(:id, @publisher.id)
            = select_tag(:statement_period, options_for_select(statement_periods_as_options(unused_statement_periods), :past_30_days))
            a#generate_statement href="#"
              = "Generate statement"
      .statements-table.rounded-box
        .header
          .created-at= t ".created_at"
          .period= t ".period"
          .status= t ".status"
        .content#generated_statements
          - @publisher.statements.each do |s|
            .statement
              .created-at= statement_period_date(s.created_at)
              .period= statement_period_description(s.period.to_sym)
              .status
                - if s.encrypted_contents?
                  span= 'Ready'
                  = link_to(t("shared.download"), statement_publishers_url(id: s.id), class: 'download')
                - else
                  = t ".statements.delayed"
  hr

  h3.admin-header = "Channels (#{@publisher.channels.count})"
  #channels-section
    - @publisher.channels.each do |channel|
      .channel
        .channel-link
          = link_to(on_channel_type(channel), channel_url(channel))
        .channel-info
          .db-info-row
            .db-field = "Current contribution balance"
            .db-value = publisher_channel_balance(current_publisher, channel.details.channel_identifier, "BAT")
          - if channel.details.is_a?(SiteChannelDetails)
            .db-info-row
              .db-field = "Verified:"
              .db-value = channel.verified?
            .db-info-row
              .db-field = "Verification Method:"
              .db-value = channel.details.verification_method
            .db-info-row
              .db-field = "Token:"
              .db-value.token = channel.details.verification_token
          - if channel.promo_registration.present?
            .db-info-row
              .db-field = "Referral code:"
              .db-value = channel.promo_registration.referral_code
  hr
  h3.admin-header = "Notes"
  #notes-section
    #create-note.rounded-box
      = form_for @note, { method: :post, url: create_note_admin_publishers_path } do |f|
        = f.text_area(:note, id: "create-note-content")
        = f.hidden_field(:publisher, :value => @publisher.id)
        = f.submit("Add note", id: "submit-create-note")
    - @publisher.notes.order(created_at: :desc).each do |note|
      .note.rounded-box
        .note-header
          .note-created-by
            = note.created_by.name
          .note-created-at
            = note.created_at.strftime("%B %d, %Y")
        hr
        .note-content
          = note.note
