doctype html
html
  head data-piwik-host=piwik_domain
    = csrf_meta_tags
    meta http-equiv="X-UA-Compatible" content="IE=edge"
    meta name="viewport" content=("width=device-width, initial-scale=#{if local_assigns[:viewport_initial_scale] then viewport_initial_scale else '0.6' end}")
    - set_meta_tags(publishers_meta_tags)
    = display_meta_tags
    - if content_for?(:head_style_tags)
      = yield(:head_style_tags)
    - else
      = stylesheet_link_tag('application', media: 'all')

    - if content_for?(:head_js_tags)
      = yield(:head_js_tags)
    - else
      = javascript_pack_tag('application')

    link rel="icon" type="image/png" href=image_path("favicon.ico")

  body data-action=params[:action] data-controller=params[:controller] data-locale=I18n.locale
    javascript:
      // The script tag here runs after the body element has been created
      // on the DOM but before layout/paint. This allows us to set the class
      // before layout/paint and avoid a flash of content before the
      // detection has run.
      if (window.u2f) {
        document.body.classList.add('js-feature-available-u2f');
      }

    - if content_for?(:application_flash)
      / This branch permits the panel_flash_messages parital to disable
      / navigation bar flash messages.
      = yield(:application_flash)
    - else
      .notifications.no-padding.navbar-static-top#flash
        - [:alert, :notice, :warning].each do |name|
          - {alert: 'danger', notice: 'info', warning: 'warning'}[name].tap do |flash_class|
            - if flash[name]
              .alert.flash class="alert-#{flash_class}" data-test-flash-message=flash_class
                = flash[name]
            - "#{name}_html_safe".tap do |html_safe_name|
              - if flash[html_safe_name]
                .alert.flash class="alert-#{flash_class}" data-test-flash-message=flash_class
                  == flash[html_safe_name]
            - "#{name}_model_errors".tap do |name|
              - if flash[name] && flash[name].errors.any?
                .alert.flash class="alert-#{flash_class}" data-test-flash-message=flash_class
                  p= t "activerecord.shared.errors"
                  - flash[name].errors.each do |attribute, message|
                    p
                      strong.error= "#{flash[name].class.human_attribute_name(attribute)}:"
                      span= " #{message}"


    #main
      - unless request.path.starts_with?("/partners") ||  request.path.starts_with?("/browser_user")
        - if content_for?(:nav)
          = yield(:nav)
        - else
          = render("nav")

      /
      / ## Using flash messages in Brave Publishers ##
      /
      / Three styled variants for flash messages in this app exist:
      /
      /   * `:alert` a message with negative red styling.
      /   * `:warning` a message with negative yellow styling.
      /   * `:notice` a message with neutral blue styling.
      /
      / By default these messages appear in a bar below the navigation.
      /
      / ## Flash messages in panels ##
      /
      / The messages *may* appear at the top of a panel in a styled page. To
      / opt into that styling you must be using non-legacy styles and the
      / following render partial:
      /
      /     .single-panel--wrapper
      /       = render "panel_flash_messages" / <-- this partial
      /       .single-panel--content
      /
      / Pages using that partial will only have messages appear on the top
      / of the panel. The flash messages below the navigation bar wil be
      / squashed.
      /
      / ## Flash messages with html content ##
      /
      / Sometime a translation string, or other content you want to include
      / in a flash message, will contain HTML. In these cases you can use
      / the symbol postfix `_html_safe`. For example:
      /
      /     flash[:alert_html_safe] = "<strong>Foo</strong>";
      /
      / THIS CONTENT WILL NOT BE ESCAPED. Thus it should contain NO
      / user-entered content.
      /
      / The postfix is available for all three flash names and for rendering
      / below the navigation bar or in a panel.
      /
      / ## Flash messages of model errors
      /
      / When a model fails to save you may want to show its validation errors
      / to the user. To do this in the flash you can use the `_model_errors`
      / postfix. For exmaple:
      /
      /     if publisher.save
      /       redirect_to success_url
      /     else
      /       flash.now[:warning_model_errors] = publisher
      /       render action: :new
      /     end
      /
      / Because the rendering expects that you pass a literal model, this
      / utility can only be used with `flash.now`.
      /
      / The postfix is available for all three flash names and for rendering
      / below the navigation bar or in a panel.
      /
      -if content_for?(:headless)
        = yield(:headless)
      - else
        .main-content#main-content
          = content_for?(:content) ? yield(:content) : yield


      = render("footer")

    / This block of HTML is used by modal_shared.js to trigger modal
    / boxes. See that JavaScript file for more details.
    .js-shared-modal
      .modal-container data-test-modal-container=""
        .modal-panel
          .modal-panel--content
          = link_to "#", class: "modal-panel--close js-deny"
            = render "application/icon_x"
      .modal-overlay

    #modal-root
    / ## Using flash modals in Brave Publishers ##
    /
    / In addition to using flash to pass a message, you can use flash to
    / cause a modal to open on the page. Do this with the :modal_partial
    / flash name. For example:
    /
    /     flash[:modal_partial] = 'some_partial_name'
    /
    / This would cause the modal to be opened with content equivilent to:
    /
    /     <%= render 'model_partials/some_partial_name' %>
    /
    / Which would be the file path:
    /
    /     app/views/model_partials/_some_partial_name.html.erb
    /
    / This system leverages the modal system documented in
    / app/javascript/modal.js.
    /
    / To offer a button do close the modal use the class `js-deny` on a
    / button. For example:
    /
    /     <%= link_to "Close", "#", class: "js-deny btn btn-primary" %>
    /
    - if flash[:modal_partial]
      script#js-open-modal-on-load type="text/html"
        = render "modal_partials/#{flash[:modal_partial]}"
    = content_for :render_async
