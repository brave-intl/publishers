noscript
  div.noscript-warning = t ".noscript"

- open_confirm_default_currency_modal = !flash[:taken_channel_id] && \
    @publisher.uphold_connection.uphold_verified? && \
    (@publisher.uphold_connection.default_currency_confirmed_at.blank? || @publisher.uphold_connection.default_currency.blank?)
script type="text/html" id="confirm_default_currency_modal_wrapper"
  = render partial: 'confirm_default_currency_modal', locals: { possible_currencies: @possible_currencies || []}

- content_for(:navbar_content_right) do
  = link_to( \
    t("shared.dashboard"), \
    home_publishers_path, \
    class: 'title' \
  )
  - if @publisher.partner?
    = link_to(t("shared.referrals"), partners_referrals_path, class: 'title-partner')
    = link_to(t("shared.payments"), partners_payments_path, class: 'title-partner' )

  = render partial: "choose_channel_button"
  = link_to("#{t "shared.instant_donation"}", "#", data: { "js-confirm-with-modal": "instant-donation-modal" }, class: 'btn btn-secondary btn-highlight', id: 'instant-donation-button')


= hidden_field_tag 'publisher_id', @publisher.id


.dashboard

  #uphold_status { class=uphold_status_class(@publisher)
                   data-open-confirm-default-currency-modal=(open_confirm_default_currency_modal ? "true" : "false")
                   data-possible-currencies=(@possible_currencies || [])
                   data-default-currency=@publisher.uphold_connection.default_currency }
    .row
      -if @migration_present
        .col.mb-4
          .rounded.p-4.shadow.alert-warning= t('.migration')
    .row
      .col.mb-4.payouts class="#{@publisher.no_grants? ? 'col-md-7' : '' }"
        .balance-panel.align-items-center
          .row
            .col
              .balance.px-4.pt-4
                .bat-logo
                  = image_tag("bat-logo@2x.png", class: "", width: 60, height: 60)
                .amounts
                  h4.balance-header
                    span = t(".balance_pending")
                  .bat
                    span.bat-amount#bat_amount = publisher_overall_bat_balance(@publisher)
                    span.bat-code= " BAT"
                  .converted#converted_amount
                    = publisher_converted_overall_balance(@publisher)
                  - if payout_in_progress?
                    .payout_in_progress
                      span
                        i = t(".payout_in_progress")
                  - else
                    .next_deposit_date.small.mt-2
                      span = t(".next_deposit_date")
                      span = next_deposit_date
            - if @publisher.no_grants?
              .d-none.d-xl-block
                .line

              .col
                .d-xl-none.d-lg-none
                  .ml-4.mt-4.h-line

                .withheld.px-4.pt-4
                  .balance
                    .amounts
                      h4.balance-header
                          span = t('.held_funds')
                      .bat
                        span.withheld-color.bat-amount#bat_amount= publisher_contribution_bat_balance(@publisher)
                        span.withheld-color.bat-code= " BAT"
                  .small.my-2
                    .d-flex
                      - if @case&.open?.present? || @case&.in_progress?&.present?
                        span== t('.open_case_description')
                      - elsif @case && @case.closed?
                        span == t('.rejected_funds_description')
                      -else
                        span.warning-icon.mr-2
                          = render 'icon_circled_bang_warning'
                        span
                          == t('.held_funds_description')

      - if promo_running?
        = render partial: 'promo_panel'
      - elsif @publisher.channels.empty?
        .col-md.mb-4
          .add-channel-cta
            = t ".add_channel_cta"
    .row
      - unless @publisher.excluded_from_payout?
        .col-md.mb-4
          .dashboard-panel--wrapper.uphold-panel
            .dashboard-panel--header#dashboard_uphold_header
              = t ".uphold.heading"
            .dashboard-panel--content#uphold_status_display
              .status-summary
                .text= uphold_status_summary(@publisher)
                .action
                  = link_to(t(".uphold.connect"), connect_uphold_publishers_path, method: :patch, class: "connect-uphold", :"data-piwik-action" => "UpholdConnectClicked", :"data-piwik-name" => "Clicked", :"data-piwik-value" => "Dashboard")
                  a.disconnect-uphold href="#"
                    = t ".uphold.disconnect"
                  script type="text/html" id="disconnect-uphold-js"
                    = render "publishers/disconnect_uphold_modal"
                  = form_for(@publisher, url: disconnect_uphold_publishers_path, html: {id: "disconnect_uphold"}) do |f|
            .dashboard-panel--content#uphold_connect
              .status-description
                = uphold_status_description(@publisher).html_safe
              = link_to(uphold_authorization_description(@publisher),
                        uphold_dashboard_url,
                        id: "go_to_uphold", class: "btn btn-primary", :"data-piwik-action" => "GoToUpholdHomeClicked", :"data-piwik-name" => "Clicked", :"data-piwik-value" => "Dashboard", style: "display:none")
              = link_to(uphold_authorization_description(@publisher),
                        connect_uphold_publishers_path,
                        id: "reconnect_to_uphold", class: "btn btn-primary", method: :patch, :"data-test" => "reconnect-button" , :"data-piwik-action" => "UpholdReconnectClicked", :"data-piwik-name" => "Clicked", :"data-piwik-value" => "Dashboard")
              .reconnect-instructions
                = "Having trouble with Uphold registration?"
                br
                = link_to(t(".uphold.connect_to_a_new_account"), connect_uphold_publishers_path,
                      :"data-piwik-action" => "ConnectNewUpholdAccountClicked", method: :patch,
                      :"data-piwik-name" => "Clicked", :"data-piwik-value" => "Dashboard")
            .dashboard-panel--content#uphold_dashboard
              .deposit-currency.field
                label= t ".uphold.deposit_currency_label"
                .value#default_currency_code= @publisher.uphold_connection.default_currency.present? ? @publisher.uphold_connection.default_currency : t(".uphold.no_currency_selected")
                .action
                  span= "("
                  a#change_default_currency href="#"
                    = t ".uphold.change"
                  span= ")"
              .last-deposit-date.field
                label= t ".uphold.last_deposit_date"
                .value.deposit-date#last_deposit_date=publisher_last_settlement_date(@publisher)
            .dashboard-panel--content#last_settlement class=last_settlement_class(@publisher)
              .last-deposit
                = t ".uphold.last_deposit"
                .amounts
                  .bat
                    - last_deposit_balance = publisher_last_settlement_bat_balance(@publisher)
                    span.bat-amount#last_deposit_bat_amount= last_deposit_balance
                    - unless last_deposit_balance == I18n.t("helpers.publisher.no_deposit")
                      span.bat-code= " BAT"
                  .converted#last_deposit_converted_amount
                    = publisher_converted_last_settlement_balance(@publisher)
                = link_to(t(".uphold.check_balance"), uphold_dashboard_url, class: "btn btn-primary",
                        id: "uphold_check_balance", :"data-piwik-action" => "CheckUpholdBalanceClicked",
                        :"data-piwik-name" => "Clicked", :"data-piwik-value" => "Dashboard")
      .col-md.mb-4
        .dashboard-panel--wrapper
          .dashboard-panel--header#publishers_statements
            = t ".statements.heading"
          .dashboard-panel--content
            .statements-available
              = link_to(t(".statements.view_statements"), statements_publishers_path)
            .statements-unavailable
              = t ".statements.unavailable"
          .dashboard-panel--header#publishers_contact
            = t ".contact.heading"
            a.header-link#edit_contact href="#"
              = t ".contact.edit"
          .dashboard-panel--content.contact-person
            #show_contact
              #show_contact_name= @publisher.name
              span.email#show_contact_email= @publisher.email
              span.hidden#pending_contact_email= @publisher.pending_email

            = form_for(@publisher, url: publishers_path, html: { id: "update_contact", class: "in-place-edit hidden" }) do |f|
              .form-group
                = f.label(:name, class: "control-label", for: "update_contact_name")
                = f.text_field(:name, class: "form-control", id: "update_contact_name", placeholder: "Alice Bloglette", required: true)
              .form-group
                = f.label(:email, class: "control-label", for: "update_contact_email")
                = f.email_field(:pending_email, class: "form-control", id: "update_contact_email", placeholder: "alice@example.com", required: true)
              .button.form-group
                = f.submit(translate(".contact.update"), class: "btn btn-primary", :"data-piwik-action" => "SubmitContactUpdateClicked", :"data-piwik-name" => "Clicked", :"data-piwik-value" => "Dashboard")
                a#cancel_edit_contact href="#"
                  = t "shared.cancel"
            p#pending_email_notice class="block-note hidden"

            = form_for(@publisher, url: publishers_path, html: { id: "update_publisher_visible_form" }) do |f|
              = f.check_box(:visible, class: "form-check-input")
              = f.label(:visible, class: "form-check-label", for: "publisher_visible")


    / Don't show if none of the promo registrations has a valid stat
    - if !@publisher.only_user_funds? && @publisher.promo_registrations.present? && @publisher.promo_registrations.has_stats.select { |promo_registration| promo_registration.stats_by_date.present? }.present?
      = render "publishers/referral_charts", current_publisher: @publisher

    - @publisher.channels.visible.each do |channel|
      = render partial: 'channel', locals: { channel: channel }

    .row id="add_channel_placeholder"
      .col.mb-4
        = link_to(\
          "+ #{t "shared.add_channel"}", \
          choose_new_channel_type_publishers_path, \
          data: {"js-confirm-with-modal": "choose-channel-type"}, \
          class: 'channel-placeholder' \
        )

    .row.tos-row
      .col.mb-4
        - if @publisher.promo_enabled_2018q1
          .promo--tos
            = t("promo.shared.tos_2_html")
        - else
          .terms-of-service
            = link_to(t("shared.terms_of_service"), terms_of_service_url)

- if @publisher.promo_status(promo_running?) == :active
  javascript:
    (function() {
      function closeReferralLinkAnimation() {
        var channelPromoInfoContainer = this.parentNode;
        if (channelPromoInfoContainer.classList.contains('channel--promo-info-container-slideout')) {
          channelPromoInfoContainer.classList.remove('channel--promo-info-container-slideout');
        }
      }
      function openReferralLinkAnimation() {
        var channelPromoInfoContainer = this.parentNode;
        if (!channelPromoInfoContainer.classList.contains('channel--promo-info-container-slideout')) {
          channelPromoInfoContainer.classList.add('channel--promo-info-container-slideout');
        }
      }
      function copyButtonAnimation() {
        channelPromoInfoContainer = this.parentNode;
        var mobileReferralLinkButtons = document.getElementsByClassName('referral-link-button-mobile');
        var desktopReferralLinkButtons = document.getElementsByClassName('referral-link-button-desktop');
        for (var i = 0; i < mobileReferralLinkButtons.length; i++) {
          mobileReferralLinkButtons[i].children[0].innerText = 'Referral Link';
          desktopReferralLinkButtons[i].children[0].innerText = 'Referral Link';
        }
        var mobileReferralLinkButton = channelPromoInfoContainer.children[4].children[0];
        var desktopReferralLinkButton = channelPromoInfoContainer.children[3].children[0];
        mobileReferralLinkButton.innerText = 'Copied!';
        desktopReferralLinkButton.innerText = 'Copied!';
        // Fade out 'copied!'
        setTimeout(function(){
          mobileReferralLinkButton.classList.add('fadedOut');
          desktopReferralLinkButton.classList.add('fadedOut');
          setTimeout(function(){
            mobileReferralLinkButton.innerText = 'Referral Link';
            desktopReferralLinkButton.innerText = 'Referral Link';
            mobileReferralLinkButton.classList.remove('fadedOut');
            desktopReferralLinkButton.classList.remove('fadedOut');
          }, 500);
        }, 1000);
      }
      var channelPromoInfoContainers = document.getElementsByClassName('channel--promo-info-container');
      var desktopReferralLinkButtons = document.getElementsByClassName('referral-link-button-desktop');
      var desktopCopyButtons = document.getElementsByClassName('referral-link-copy-button')
      var mobileReferralLinkButtons = document.getElementsByClassName('referral-link-button-mobile');
      for (var i = 0; i < channelPromoInfoContainers.length; i++) {
        desktopReferralLinkButtons[i].addEventListener('click', openReferralLinkAnimation, false);
        desktopCopyButtons[i].addEventListener('click', closeReferralLinkAnimation, false);
        desktopCopyButtons[i].addEventListener('click', copyButtonAnimation, false);
        mobileReferralLinkButtons[i].addEventListener('click', copyButtonAnimation, false);
      }
    })();

script id="instant-donation-modal" type="text/html"
  = render "instant_donation_modal", wallet: @wallet, uphold_connection: @publisher.uphold_connection
