javascript:
  (function() {
    'use strict';
    function showPendingContactEmail(pendingEmail) {
      var pendingEmailNotice = document.getElementById('pending_email_notice');
      var showContactEmail = document.getElementById('show_contact_email');
      if (pendingEmail && pendingEmail != showContactEmail.innerText) {
        pendingEmailNotice.innerHTML = 'Pending: Email address has been updated to: <strong>' + pendingEmail + '</strong>. An email has been sent to this address to confirm this change.';
        pendingEmailNotice.style.display = 'block';
      } else {
        pendingEmailNotice.style.display = 'none';
      }
    }

    function refreshBalance() {
      var options = {
        headers: {
            'Accept': 'application/json'
        },
        credentials: 'same-origin',
        method: 'GET'
      };

      return window.fetchAfterDelay('./balance', 500)
        .then(function(response) {
          if (response.status === 200 || response.status === 304) {
            return response.json();
          }
        })
        .then(function(body) {
          var batAmount = document.getElementById('bat_amount');
          batAmount.innerText = body.bat_amount;
          var convertedAmount = document.getElementById('converted_amount');
          convertedAmount.innerText = body.converted_balance;
        });
    }

    function showVerificationModal() {
      var modal = document.getElementById('verification_modal');
      modal.classList.add('md-show');
    }

    function hideVerificationModal() {
      var modal = document.getElementById('verification_modal');
      modal.classList.remove('md-show');
    }

    function removeChannel(channelId) {
      submitForm('remove_channel_' + channelId, 'DELETE', true)
        .then(function(response) {
          var channelRow = document.getElementById('channel_row_' + channelId);
          channelRow.classList.add('channel-hidden');
        });
    }

    window.addEventListener('load', function() {
      var removeChannelLinks = document.querySelectorAll('a.remove-channel');
      for (var i = 0, l = removeChannelLinks.length; i < l; i++) {
        removeChannelLinks[i].addEventListener('click', function(event) {
          var channelId = event.target.getAttribute('data-channel-id');
          var confirmationMessage = event.target.getAttribute('data-confirmation-message');
          if (window.confirm(confirmationMessage)) {
            removeChannel(channelId);
          }
          event.preventDefault();
        }, false);
      }

      var publisherVisibleCheckbox = document.getElementById('publisher_visible');
      publisherVisibleCheckbox.addEventListener('click', function(event) {
        window.submitForm('update_publisher_visible_form', 'PATCH', true);
        event.preventDefault();
      }, false);

      var defaultCurrencySelect = document.getElementById('publisher_default_currency');
      if (defaultCurrencySelect) {
        defaultCurrencySelect.addEventListener('change', function(event) {
          window.submitForm('update_default_currency_form', 'PATCH', true);
          refreshBalance();
          event.preventDefault();
        }, false);
      }

      var showContact = document.getElementById('show_contact');
      var showContactName = document.getElementById('show_contact_name');
      var showContactEmail = document.getElementById('show_contact_email');
      var showContactPhone = document.getElementById('show_contact_phone');
      var showContactPhoneSeparator = document.getElementById('show_contact_phone_separator');

      var pendingContactEmail = document.getElementById('pending_contact_email');
      showPendingContactEmail(pendingContactEmail.innerText);

      var updateContact = document.getElementById('update_contact');
      var updateContactName = document.getElementById('update_contact_name');
      var updateContactEmail = document.getElementById('update_contact_email');
      var updateContactPhone = document.getElementById('update_contact_phone');

      var editContact = document.getElementById('edit_contact');
      var cancelEditContact = document.getElementById('cancel_edit_contact');

      var generateStatement = document.getElementById('generate_statement');
      var generateStatementResult = document.getElementById('generate_statement_result');
      var statementGenerator = document.getElementById('statement_generator');
      var statementPeriod = document.getElementById('statement_period');
      var generatedStatements = document.getElementById('generated_statements');

      editContact.addEventListener('click', function(event) {
        updateContactName.value = showContactName.innerText;
        updateContactEmail.value = pendingContactEmail.innerText || showContactEmail.innerText;
        updateContactPhone.value = showContactPhone.innerText;
        showContact.style.display = 'none';
        updateContact.style.display = 'block';
        editContact.style.display = 'none';
        updateContactName.focus();
        event.preventDefault();
      }, false);

      cancelEditContact.addEventListener('click', function(event) {
        showContact.style.display = 'block';
        updateContact.style.display = 'none';
        editContact.style.display = 'block';
        event.preventDefault();
      }, false);

      updateContact.addEventListener('submit', function(event) {
        event.preventDefault();
        window.submitForm('update_contact', 'PATCH', true)
          .then(function() {
            var updatedEmail = updateContactEmail.value;
            showContactName.innerText = updateContactName.value;
            showContactPhone.innerText = updateContactPhone.value;
            pendingContactEmail.innerText = updatedEmail;
            showPendingContactEmail(updatedEmail);

            updateContact.style.display = 'none';
            showContact.style.display = 'block';
            editContact.style.display = 'block';
            showContactPhoneSeparator.style.display = (showContactPhone.innerText ? 'inline' : 'none');
          });
      }, false);

      if (generateStatement) {
        generateStatement.addEventListener('click', function(event) {
          var statementId;
          var statementDownloadDiv;

          event.preventDefault();
          generateStatement.style.display = 'none';

          window.submitForm('statement_generator', 'PATCH', false)
            .then(function(response) {
              return response.json();
            })
            .then(function(json) {
              statementPeriod.options.remove(statementPeriod.selectedIndex);
              if (statementPeriod.options.length === 0) {
                statementGenerator.style.display = 'none';
              }

              var newStatementDiv = document.createElement('div');
              newStatementDiv.className = 'statement';

              var statementPeriodDiv = document.createElement('div');
              statementPeriodDiv.className = 'period';
              statementPeriodDiv.appendChild(document.createTextNode(json.period));
              newStatementDiv.appendChild(statementPeriodDiv);

              statementDownloadDiv = document.createElement('div');
              statementDownloadDiv.className = 'download';
              statementDownloadDiv.appendChild(document.createTextNode('Generating'));
              newStatementDiv.appendChild(statementDownloadDiv);

              generatedStatements.insertBefore(newStatementDiv, generatedStatements.firstChild);

              window.dynamicEllipsis.start(statementDownloadDiv);

              statementId = json.id;
              return window.pollUntilSuccess('/publishers/statement_ready?id=' + statementId, 3000, 2000, 7);
            })
            .then(function() {
              window.dynamicEllipsis.stop(statementDownloadDiv);
              statementDownloadDiv.innerHTML = '<a href="/publishers/statement?id=' + statementId + '">Download</a>';
              generateStatement.style.display = 'inline-block';
            })
            .catch(function(e) {
              if (statementDownloadDiv) {
                window.dynamicEllipsis.stop(statementDownloadDiv);
                statementDownloadDiv.innerText = 'Delayed';
              }
              generateStatement.style.display = 'inline-block';
            });
        }, false);
      }
    }, false);
  })();

- if poll_uphold_status?(current_publisher)
  javascript:
    (function() {
      var checkUpholdStatusInterval;
      var checkUpholdStatusCount = 0;

      function checkUpholdStatus() {
        var options = {
          headers: {
            'Accept': 'application/json'
          },
          credentials: 'same-origin',
          method: 'GET'
        };

        return window.fetch('./status', options)
          .then(function(response) {
            checkUpholdStatusCount += 1;
            if (response.status === 200 || response.status === 304) {
              return response.json();
            }
          })
          .then(function(body) {
            if (body.uphold_status === 'verified') {
              document.getElementById('publisher_status').innerText = body.uphold_status_description;
              var publisherStatus = document.getElementById('publisher_status');
              publisherStatus.innerText = body.status_description;
              publisherStatus.className = body.status;
              document.getElementById('uphold_connect').style.display = 'none';
              var upholdDashboard = document.getElementById('uphold_dashboard');
              upholdDashboard.style.display = '';
              window.dynamicEllipsis.stop('publisher_status');
              clearInterval(checkUpholdStatusInterval);
            } else if (checkUpholdStatusCount >= 15) {
              var publisherStatus = document.getElementById('publisher_status');
              publisherStatus.innerText = body.timeout_message;
              window.dynamicEllipsis.stop('publisher_status');
              clearInterval(checkUpholdStatusInterval);
            }
          });
      }

      window.addEventListener('load', function() {
        window.dynamicEllipsis.start('publisher_status');
        checkUpholdStatusInterval = window.setInterval(checkUpholdStatus, 2000);
      });
    })();

noscript
  div.noscript-warning = t("publishers.dashboard_noscript")

- content_for(:navbar_content_right) do
  = link_to(I18n.t("publishers.new_channel"), choose_new_channel_type_publishers_path, class: 'btn btn-secondary btn-highlight')

.row
  .col.col-details.col-md-5.col-xs-10.col-xs-center.col-sm-center
    h4= t("publishers.balance_pending")
    .balance
      .pull-left
        = image_tag("bat-logo@1x.png", class: "")
      .pull-left.amounts
        .bat
          span.bat-amount#bat_amount= publisher_humanize_balance(current_publisher, "BAT")
          span.bat-code= " BAT"
        .converted#converted_amount
          = publisher_converted_balance(current_publisher)
  - if current_publisher.channels.empty?
    .col.col-details.col-md-6.col-xs-10.col-xs-center.col-sm-center
      .add-channel-cta
        = t("publishers.add_channel_cta")
.row
  .col.col-details.col-md-6.col-xs-10.col-xs-center.col-sm-center
    .sub-panel.dashboard-panel.uphold-panel
      .panel-header.panel-header-h3#dashboard_uphold_header
        = t("publishers.dashboard_uphold_header")
      .attribute-value.status
        #publisher_status class=publisher_status(current_publisher)
          = publisher_status_description(current_publisher)
        - if show_uphold_connect?(current_publisher)
          div#uphold_connect
            .panel-section= link_to(uphold_authorization_description(current_publisher),
                    uphold_authorization_endpoint(current_publisher), class: "btn btn-primary", :"data-test" => "reconnect-button")
        - if current_publisher.uphold_status == :access_parameters_acquired || current_publisher.uphold_status == :verified
          .panel-section#uphold_dashboard style=(show_uphold_dashboard?(current_publisher) ? '' : 'display: none')
            .panel-section
              = form_for(current_publisher, url: publishers_path, html: { id: "update_default_currency_form" }) do |f|
                span= t("publishers.current_deposit_currency")
                span#default_currency_code= f.select(:default_currency, options_for_select(publisher_available_currencies(current_publisher), publisher_default_currency(current_publisher)))
            = link_to(t("publishers.uphold_check_balance"), uphold_dashboard_url, class: "btn btn-primary", :"data-piwik-action" => "CheckUpholdBalanceClicked", :"data-piwik-name" => "Clicked", :"data-piwik-value" => "Dashboard")
  .col.col-details.col-md-6.col-xs-10.col-xs-center.col-sm-center
    .sub-panel.dashboard-panel
      .statements#statement_section style=(current_publisher.uphold_verified ? '' : 'display: none')
        .panel-header.panel-header-h4#publishers_statement
          = t("publishers.statements")
        - if unused_statement_periods.length > 0
          = form_for(current_publisher, url: generate_statement_publishers_path, html: { id: "statement_generator" }) do |f|
            .form-group
              = select_tag(:statement_period, options_for_select(statement_periods_as_options(unused_statement_periods), :past_30_days))
              .pull-right
                a.edit-link#generate_statement href="#"
                  = t("shared.generate")
        .clearfix
        #generated_statements
          - current_publisher.statements.each do |s|
            .statement
              .period= statement_period_description(s.period.to_sym)
              .download= s.encrypted_contents? ? link_to(t("publishers.statement_download"), statement_publishers_url(id: s.id)) : t("publishers.statement_delayed")

      .panel-header.panel-header-h4#publishers_contact
        = t("publishers.contact")
        .pull-right
          a.edit-link#edit_contact href="#"
            = t("publishers.edit_contact")
        .clearfix
      .attribute-value.contact-person
        #show_contact
          #show_contact_name= current_publisher.name
          span.email#show_contact_email= current_publisher.email
          span.hidden#pending_contact_email= current_publisher.pending_email
          span#show_contact_phone_separator style=(current_publisher.phone.present? ? '' : 'display: none')
            |&nbsp;&bull;&nbsp;
          span.phone#show_contact_phone
            = current_publisher.phone
        = form_for(current_publisher, url: publishers_path, html: { id: "update_contact", class: "in-place-edit", style: "display: none" }) do |f|
          .form-group
            = f.label(:name, class: "control-label", for: "update_contact_name")
            = f.text_field(:name, class: "form-control", id: "update_contact_name", placeholder: "Alice Bloglette", required: true)
          .form-group
            = f.label(:email, class: "control-label", for: "update_contact_email")
            = f.email_field(:pending_email, class: "form-control", id: "update_contact_email", placeholder: "alice@example.com", required: true)
          .form-group
            = f.label(:phone, t("publishers.verified_phone_html"), class: "control-label", for: "update_contact_phone")
            = f.phone_field(:phone, class: "form-control", pattern: "^[0-9\-\+\.\s\(\)]*$", title: t("publishers.phone_number_validation"), id: "update_contact_phone", placeholder: "+1 888 555 9001", required: false)
          .button.form-group
            = f.submit(translate("shared.update"), class: "btn btn-primary", :"data-piwik-action" => "SubmitContactUpdateClicked", :"data-piwik-name" => "Clicked", :"data-piwik-value" => "Dashboard")
            a#cancel_edit_contact href="#"
              = t("shared.cancel")
        p#pending_email_notice style="display: none" class="note"

        = form_for(current_publisher, url: publishers_path, html: { id: "update_publisher_visible_form" }) do |f|
          = f.check_box(:visible, class: "form-check-input")
          = f.label(:visible, class: "form-check-label", for: "publisher_visible")

- if current_publisher.channels.visible.empty?
  .row
    .col.col-details.col-md-12.col-xs-10
      = link_to(I18n.t("publishers.new_channel"), choose_new_channel_type_publishers_path, class: 'channel-placeholder')
- else
  - current_publisher.channels.visible.each do |channel|
    .row.channel-row id=("channel_row_#{channel.id}")
      .col.col-details.col-md-12.col-xs-10.col-xs-center.col-sm-center
        div class=("sub-panel channel-panel #{channel.verified? ? 'channel-verified' : 'channel-unverified'}")
          .channel-thumbnail.pull-left
            img src=(channel_thumbnail_url(channel))
          - if channel.verified?
            .channel-summary.pull-left
              h3= channel.publication_title.truncate(30)
              .channel-details
                .added-date
                  = t("publishers.dashboard_channel_added", date: channel.created_at.to_date.iso8601)
                .separator
                  = '|'
                a.remove-channel href="#" data-channel-id=(channel.id) data-confirmation-message=(t("publishers.dashboard_channel_confirm_remove_channel", channel_name: channel.publication_title))
                  = t("publishers.dashboard_channel_remove_verified_channel")
                = form_for(channel, html: {id: "remove_channel_#{channel.id}"}) do |f|

            .channel-status.pull-right
              = t("publishers.dashboard_channel_verified")
          -else
            .channel-summary.pull-left
              h3= channel.publication_title
            .channel-progress.pull-left
              .one-more-step= t("publishers.dashboard_channel_one_more_step")
            .channel-status.pull-right
              = link_to(t("publishers.dashboard_channel_lets_finish"), channel_next_step_path(channel), class: "btn btn-primary")
            a.remove-channel.pull-right href="#" data-channel-id=(channel.id) data-confirmation-message=(t("publishers.dashboard_channel_confirm_remove_channel", channel_name: channel.publication_title))
              = t("publishers.dashboard_channel_remove_unverified_channel")
            = form_for(channel, html: {id: "remove_channel_#{channel.id}"}) do |f|
          .clearfix

.row.tos-row
  .col.col-details.col-md-6.col-md-push-6.col-xs-10.col-xs-center.col-sm-center
    .terms-of-service
      = link_to(t("shared.terms_of_service"), terms_of_service_url)
