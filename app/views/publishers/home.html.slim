noscript
  div.noscript-warning = t ".noscript"

- open_confirm_default_currency_modal = !flash[:taken_channel_id] && \
    @publisher.uphold_connection.uphold_verified? && @publisher.uphold_connection.status != UpholdConnection::PENDING && \
    (@publisher.uphold_connection.default_currency_confirmed_at.blank? || @publisher.uphold_connection.default_currency.blank?)

script type="text/html" id="confirm_default_currency_modal_wrapper"
  = render partial: 'confirm_default_currency_modal', locals: { possible_currencies: @possible_currencies || []}

- content_for(:navbar_content_right) do
  = link_to( \
    t("shared.dashboard"), \
    home_publishers_path, \
    class: 'title' \
  )

  - if @publisher.merchant?
    .mr-5= link_to(t('.merchant'), keys_path)

  = render partial: "choose_channel_button"
  = link_to("#{t "shared.instant_donation"}", "#", data: { "js-confirm-with-modal": "instant-donation-modal" }, class: 'btn btn-secondary btn-highlight', id: 'instant-donation-button')


= hidden_field_tag 'publisher_id', @publisher.id

#welcomeModal data-props="#{ { isOpen: new_publisher?(@publisher) }.to_json }"
= javascript_pack_tag "WelcomeModal"

.dashboard

  #uphold_status { class=uphold_status_class(@publisher)
                   data-open-confirm-default-currency-modal=(open_confirm_default_currency_modal ? "true" : "false")
                   data-possible-currencies=(@possible_currencies || [])
                   data-default-currency=@publisher.uphold_connection.default_currency }
    .row
      .col.mb-4.payouts class="#{@publisher.no_grants? ? 'col-md-7' : '' }"
        .balance-panel.align-items-center
          .row
            .col
              .balance.pt-4
                .bat-logo#bat-logo
                  = image_tag("bat-logo@2x.png", class: "", width: 60, height: 60)
                .amounts
                  - converted_balance = publisher_converted_overall_balance(@publisher)
                  h4.balance-header
                    span = t(".balance_pending")
                  .bat
                    span.bat-amount#bat_amount = publisher_overall_bat_balance(@publisher)
                    span.bat-code= " " + I18n.t(".bat_in_locale")
                  .converted#converted_amount
                    = converted_balance
                  - if payout_in_progress?
                    .payout_in_progress
                      span
                        - if converted_balance.present? && converted_balance.to_i>= PayoutReport::MINIMUM_BALANCE_AMOUNT
                          i = t(".payout_in_progress")
                        - else
                          i = t(".payout_minimum_balance", amount: PayoutReport::MINIMUM_BALANCE_AMOUNT, currency: t("bat_in_locale"))
                  - else
                    .next_deposit_date.small.mt-2
                      span = t(".next_deposit_date")
                      span = next_deposit_date
            - if @publisher.no_grants?
              .d-none.d-xl-block
                .line

              .col
                .d-xl-none.d-lg-none
                  .ml-4.mt-4.h-line

                .withheld.px-4.pt-4
                  .balance
                    .amounts
                      h4.balance-header
                          span = t('.held_funds')
                      .bat
                        span.withheld-color.bat-amount#bat_amount= publisher_contribution_bat_balance(@publisher)
                        span.withheld-color.bat-code= " " + I18n.t(".bat_in_locale")
                  .small.my-2
                    .d-flex
                      - if @case&.open?.present? || @case&.in_progress?&.present?
                        span== t('.open_case_description')
                      - elsif @case && @case.closed?
                        span == t('.rejected_funds_description')
                      -else
                        span.warning-icon.mr-2
                          = render 'icon_circled_bang_warning'
                        span
                          == t('.held_funds_description')

      .col-md.mb-4
        .dashboard-panel--wrapper
          .dashboard-panel--header#publishers_statements
            = t ".statements.heading"
          .dashboard-panel--content
            .statements-available
              = link_to(t(".statements.view_statements"), statements_path)
            .statements-unavailable
              = t ".statements.unavailable"

    - if @payout_report.present?
      .row
       .col-md.mb-4
         = render partial: 'payout_status', locals: { payout_report: @payout_report, publisher: @publisher }
    .row
      .col-md.mb-4
        - if !(@publisher.excluded_from_payout? || @publisher.paypal_locale?(params[:locale]) || @publisher.uphold_connection&.japanese_account? || @publisher.wire_only?)
          = render partial: 'wallet_services'
        - elsif @publisher.paypal_locale?(params[:locale]) && !@publisher.wire_only?
          = render partial: "paypal_connection_panel"

      - if promo_running?
          = render partial: 'promo_panel'
      - elsif @publisher.channels.empty?
        .col-md.mb-4
          .add-channel-cta
            = t ".add_channel_cta"

    / Don't show if none of the promo registrations has a valid stat
    - if !@publisher.only_user_funds? \
        && @publisher.promo_registrations.present? \
        && @publisher.promo_registrations.has_stats.select { |promo_registration| promo_registration.stats_by_date.present? }.present? \
        && @publisher.may_register_promo? \
        && !@publisher.promo_lockout_time_passed?
      = render "publishers/referral_charts", current_publisher: @publisher

    - @publisher.channels.visible.each do |channel|
      = render partial: 'channel', locals: { channel: channel }

    .row id="add_channel_placeholder"
      .col.mb-4
        = link_to(\
          "+ #{t "shared.add_channel"}", \
          choose_new_channel_type_publishers_path, \
          data: {"js-confirm-with-modal": "choose-channel-type"}, \
          class: 'channel-placeholder' \
        )

    .row.tos-row
      .col.mb-4
        - if @publisher.promo_enabled_2018q1
          .promo--tos
            = t("promo.shared.tos_2_html")
        - else
          .terms-of-service
            = link_to(t("shared.terms_of_service"), terms_of_service_url)

- if @publisher.promo_status(promo_running?) == :active
  javascript:
    (function() {
      function closeReferralLinkAnimation() {
        var channelPromoInfoContainer = this.parentNode;
        if (channelPromoInfoContainer.classList.contains('channel--promo-info-container-slideout')) {
          channelPromoInfoContainer.classList.remove('channel--promo-info-container-slideout');
        }
      }
      function openReferralLinkAnimation() {
        var channelPromoInfoContainer = this.parentNode;
        if (!channelPromoInfoContainer.classList.contains('channel--promo-info-container-slideout')) {
          channelPromoInfoContainer.classList.add('channel--promo-info-container-slideout');
        }
      }
      function copyButtonAnimation() {
        channelPromoInfoContainer = this.parentNode;
        var mobileReferralLinkButtons = document.getElementsByClassName('referral-link-button-mobile');
        var desktopReferralLinkButtons = document.getElementsByClassName('referral-link-button-desktop');
        for (var i = 0; i < mobileReferralLinkButtons.length; i++) {
          mobileReferralLinkButtons[i].children[0].innerText = 'Referral Link';
          desktopReferralLinkButtons[i].children[0].innerText = 'Referral Link';
        }
        var mobileReferralLinkButton = channelPromoInfoContainer.children[4].children[0];
        var desktopReferralLinkButton = channelPromoInfoContainer.children[3].children[0];
        mobileReferralLinkButton.innerText = 'Copied!';
        desktopReferralLinkButton.innerText = 'Copied!';
        // Fade out 'copied!'
        setTimeout(function(){
          mobileReferralLinkButton.classList.add('fadedOut');
          desktopReferralLinkButton.classList.add('fadedOut');
          setTimeout(function(){
            mobileReferralLinkButton.innerText = 'Referral Link';
            desktopReferralLinkButton.innerText = 'Referral Link';
            mobileReferralLinkButton.classList.remove('fadedOut');
            desktopReferralLinkButton.classList.remove('fadedOut');
          }, 500);
        }, 1000);
      }
      var channelPromoInfoContainers = document.getElementsByClassName('channel--promo-info-container');
      var desktopReferralLinkButtons = document.getElementsByClassName('referral-link-button-desktop');
      var desktopCopyButtons = document.getElementsByClassName('referral-link-copy-button')
      var mobileReferralLinkButtons = document.getElementsByClassName('referral-link-button-mobile');
      for (var i = 0; i < channelPromoInfoContainers.length; i++) {
        desktopReferralLinkButtons[i].addEventListener('click', openReferralLinkAnimation, false);
        desktopCopyButtons[i].addEventListener('click', closeReferralLinkAnimation, false);
        desktopCopyButtons[i].addEventListener('click', copyButtonAnimation, false);
        mobileReferralLinkButtons[i].addEventListener('click', copyButtonAnimation, false);
      }
    })();

script id="instant-donation-modal" type="text/html"
  = render "instant_donation_modal", wallet: @wallet, uphold_connection: @publisher.uphold_connection
