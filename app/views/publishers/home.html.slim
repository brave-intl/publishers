javascript:
  (function() {
    var spinnerShown;

    function showSpinner() {
      var spinner = document.getElementById('cssload-container');
      spinner.style.display = 'block';
      spinnerShown = Date.now();
    }

    function hideSpinner() {
      if (spinnerShown) {
        var minTime = 500;
        var now = Date.now();

        var spinner = document.getElementById('cssload-container');
        if (now - spinnerShown > minTime)
          spinner.style.display = 'none';
        else {
          setTimeout(function() {
            spinner.style.display = 'none';
          }, minTime - (now - spinnerShown));
        }
      }
    }

    function submitForm(formId, method, showSpinners) {
      var form = document.getElementById(formId);
      var options = {
        headers: {
          'Accept': 'application/json'
        },
        credentials: 'same-origin',
        method: method,
        body: new FormData(form)
      };
      if (showSpinners) { showSpinner(); }
      return window.fetch(form.action, options)
        .then(function(response) {
          if (showSpinners) { hideSpinner(); }
          if (response.status === 401) {
            // Force a page reload if the user is no longer authenticated.
            window.location.reload();
          }
          return response;
        })
        .catch(function(e) {
          if (showSpinners) { hideSpinner(); }
          window.alert("An unexpected error occurred. Please try reloading this page.")
        });
    }

    function pollUntilSuccess(url, delay, backoff, attempts) {
      return new Promise(function(resolve, reject) {
        var attempt = 0;
        var currentDelay = delay;

        function fetchAttempt() {
          attempt++;

          if (attempt > attempts) {
            reject(new Error('Attempts exceeded!'));
            return;
          }

          fetchAfterDelay(url, currentDelay)
            .then(function(response) { resolve(response); })
            .catch(function(e) {
              currentDelay += backoff;
              fetchAttempt();
            });
        }

        fetchAttempt();
      });
    }

    function fetchAfterDelay(url, delay) {
      return new Promise(function(resolve, reject) {
        setTimeout(function() {
          var options = {
            headers: {
              'Accept': 'application/json'
            },
            credentials: 'same-origin',
            method: 'GET'
          };
          window.fetch(url, options)
            .then(function(response) {
              if (response.status >= 200 && response.status < 300) {
                resolve(response);
              } else {
                reject(response);
              }
            }, function(e) {
              reject(e);
            });
        }, delay);
      });
    }

    function showPendingContactEmail(pendingEmail) {
      var pendingEmailNotice = document.getElementById('pending_email_notice');
      var showContactEmail = document.getElementById('show_contact_email');
      if (pendingEmail && pendingEmail != showContactEmail.innerText) {
        pendingEmailNotice.innerHTML = 'Pending: Email address has been updated to: <strong>' + pendingEmail + '</strong>. An email has been sent to this address to confirm this change.';
        pendingEmailNotice.style.display = 'block';
      } else {
        pendingEmailNotice.style.display = 'none';
      }
    }

    function refreshBalance() {
      var options = {
        headers: {
            'Accept': 'application/json'
        },
        credentials: 'same-origin',
        method: 'GET'
      };

      return fetchAfterDelay('./balance', 500)
        .then(function(response) {
          if (response.status === 200 || response.status === 304) {
            return response.json();
          }
        })
        .then(function(body) {
          var batAmount = document.getElementById('bat_amount');
          batAmount.innerText = body.bat_amount;
          var convertedAmount = document.getElementById('converted_amount');
          convertedAmount.innerText = body.converted_balance;
        });
    }

    function showVerificationModal() {
      var modal = document.getElementById('verification_modal');
      classie.add(modal, 'md-show');
    }

    function hideVerificationModal() {
      var modal = document.getElementById('verification_modal');
      classie.remove(modal, 'md-show');
    }

    function verificationStatusUpdated(checked) {
      var form = document.getElementById('update_show_verification_status');
      form.className = checked ? 'checked' : 'unchecked';
    }

    window.addEventListener('load', function() {
      var showVerificationStatusInput = document.getElementById('publisher_show_verification_status');
      showVerificationStatusInput.addEventListener('click', function(event) {
        submitForm('update_show_verification_status', 'PATCH', true);
        verificationStatusUpdated(showVerificationStatusInput.checked);
      }, false);

      if (document.getElementById('verification_modal')) {
        document.getElementById('verify_now').addEventListener('click', function(event) {
          showVerificationStatusInput.checked = true;
          verificationStatusUpdated(true);
          submitForm('update_show_verification_status', 'PATCH', false);
          hideVerificationModal();
        });
        document.getElementById('verify_later').addEventListener('click', function(event) {
          showVerificationStatusInput.checked = false;
          verificationStatusUpdated(false);
          submitForm('update_show_verification_status', 'PATCH', false);
          hideVerificationModal();
        });

        showVerificationModal();
      }

      var defaultCurrencySelect = document.getElementById('publisher_default_currency');
      if (defaultCurrencySelect) {
        defaultCurrencySelect.addEventListener('change', function (event) {
          submitForm('update_default_currency_form', 'PATCH', true);
          refreshBalance();
        }, false);
      }

      var showContact = document.getElementById('show_contact');
      var showContactName = document.getElementById('show_contact_name');
      var showContactEmail = document.getElementById('show_contact_email');
      var showContactPhone = document.getElementById('show_contact_phone');
      var showContactPhoneSeparator = document.getElementById('show_contact_phone_separator');

      var pendingContactEmail = document.getElementById('pending_contact_email');
      showPendingContactEmail(pendingContactEmail.innerText);

      var updateContact = document.getElementById('update_contact');
      var updateContactName = document.getElementById('update_contact_name');
      var updateContactEmail = document.getElementById('update_contact_email');
      var updateContactPhone = document.getElementById('update_contact_phone');

      var editContact = document.getElementById('edit_contact');
      var cancelEditContact = document.getElementById('cancel_edit_contact');

      var generateStatement = document.getElementById('generate_statement');
      var generateStatementResult = document.getElementById('generate_statement_result');
      var statementPeriod = document.getElementById('statement_period');
      var generatedStatements = document.getElementById('generated_statements');

      editContact.addEventListener('click', function(event) {
        updateContactName.value = showContactName.innerText;
        updateContactEmail.value = pendingContactEmail.innerText || showContactEmail.innerText;
        updateContactPhone.value = showContactPhone.innerText;
        showContact.style.display = 'none';
        updateContact.style.display = 'block';
        editContact.style.display = 'none';
        updateContactName.focus();
        event.preventDefault();
      }, false);

      cancelEditContact.addEventListener('click', function(event) {
        showContact.style.display = 'block';
        updateContact.style.display = 'none';
        editContact.style.display = 'block';
        event.preventDefault();
      }, false);

      updateContact.addEventListener('submit', function(event) {
        event.preventDefault();
        submitForm('update_contact', 'PATCH', true)
          .then(function() {
            var updatedEmail = updateContactEmail.value;
            showContactName.innerText = updateContactName.value;
            showContactPhone.innerText = updateContactPhone.value;
            pendingContactEmail.innerText = updatedEmail;
            showPendingContactEmail(updatedEmail);

            updateContact.style.display = 'none';
            showContact.style.display = 'block';
            editContact.style.display = 'block';
            showContactPhoneSeparator.style.display = (showContactPhone.innerText ? 'inline' : 'none');
          });
      }, false);

      generateStatement.addEventListener('click', function(event) {
        var statementId;
        var statementDownloadDiv;

        event.preventDefault();
        generateStatement.style.display = 'none';

        submitForm('statement_generator', 'PATCH', false)
          .then(function(response) {
            return response.json();
          })
          .then(function(json) {
            var newStatementDiv = document.createElement('div');
            newStatementDiv.className = 'statement';

            var statementDateDiv = document.createElement('div');
            statementDateDiv.className = 'date';
            statementDateDiv.appendChild(document.createTextNode(json.date));
            newStatementDiv.appendChild(statementDateDiv);

            var statementPeriodDiv = document.createElement('div');
            statementPeriodDiv.className = 'period';
            statementPeriodDiv.appendChild(document.createTextNode(json.period));
            newStatementDiv.appendChild(statementPeriodDiv);

            statementDownloadDiv = document.createElement('div');
            statementDownloadDiv.className = 'download';
            statementDownloadDiv.appendChild(document.createTextNode('Generating'));
            newStatementDiv.appendChild(statementDownloadDiv);

            generatedStatements.insertBefore(newStatementDiv, generatedStatements.firstChild);

            dynamicEllipsis.start(statementDownloadDiv);

            statementId = json.id;
            return pollUntilSuccess('/publishers/statement_ready?id=' + statementId, 3000, 2000, 7);
          })
          .then(function() {
            dynamicEllipsis.stop(statementDownloadDiv);
            statementDownloadDiv.innerHTML = '<a href="/publishers/statement?id=' + statementId + '">Download</a>';
            generateStatement.style.display = 'inline-block';
          })
          .catch(function(e) {
            if (statementDownloadDiv) {
              dynamicEllipsis.stop(statementDownloadDiv);
              statementDownloadDiv.innerText = 'Delayed'
            }
            generateStatement.style.display = 'inline-block';
          });
      }, false);
    }, false);
  })();

- if poll_uphold_status?(current_publisher)
  javascript:
    (function() {
      var checkUpholdStatusInterval;

      function checkUpholdStatus() {
        var options = {
          headers: {
            'Accept': 'application/json'
          },
          credentials: 'same-origin',
          method: 'GET'
        };

        return window.fetch('./status', options)
          .then(function(response) {
            if (response.status === 200 || response.status === 304) {
              return response.json();
            }
          })
          .then(function(body) {
            if (body.uphold_status === 'verified') {
              document.getElementById('publisher_status').innerText = body.uphold_status_description;
              var publisherStatus = document.getElementById('publisher_status');
              publisherStatus.innerText = body.status_description;
              publisherStatus.className = body.status;
              var upholdDashboard = document.getElementById('uphold_dashboard');
              upholdDashboard.style.display = '';
              dynamicEllipsis.stop('publisher_status');
              clearInterval(checkUpholdStatusInterval);
            }
          });
      }

      window.addEventListener('load', function() {
        dynamicEllipsis.start('publisher_status');
        checkUpholdStatusInterval = setInterval(checkUpholdStatus, 2000);
      });
    })();

noscript
  div.noscript-warning = t("publishers.dashboard_noscript")

- if current_publisher.show_verification_status.nil?
  .md-container#verification_modal
    .md-content
      h1= t("publishers.verify_modal_title")
      h2= t("publishers.verify_modal_subtitle")
      p= t("publishers.verify_modal_content_html")
      .panel-section
        a.btn.btn-cancel#verify_later= t("publishers.verify_modal_cancel")
        a.btn.btn-primary#verify_now= t("publishers.verify_modal_confirm")
  .md-overlay

- content_for(:navbar_content_right) do
  - if current_publisher.publication_type == :site
    .dashboard-id= t("publishers.dashboard-id-html", publisher_id: current_publisher.brave_publisher_id)
  - elsif current_publisher.publication_type == :youtube_channel
    .dashboard-id= t("publishers.dashboard-id-html", publisher_id: current_publisher.youtube_channel.title)

#cssload-container
  .cssload-container
    .cssload-loading
      i
      i

.row
  .col.col-details.col-md-6.col-xs-10.col-xs-center.col-sm-center
    .publisher-status
      - if current_publisher.publication_type == :site
        .publisher-domain-summary
          .publisher-domain-name= current_publisher.brave_publisher_id
          #publisher_verification_status class=publisher_verification_status(current_publisher)
            = publisher_verification_status_description(current_publisher)
      - elsif current_publisher.publication_type == :youtube_channel
        .publisher-youtube-channel
          .channel-thumbnail= image_tag(current_publisher.youtube_channel.thumbnail_url)
          .channel-name title=current_publisher.youtube_channel.title
            = current_publisher.youtube_channel.title.truncate(30)
  .col.col-details.col-md-6.col-xs-10.col-xs-center.col-sm-center
    h4= t("publishers.balance_pending")
    .balance
      .pull-left
        = image_tag("bat-logo@1x.png", class: "")
      .pull-left.amounts
        .bat
          span.bat-amount#bat_amount= publisher_humanize_balance(current_publisher, "BAT")
          span.bat-code= " BAT"
        .converted#converted_amount
          = publisher_converted_balance(current_publisher)
.row
  .col.col-details.col-md-6.col-xs-10.col-xs-center.col-sm-center
    .sub-panel.dashboard-panel.uphold-panel
      .panel-header.panel-header-h3#dashboard_uphold_header
        = t("publishers.dashboard_uphold_header")
      .attribute-value.status
        #publisher_status class=publisher_status(current_publisher)
          = publisher_status_description(current_publisher)
        - if show_uphold_connect?(current_publisher)
          div#uphold_connect
            .panel-section= link_to(uphold_authorization_description(current_publisher),
                    uphold_authorization_endpoint(current_publisher), class: "btn btn-primary")
        - else
          .panel-section#uphold_dashboard style=(show_uphold_dashboard?(current_publisher) ? '' : 'display: none')
            .panel-section
              = form_for(current_publisher, url: publishers_path, html: { id: "update_default_currency_form" }) do |f|
                span= t("publishers.current_deposit_currency")
                span#default_currency_code= f.select(:default_currency, options_for_select(publisher_available_currencies(current_publisher), publisher_default_currency(current_publisher)))
            = link_to(t("publishers.uphold_check_balance"), uphold_dashboard_url, class: "btn btn-primary", :"data-piwik-action" => "CheckUpholdBalanceClicked", :"data-piwik-name" => "Clicked", :"data-piwik-value" => "Dashboard")
  .col.col-details.col-md-6.col-xs-10.col-xs-center.col-sm-center
    .sub-panel.dashboard-panel
      .statements#statement_section style=(current_publisher.uphold_verified ? '' : 'display: none')
        .panel-header.panel-header-h4#publishers_statement
          = t("publishers.statements")
        = form_for(current_publisher, url: generate_statement_publishers_path, html: { id: "statement_generator" }) do |f|
          .form-group
            = select_tag(:statement_period, options_for_select(statement_periods, :past_30_days))
            .pull-right
              a.edit-link#generate_statement href="#"
                = t("shared.generate")
        .clearfix
        #generated_statements
          - current_publisher.statements.each do |s|
            .statement
              .date= statement_period_date(s.created_at)
              .period= statement_period_description(s.period.to_sym)
              .download= s.encrypted_contents? ? link_to(t("publishers.statement_download"), statement_publishers_url(id: s.id)) : t("publishers.statement_delayed")

      .panel-header.panel-header-h4#publishers_contact
        = t("publishers.contact")
        .pull-right
          a.edit-link#edit_contact href="#"
            = t("publishers.edit_contact")
        .clearfix
      .attribute-value.contact-person
        #show_contact
          #show_contact_name= current_publisher.name
          span.email#show_contact_email= current_publisher.email
          span.hidden#pending_contact_email= current_publisher.pending_email
          span#show_contact_phone_separator style=(current_publisher.phone.present? ? '' : 'display: none')
            |&nbsp;&bull;&nbsp;
          span.phone#show_contact_phone
            = current_publisher.phone
        = form_for(current_publisher, url: publishers_path, html: { id: "update_contact", class: "in-place-edit", style: "display: none" }) do |f|
          .form-group
            = f.label(:name, class: "control-label")
            = f.text_field(:name, class: "form-control", id: "update_contact_name", placeholder: "Alice Bloglette", required: true)
          .form-group
            = f.label(:email, class: "control-label")
            = f.email_field(:pending_email, class: "form-control", id: "update_contact_email", placeholder: "alice@example.com", required: true)
          .form-group
            = f.label(:phone, t("publishers.verified_phone_html"), class: "control-label")
            = f.phone_field(:phone, class: "form-control", id: "update_contact_phone", placeholder: "+1 888 555 9001", required: false)
          .button.form-group
            = f.submit(translate("shared.update"), class: "btn btn-primary", :"data-piwik-action" => "SubmitContactUpdateClicked", :"data-piwik-name" => "Clicked", :"data-piwik-value" => "Dashboard")
            a#cancel_edit_contact href="#"
              = t("shared.cancel")
        p#pending_email_notice style="display: none" class="note"
      = form_for(current_publisher, url: publishers_path,
              html: { id: "update_show_verification_status",
                      class: current_publisher.show_verification_status? ? 'checked' : 'unchecked' }) do |f|
        .form-group
          .panel-header.panel-header-h4#publishers_list
            .inline-controls.pull-right
              .onoffswitch
                = f.check_box(:show_verification_status, class: "onoffswitch-checkbox", :"data-piwik-action" => "ShowStatusToggleClicked", :"data-piwik-name" => "Clicked", :"data-piwik-value" => "Dashboard", id: "publisher_show_verification_status")
                = f.label(:show_verification_status, class: "onoffswitch-label", for: "publisher_show_verification_status") do
                  span.onoffswitch-inner
                  span.onoffswitch-switch
              .value-label.pull-right#show_verification_status_value
            .list-label= t("publishers.dashboard_list_in_verified_publishers_html")
.row.tos-row
  .col.col-details.col-md-6.col-md-push-6.col-xs-10.col-xs-center.col-sm-center
    .terms-of-service
      = link_to(t("shared.terms_of_service"), terms_of_service_url)