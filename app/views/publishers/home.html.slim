noscript
  div.noscript-warning = t ".noscript"

- if flash[:taken_channel_id]
  = render :partial => 'channel_taken', :locals => { channel_id: flash[:taken_channel_id] }

- content_for(:navbar_content_right) do
  .title.hidden-sm.hidden-xs= t ".dashboard"
  = link_to( \
    "+ #{t "shared.add_channel"}", \
    choose_new_channel_type_publishers_path, \
    data: { "js-confirm-with-modal": "choose-channel-type" }, \
    class: 'btn btn-secondary btn-highlight' \
  )

script id="choose-channel-type" type="text/html"
  = render "home_modal__choose_channel_type"

.row
  .col.col-details.col-md-6.col-xs-10.col-xs-center.col-sm-center
    h4.balance-header = t ".balance_pending"
    .balance
      .pull-left
        = image_tag("bat-logo@1x.png", class: "")
      .pull-left.amounts
        .bat
          span.bat-amount#bat_amount= publisher_humanize_balance(current_publisher, "BAT")
          span.bat-code= " BAT"
        .converted#converted_amount
          = publisher_converted_balance(current_publisher)
  - if promo_running?
    .col.col-details.col-md-6.col-xs-10.col-xs-center.col-sm-center
      .sub-panel.promo-panel
        - if current_publisher.promo_status(promo_running?) == :inactive
          .promo-panel-item.promo-panel-item-info
            #promo-limited-time= t("promo.activate.limited_time_promo")
            h3#promo-title= t("promo.activate.title")
            #promo-referring-fans= t("promo.activate.for_referring_your_fans")
          .promo-panel-item.promo-panel-item-button
            = form_for current_publisher, { method: :get, url: promo_registrations_path } do |f|
              = f.submit(t("promo.activate.button-dashboard").upcase, class: "btn btn-primary", id: "activate-promo-dashboard-button" )
        - elsif current_publisher.has_verified_channel?
          .promo-panel-item.promo-panel-item-info
            .promo-item-content.promo-item-content-progress
              = t("promo.dashboard.promo_progress").upcase
            .promo-item-content.promo-item-content-tos
              = t("promo.dashboard.dashboard_tos_html")
          #promo-downloaded.promo-panel-item
            .promo-item-content.promo-item-content-white.promo-item-content-header
              = t("promo.dashboard.downloaded").upcase
            .promo-item-content.promo-item-content-white.promo-item-content-number
              = total_possible_referrals(current_publisher)
        - else
          .promo-panel-item.promo-panel-item-alert
            #promo-panel-alert
              = t("promo.dashboard.add_channel")
  - elsif current_publisher.channels.empty?
    .col.col-details.col-md-6.col-xs-10.col-xs-center.col-sm-center
      .add-channel-cta
        = t ".add_channel_cta"
.row
  .col.col-details.col-md-6.col-xs-10.col-xs-center.col-sm-center
    .sub-panel.dashboard-panel.uphold-panel
      .panel-header.panel-header-h3#dashboard_uphold_header
        = t ".uphold.heading"
      .attribute-value.status
        #publisher_status class=publisher_status(current_publisher)
          = publisher_status_description(current_publisher)
        - if show_uphold_connect?(current_publisher)
          div#uphold_connect
            .panel-section= link_to(uphold_authorization_description(current_publisher),
                    uphold_authorization_endpoint(current_publisher), class: "btn btn-primary", :"data-test" => "reconnect-button")
        - if current_publisher.uphold_status == :access_parameters_acquired || current_publisher.uphold_status == :verified
          .panel-section#uphold_dashboard class=(uphold_status_class(current_publisher) + (show_uphold_dashboard?(current_publisher) ? '' : ' hidden'))
            .panel-section
              = form_for(current_publisher, url: publishers_path, html: { id: "update_default_currency_form" }) do |f|
                span= t ".uphold.deposit_currency"
                span#default_currency_code= f.select(:default_currency, options_for_select(publisher_available_currencies(current_publisher), publisher_default_currency(current_publisher)))
            = link_to(t(".uphold.check_balance"), uphold_dashboard_url, class: "btn btn-primary", :"data-piwik-action" => "CheckUpholdBalanceClicked", :"data-piwik-name" => "Clicked", :"data-piwik-value" => "Dashboard")
  .col.col-details.col-md-6.col-xs-10.col-xs-center.col-sm-center
    .sub-panel.dashboard-panel
      .statements#statement_section class=(current_publisher.uphold_verified ? '' : 'hidden')
        .panel-header.panel-header-h4#publishers_statement
          = t ".statements.heading"
        - if unused_statement_periods.length > 0
          = form_for(current_publisher, url: generate_statement_publishers_path, html: { id: "statement_generator" }) do |f|
            .form-group
              = select_tag(:statement_period, options_for_select(statement_periods_as_options(unused_statement_periods), :past_30_days))
              .pull-right
                a.edit-link#generate_statement href="#"
                  = t ".statements.generate"
        .clearfix
        #generated_statements
          - current_publisher.statements.each do |s|
            .statement
              .period= statement_period_description(s.period.to_sym)
              .download= s.encrypted_contents? ? link_to(t("shared.download"), statement_publishers_url(id: s.id)) : t(".statements.delayed")

      .panel-header.panel-header-h4#publishers_contact
        = t ".contact.heading"
        .pull-right
          a.edit-link#edit_contact href="#"
            = t ".contact.edit"
        .clearfix
      .attribute-value.contact-person
        #show_contact
          #show_contact_name= current_publisher.name
          span.email#show_contact_email= current_publisher.email
          span.hidden#pending_contact_email= current_publisher.pending_email
          span#show_contact_phone_separator class=(current_publisher.phone.present? ? '' : 'hidden')
            |&nbsp;&bull;&nbsp;
          span.phone#show_contact_phone
            = current_publisher.phone
        = form_for(current_publisher, url: publishers_path, html: { id: "update_contact", class: "in-place-edit hidden" }) do |f|
          .form-group
            = f.label(:name, class: "control-label", for: "update_contact_name")
            = f.text_field(:name, class: "form-control", id: "update_contact_name", placeholder: "Alice Bloglette", required: true)
          .form-group
            = f.label(:email, class: "control-label", for: "update_contact_email")
            = f.email_field(:pending_email, class: "form-control", id: "update_contact_email", placeholder: "alice@example.com", required: true)
          .form-group
            = f.label(:phone, t("publishers.shared.verified_phone_html"), class: "control-label", for: "update_contact_phone")
            = f.phone_field(:phone, class: "form-control", pattern: "^[0-9\-\+\.\s\(\)]*$", title: t("publishers.shared.phone_validation"), id: "update_contact_phone", placeholder: "+1 888 555 9001", required: false)
          .button.form-group
            = f.submit(translate(".contact.update"), class: "btn btn-primary", :"data-piwik-action" => "SubmitContactUpdateClicked", :"data-piwik-name" => "Clicked", :"data-piwik-value" => "Dashboard")
            a#cancel_edit_contact href="#"
              = t "shared.cancel"
        p#pending_email_notice class="note hidden"

        = form_for(current_publisher, url: publishers_path, html: { id: "update_publisher_visible_form" }) do |f|
          = f.check_box(:visible, class: "form-check-input")
          = f.label(:visible, class: "form-check-label", for: "publisher_visible")

.row id="add_channel_placeholder" class=(current_publisher.channels.visible.empty? ? '' : 'hidden')
  .col.col-details.col-md-12.col-xs-10.col-xs-center.col-sm-center
    = link_to( \
      "+ #{t "shared.add_channel"}", \
      choose_new_channel_type_publishers_path, \
      data: { "js-confirm-with-modal": "choose-channel-type" }, \
      class: 'channel-placeholder' \
    )

- current_publisher.channels.visible.each do |channel|
  .row.channel-row id=("channel_row_#{channel.id}")
    .col.col-details.col-md-12.col-xs-10.col-xs-center.col-sm-center
      div class=("sub-panel channel-panel channel-#{channel_verification_status(channel)}")
        .channel-panel--intro
          .channel-panel--intro-icon
            img src=(channel_type_icon_url(channel)) width=16 height=16
          .channel-panel--intro-body
            = channel_type(channel).upcase
        .channel-thumbnail.pull-left
          img src=(channel_thumbnail_url(channel))
        - if channel.verified?
          - if current_publisher.promo_status(promo_running?) == :active && channel.promo_enabled?
            .channel--promo-info-container
              = link_to("", tweet_url(channel.promo_registration.referral_code), target: :_blank, class: "promo-share-button promo-share-button-twitter")
              = link_to("", facebook_url(channel.promo_registration.referral_code), target: :_blank, class: "promo-share-button promo-share-button-facebook")
              .referral-link-url.promo-info-item
                span= referral_url(channel.promo_registration.referral_code)
              .referral-link-button.referral-link-button-desktop.promo-info-item
                span= t("promo.shared.referral_link")
              .referral-link-button.referral-link-button-mobile.promo-info-item.copy-button data-clipboard-text="#{referral_url(channel.promo_registration.referral_code)}"
                span= t("promo.shared.referral_link")
              .referral-link-copy-button.promo-info-item.copy-button data-clipboard-text="#{referral_url(channel.promo_registration.referral_code)}"
                span= t("promo.shared.copy")
          - else
            .channel-status.pull-right
              span= t("publishers.shared.verified")
        - elsif channel.verification_started? || channel.verification_failed?
          .channel-status.pull-right
            = channel_verification_details(channel)
        - else
          .channel-status.pull-right
            = link_to(t(".channel.lets_finish"), channel_next_step_path(channel), class: "btn btn-primary")
          .channel-progress.pull-right
            .one-more-step= t ".channel.one_more_step"
        .channel-summary
          h3= channel.publication_title
          .channel-details
            .added-date
              = t ".channel.added", date: channel.created_at.to_date.iso8601
            .separator
              = '|'
            a.remove-channel href="#" data-channel-id=(channel.id)
              = t ".channel.remove_verified"
            script type="text/html" data-js-channel-removal-confirmation-template=(channel.id)
              = render "publishers/remove_channel_modal", channel: channel
            = form_for(channel, html: {id: "remove_channel_#{channel.id}"}) do |f|
        .clearfix
.row.tos-row
  - if current_publisher.promo_enabled_2018q1
    .promo--tos
      = t("promo.shared.tos_2_html")
  - else
    .col.col-details.col-md-6.col-md-push-6.col-xs-10.col-xs-center.col-sm-center
      .terms-of-service
        = link_to(t("shared.terms_of_service"), terms_of_service_url)


- if current_publisher.promo_status(promo_running?) == :active
  javascript:
    (function() {
      function closeReferralLinkAnimation() {
        var channelPromoInfoContainer = this.parentNode;
        if (channelPromoInfoContainer.classList.contains('channel--promo-info-container-slideout')) {
          channelPromoInfoContainer.classList.remove('channel--promo-info-container-slideout');
        }
      }

      function openReferralLinkAnimation() {
        var channelPromoInfoContainer = this.parentNode;

        if (!channelPromoInfoContainer.classList.contains('channel--promo-info-container-slideout')) {
          channelPromoInfoContainer.classList.add('channel--promo-info-container-slideout');
        }
      }

      function copyButtonAnimation() {
        channelPromoInfoContainer = this.parentNode;
        var mobileReferralLinkButtons = document.getElementsByClassName('referral-link-button-mobile');
        var desktopReferralLinkButtons = document.getElementsByClassName('referral-link-button-desktop');

        for (var i = 0; i < mobileReferralLinkButtons.length; i++){
          mobileReferralLinkButtons[i].children[0].innerText = 'Referral Link';
          desktopReferralLinkButtons[i].children[0].innerText = 'Referral Link';
        }
        var mobileReferralLinkButton = channelPromoInfoContainer.children[4].children[0];
        var desktopReferralLinkButton = channelPromoInfoContainer.children[3].children[0];
        mobileReferralLinkButton.innerText = 'Copied!';
        desktopReferralLinkButton.innerText = 'Copied!';

        // Fade out 'copied!'
        setTimeout(function(){
          mobileReferralLinkButton.classList.add('fadedOut');
          desktopReferralLinkButton.classList.add('fadedOut');
          setTimeout(function(){
            mobileReferralLinkButton.innerText = 'Referral Link';
            desktopReferralLinkButton.innerText = 'Referral Link';
            mobileReferralLinkButton.classList.remove('fadedOut');
            desktopReferralLinkButton.classList.remove('fadedOut');
          }, 500);
        }, 1000);
      }

      var channelPromoInfoContainers = document.getElementsByClassName('channel--promo-info-container');
      var desktopReferralLinkButtons = document.getElementsByClassName('referral-link-button-desktop');
      var desktopCopyButtons = document.getElementsByClassName('referral-link-copy-button')
      var mobileReferralLinkButtons = document.getElementsByClassName('referral-link-button-mobile');

      for (var i = 0; i < channelPromoInfoContainers.length; i++) {
        desktopReferralLinkButtons[i].addEventListener('click', openReferralLinkAnimation, false);
        desktopCopyButtons[i].addEventListener('click', closeReferralLinkAnimation, false);
        desktopCopyButtons[i].addEventListener('click', copyButtonAnimation, false);
        mobileReferralLinkButtons[i].addEventListener('click', copyButtonAnimation, false);
      }
    })();
