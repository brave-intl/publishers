# typed: ignore
# This is an autogenerated file for Rails' mailers.
# Please rerun bundle exec rake rails_rbi:mailers to regenerate.
class PromoMailer
  sig { params(publisher: T.untyped).returns(ActionMailer::MessageDelivery) }
  def self.activate_promo_2018q1(publisher); end

  sig { returns(ActionMailer::MessageDelivery) }
  def self.active_promo_id; end

  sig { returns(ActionMailer::MessageDelivery) }
  def self.base_referral_url; end

  sig { params(date: T.untyped, reporting_interval: T.untyped, start: T.untyped).returns(ActionMailer::MessageDelivery) }
  def self.coerce_date_to_start_or_end_of_reporting_interval(date, reporting_interval, start); end

  sig do
    params(
      object_name: T.untyped,
      method: T.untyped,
      options: T.untyped,
      html_options: T.untyped
    ).returns(ActionMailer::MessageDelivery)
  end
  def self.date_select(object_name, method, options = {}, html_options = {}); end

  sig do
    params(
      object_name: T.untyped,
      method: T.untyped,
      options: T.untyped,
      html_options: T.untyped
    ).returns(ActionMailer::MessageDelivery)
  end
  def self.datetime_select(object_name, method, options = {}, html_options = {}); end

  sig { params(from_time: T.untyped, to_time: T.untyped, options: T.untyped).returns(ActionMailer::MessageDelivery) }
  def self.distance_of_time_in_words(from_time, to_time = 0, options = {}); end

  sig { params(from_time: T.untyped, options: T.untyped).returns(ActionMailer::MessageDelivery) }
  def self.distance_of_time_in_words_to_now(from_time, options = {}); end

  sig { params(event_type: T.untyped).returns(ActionMailer::MessageDelivery) }
  def self.event_type_column_header(event_type); end

  sig { params(referral_code: T.untyped).returns(ActionMailer::MessageDelivery) }
  def self.facebook_url(referral_code); end

  sig { params(referral_code: T.untyped).returns(ActionMailer::MessageDelivery) }
  def self.https_referral_url(referral_code); end

  sig { params(publisher: T.untyped, channel: T.untyped).returns(ActionMailer::MessageDelivery) }
  def self.new_channel_registered_2018q1(publisher, channel); end

  sig { returns(ActionMailer::MessageDelivery) }
  def self.offline_promo_stats; end

  sig { returns(ActionMailer::MessageDelivery) }
  def self.offline_referral_code; end

  sig { params(channel: T.untyped).returns(ActionMailer::MessageDelivery) }
  def self.on_channel_type(channel); end

  sig { returns(ActionMailer::MessageDelivery) }
  def self.perform_promo_offline?; end

  sig { params(publisher: T.untyped, promo_enabled_channels: T.untyped).returns(ActionMailer::MessageDelivery) }
  def self.promo_activated_2018q1_verified(publisher, promo_enabled_channels); end

  sig { returns(ActionMailer::MessageDelivery) }
  def self.promo_running?; end

  sig { params(publisher: T.untyped).returns(ActionMailer::MessageDelivery) }
  def self.publisher_current_referral_totals(publisher); end

  sig { params(publisher: T.untyped).returns(ActionMailer::MessageDelivery) }
  def self.publisher_referral_totals(publisher); end

  sig { params(publisher: T.untyped).returns(ActionMailer::MessageDelivery) }
  def self.publisher_referrals_last_update(publisher); end

  sig { params(is_geo: T.untyped).returns(ActionMailer::MessageDelivery) }
  def self.ratios_column_header(is_geo); end

  sig { params(referral_code: T.untyped).returns(ActionMailer::MessageDelivery) }
  def self.referral_url(referral_code); end

  sig { params(reporting_interval: T.untyped).returns(ActionMailer::MessageDelivery) }
  def self.reporting_interval_column_header(reporting_interval); end

  sig { params(date: T.untyped, options: T.untyped, html_options: T.untyped).returns(ActionMailer::MessageDelivery) }
  def self.select_date(date = Date.current, options = {}, html_options = {}); end

  sig { params(datetime: T.untyped, options: T.untyped, html_options: T.untyped).returns(ActionMailer::MessageDelivery) }
  def self.select_datetime(datetime = Time.current, options = {}, html_options = {}); end

  sig { params(date: T.untyped, options: T.untyped, html_options: T.untyped).returns(ActionMailer::MessageDelivery) }
  def self.select_day(date, options = {}, html_options = {}); end

  sig { params(datetime: T.untyped, options: T.untyped, html_options: T.untyped).returns(ActionMailer::MessageDelivery) }
  def self.select_hour(datetime, options = {}, html_options = {}); end

  sig { params(datetime: T.untyped, options: T.untyped, html_options: T.untyped).returns(ActionMailer::MessageDelivery) }
  def self.select_minute(datetime, options = {}, html_options = {}); end

  sig { params(date: T.untyped, options: T.untyped, html_options: T.untyped).returns(ActionMailer::MessageDelivery) }
  def self.select_month(date, options = {}, html_options = {}); end

  sig { params(datetime: T.untyped, options: T.untyped, html_options: T.untyped).returns(ActionMailer::MessageDelivery) }
  def self.select_second(datetime, options = {}, html_options = {}); end

  sig { params(datetime: T.untyped, options: T.untyped, html_options: T.untyped).returns(ActionMailer::MessageDelivery) }
  def self.select_time(datetime = Time.current, options = {}, html_options = {}); end

  sig { params(date: T.untyped, options: T.untyped, html_options: T.untyped).returns(ActionMailer::MessageDelivery) }
  def self.select_year(date, options = {}, html_options = {}); end

  sig { params(from_time: T.untyped, options: T.untyped).returns(ActionMailer::MessageDelivery) }
  def self.time_ago_in_words(from_time, options = {}); end

  sig do
    params(
      object_name: T.untyped,
      method: T.untyped,
      options: T.untyped,
      html_options: T.untyped
    ).returns(ActionMailer::MessageDelivery)
  end
  def self.time_select(object_name, method, options = {}, html_options = {}); end

  sig { params(date_or_time: T.untyped, args: T.untyped, block: T.untyped).returns(ActionMailer::MessageDelivery) }
  def self.time_tag(date_or_time, *args, &block); end

  sig { params(referral_code: T.untyped).returns(ActionMailer::MessageDelivery) }
  def self.tweet_url(referral_code); end
end
