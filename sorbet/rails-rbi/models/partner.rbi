# This is an autogenerated file for dynamic methods in Partner
# Please rerun bundle exec rake rails_rbi:models[Partner] to regenerate.

# typed: strong
module Partner::ActiveRelation_WhereNot
  sig { params(opts: T.untyped, rest: T.untyped).returns(T.self_type) }
  def not(opts, *rest); end
end

module Partner::GeneratedAttributeMethods
  sig { returns(T.nilable(ActiveSupport::TimeWithZone)) }
  def agreed_to_tos; end

  sig { params(value: T.nilable(T.any(Date, Time, ActiveSupport::TimeWithZone))).void }
  def agreed_to_tos=(value); end

  sig { returns(T::Boolean) }
  def agreed_to_tos?; end

  sig { returns(T.nilable(String)) }
  def bitflyer_deposit_id; end

  sig { params(value: T.nilable(T.any(String, Symbol))).void }
  def bitflyer_deposit_id=(value); end

  sig { returns(T::Boolean) }
  def bitflyer_deposit_id?; end

  sig { returns(ActiveSupport::TimeWithZone) }
  def created_at; end

  sig { params(value: T.any(Date, Time, ActiveSupport::TimeWithZone)).void }
  def created_at=(value); end

  sig { returns(T::Boolean) }
  def created_at?; end

  sig { returns(T.nilable(String)) }
  def created_by_id; end

  sig { params(value: T.nilable(T.any(String, Symbol))).void }
  def created_by_id=(value); end

  sig { returns(T::Boolean) }
  def created_by_id?; end

  sig { returns(T::Boolean) }
  def created_via_api; end

  sig { params(value: T::Boolean).void }
  def created_via_api=(value); end

  sig { returns(T::Boolean) }
  def created_via_api?; end

  sig { returns(T.nilable(ActiveSupport::TimeWithZone)) }
  def current_sign_in_at; end

  sig { params(value: T.nilable(T.any(Date, Time, ActiveSupport::TimeWithZone))).void }
  def current_sign_in_at=(value); end

  sig { returns(T::Boolean) }
  def current_sign_in_at?; end

  sig { returns(T.nilable(T.untyped)) }
  def current_sign_in_ip; end

  sig { params(value: T.nilable(T.untyped)).void }
  def current_sign_in_ip=(value); end

  sig { returns(T::Boolean) }
  def current_sign_in_ip?; end

  sig { returns(T.nilable(String)) }
  def default_currency; end

  sig { params(value: T.nilable(T.any(String, Symbol))).void }
  def default_currency=(value); end

  sig { returns(T::Boolean) }
  def default_currency?; end

  sig { returns(T.nilable(ActiveSupport::TimeWithZone)) }
  def default_currency_confirmed_at; end

  sig { params(value: T.nilable(T.any(Date, Time, ActiveSupport::TimeWithZone))).void }
  def default_currency_confirmed_at=(value); end

  sig { returns(T::Boolean) }
  def default_currency_confirmed_at?; end

  sig { returns(T.nilable(String)) }
  def default_site_banner_id; end

  sig { params(value: T.nilable(T.any(String, Symbol))).void }
  def default_site_banner_id=(value); end

  sig { returns(T::Boolean) }
  def default_site_banner_id?; end

  sig { returns(T::Boolean) }
  def default_site_banner_mode; end

  sig { params(value: T::Boolean).void }
  def default_site_banner_mode=(value); end

  sig { returns(T::Boolean) }
  def default_site_banner_mode?; end

  sig { returns(T.nilable(String)) }
  def email; end

  sig { params(value: T.nilable(T.any(String, Symbol))).void }
  def email=(value); end

  sig { returns(T::Boolean) }
  def email?; end

  sig { returns(T::Boolean) }
  def excluded_from_payout; end

  sig { params(value: T::Boolean).void }
  def excluded_from_payout=(value); end

  sig { returns(T::Boolean) }
  def excluded_from_payout?; end

  sig { returns(T.nilable(T.any(T::Array[T.untyped], T::Boolean, Float, T::Hash[T.untyped, T.untyped], Integer, String))) }
  def feature_flags; end

  sig { params(value: T.nilable(T.any(T::Array[T.untyped], T::Boolean, Float, T::Hash[T.untyped, T.untyped], Integer, String))).void }
  def feature_flags=(value); end

  sig { returns(T::Boolean) }
  def feature_flags?; end

  sig { returns(String) }
  def id; end

  sig { params(value: T.any(String, Symbol)).void }
  def id=(value); end

  sig { returns(T::Boolean) }
  def id?; end

  sig { returns(T.nilable(ActiveSupport::TimeWithZone)) }
  def last_sign_in_at; end

  sig { params(value: T.nilable(T.any(Date, Time, ActiveSupport::TimeWithZone))).void }
  def last_sign_in_at=(value); end

  sig { returns(T::Boolean) }
  def last_sign_in_at?; end

  sig { returns(T.nilable(T.untyped)) }
  def last_sign_in_ip; end

  sig { params(value: T.nilable(T.untyped)).void }
  def last_sign_in_ip=(value); end

  sig { returns(T::Boolean) }
  def last_sign_in_ip?; end

  sig { returns(String) }
  def name; end

  sig { params(value: T.any(String, Symbol)).void }
  def name=(value); end

  sig { returns(T::Boolean) }
  def name?; end

  sig { returns(T.nilable(String)) }
  def pending_email; end

  sig { params(value: T.nilable(T.any(String, Symbol))).void }
  def pending_email=(value); end

  sig { returns(T::Boolean) }
  def pending_email?; end

  sig { returns(T.nilable(T::Boolean)) }
  def promo_enabled_2018q1; end

  sig { params(value: T.nilable(T::Boolean)).void }
  def promo_enabled_2018q1=(value); end

  sig { returns(T::Boolean) }
  def promo_enabled_2018q1?; end

  sig { returns(T.nilable(String)) }
  def promo_token_2018q1; end

  sig { params(value: T.nilable(T.any(String, Symbol))).void }
  def promo_token_2018q1=(value); end

  sig { returns(T::Boolean) }
  def promo_token_2018q1?; end

  sig { returns(T.nilable(String)) }
  def role; end

  sig { params(value: T.nilable(T.any(String, Symbol))).void }
  def role=(value); end

  sig { returns(T::Boolean) }
  def role?; end

  sig { returns(T.nilable(String)) }
  def selected_wallet_provider_id; end

  sig { params(value: T.nilable(T.any(String, Symbol))).void }
  def selected_wallet_provider_id=(value); end

  sig { returns(T::Boolean) }
  def selected_wallet_provider_id?; end

  sig { returns(T.nilable(String)) }
  def selected_wallet_provider_type; end

  sig { params(value: T.nilable(T.any(String, Symbol))).void }
  def selected_wallet_provider_type=(value); end

  sig { returns(T::Boolean) }
  def selected_wallet_provider_type?; end

  sig { returns(T.nilable(String)) }
  def session_salt; end

  sig { params(value: T.nilable(T.any(String, Symbol))).void }
  def session_salt=(value); end

  sig { returns(T::Boolean) }
  def session_salt?; end

  sig { returns(Integer) }
  def sign_in_count; end

  sig { params(value: T.any(Numeric, ActiveSupport::Duration)).void }
  def sign_in_count=(value); end

  sig { returns(T::Boolean) }
  def sign_in_count?; end

  sig { returns(T::Boolean) }
  def subscribed_to_marketing_emails; end

  sig { params(value: T::Boolean).void }
  def subscribed_to_marketing_emails=(value); end

  sig { returns(T::Boolean) }
  def subscribed_to_marketing_emails?; end

  sig { returns(T::Boolean) }
  def thirty_day_login; end

  sig { params(value: T::Boolean).void }
  def thirty_day_login=(value); end

  sig { returns(T::Boolean) }
  def thirty_day_login?; end

  sig { returns(T.nilable(ActiveSupport::TimeWithZone)) }
  def two_factor_prompted_at; end

  sig { params(value: T.nilable(T.any(Date, Time, ActiveSupport::TimeWithZone))).void }
  def two_factor_prompted_at=(value); end

  sig { returns(T::Boolean) }
  def two_factor_prompted_at?; end

  sig { returns(ActiveSupport::TimeWithZone) }
  def updated_at; end

  sig { params(value: T.any(Date, Time, ActiveSupport::TimeWithZone)).void }
  def updated_at=(value); end

  sig { returns(T::Boolean) }
  def updated_at?; end
end

module Partner::GeneratedAssociationMethods
  sig { returns(T.nilable(::BitflyerConnection)) }
  def bitflyer_connection; end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: ::BitflyerConnection).void)).returns(::BitflyerConnection) }
  def build_bitflyer_connection(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: ::BitflyerConnection).void)).returns(::BitflyerConnection) }
  def create_bitflyer_connection(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: ::BitflyerConnection).void)).returns(::BitflyerConnection) }
  def create_bitflyer_connection!(*args, &block); end

  sig { params(value: T.nilable(::BitflyerConnection)).void }
  def bitflyer_connection=(value); end

  sig { returns(T.nilable(::BitflyerConnection)) }
  def reload_bitflyer_connection; end

  sig { returns(T.nilable(::Case)) }
  def case; end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: ::Case).void)).returns(::Case) }
  def build_case(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: ::Case).void)).returns(::Case) }
  def create_case(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: ::Case).void)).returns(::Case) }
  def create_case!(*args, &block); end

  sig { params(value: T.nilable(::Case)).void }
  def case=(value); end

  sig { returns(T.nilable(::Case)) }
  def reload_case; end

  sig { returns(::Channel::ActiveRecord_Associations_CollectionProxy) }
  def channels; end

  sig { returns(T::Array[String]) }
  def channel_ids; end

  sig { params(value: T::Enumerable[::Channel]).void }
  def channels=(value); end

  sig { returns(::Publisher) }
  def created_by; end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: ::Publisher).void)).returns(::Publisher) }
  def build_created_by(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: ::Publisher).void)).returns(::Publisher) }
  def create_created_by(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: ::Publisher).void)).returns(::Publisher) }
  def create_created_by!(*args, &block); end

  sig { params(value: ::Publisher).void }
  def created_by=(value); end

  sig { returns(::Publisher) }
  def reload_created_by; end

  sig { returns(::Publisher::ActiveRecord_Associations_CollectionProxy) }
  def created_users; end

  sig { returns(T::Array[String]) }
  def created_user_ids; end

  sig { params(value: T::Enumerable[::Publisher]).void }
  def created_users=(value); end

  sig { returns(T.nilable(::GeminiConnection)) }
  def gemini_connection; end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: ::GeminiConnection).void)).returns(::GeminiConnection) }
  def build_gemini_connection(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: ::GeminiConnection).void)).returns(::GeminiConnection) }
  def create_gemini_connection(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: ::GeminiConnection).void)).returns(::GeminiConnection) }
  def create_gemini_connection!(*args, &block); end

  sig { params(value: T.nilable(::GeminiConnection)).void }
  def gemini_connection=(value); end

  sig { returns(T.nilable(::GeminiConnection)) }
  def reload_gemini_connection; end

  sig { returns(::Invoice::ActiveRecord_Associations_CollectionProxy) }
  def invoices; end

  sig { returns(T::Array[String]) }
  def invoice_ids; end

  sig { params(value: T::Enumerable[::Invoice]).void }
  def invoices=(value); end

  sig { returns(::LoginActivity::ActiveRecord_Associations_CollectionProxy) }
  def login_activities; end

  sig { returns(T::Array[String]) }
  def login_activity_ids; end

  sig { params(value: T::Enumerable[::LoginActivity]).void }
  def login_activities=(value); end

  sig { returns(T.nilable(::Membership)) }
  def membership; end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: ::Membership).void)).returns(::Membership) }
  def build_membership(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: ::Membership).void)).returns(::Membership) }
  def create_membership(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: ::Membership).void)).returns(::Membership) }
  def create_membership!(*args, &block); end

  sig { params(value: T.nilable(::Membership)).void }
  def membership=(value); end

  sig { returns(T.nilable(::Membership)) }
  def reload_membership; end

  sig { returns(::PublisherNote::ActiveRecord_Associations_CollectionProxy) }
  def notes; end

  sig { returns(T::Array[String]) }
  def note_ids; end

  sig { params(value: T::Enumerable[::PublisherNote]).void }
  def notes=(value); end

  sig { returns(T.nilable(::Organization)) }
  def organization; end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: ::Organization).void)).returns(::Organization) }
  def build_organization(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: ::Organization).void)).returns(::Organization) }
  def create_organization(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: ::Organization).void)).returns(::Organization) }
  def create_organization!(*args, &block); end

  sig { params(value: T.nilable(::Organization)).void }
  def organization=(value); end

  sig { returns(T.nilable(::Organization)) }
  def reload_organization; end

  sig { returns(T.nilable(::PaypalConnection)) }
  def paypal_connection; end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: ::PaypalConnection).void)).returns(::PaypalConnection) }
  def build_paypal_connection(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: ::PaypalConnection).void)).returns(::PaypalConnection) }
  def create_paypal_connection(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: ::PaypalConnection).void)).returns(::PaypalConnection) }
  def create_paypal_connection!(*args, &block); end

  sig { params(value: T.nilable(::PaypalConnection)).void }
  def paypal_connection=(value); end

  sig { returns(T.nilable(::PaypalConnection)) }
  def reload_paypal_connection; end

  sig { returns(::PotentialPayment::ActiveRecord_Associations_CollectionProxy) }
  def potential_payments; end

  sig { returns(T::Array[String]) }
  def potential_payment_ids; end

  sig { params(value: T::Enumerable[::PotentialPayment]).void }
  def potential_payments=(value); end

  sig { returns(::PromoCampaign::ActiveRecord_Associations_CollectionProxy) }
  def promo_campaigns; end

  sig { returns(T::Array[String]) }
  def promo_campaign_ids; end

  sig { params(value: T::Enumerable[::PromoCampaign]).void }
  def promo_campaigns=(value); end

  sig { returns(::PromoRegistration::ActiveRecord_Associations_CollectionProxy) }
  def promo_registrations; end

  sig { returns(T::Array[String]) }
  def promo_registration_ids; end

  sig { params(value: T::Enumerable[::PromoRegistration]).void }
  def promo_registrations=(value); end

  sig { returns(T.nilable(T.untyped)) }
  def selected_wallet_provider; end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: T.untyped).void)).returns(T.untyped) }
  def build_selected_wallet_provider(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: T.untyped).void)).returns(T.untyped) }
  def create_selected_wallet_provider(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: T.untyped).void)).returns(T.untyped) }
  def create_selected_wallet_provider!(*args, &block); end

  sig { params(value: T.nilable(T.untyped)).void }
  def selected_wallet_provider=(value); end

  sig { returns(T.nilable(T.untyped)) }
  def reload_selected_wallet_provider; end

  sig { returns(::SiteBanner::ActiveRecord_Associations_CollectionProxy) }
  def site_banners; end

  sig { returns(T::Array[String]) }
  def site_banner_ids; end

  sig { params(value: T::Enumerable[::SiteBanner]).void }
  def site_banners=(value); end

  sig { returns(::SiteChannelDetails::ActiveRecord_Associations_CollectionProxy) }
  def site_channel_details; end

  sig { returns(T::Array[String]) }
  def site_channel_details_ids; end

  sig { params(value: T::Enumerable[::SiteChannelDetails]).void }
  def site_channel_details=(value); end

  sig { returns(::PublisherStatusUpdate::ActiveRecord_Associations_CollectionProxy) }
  def status_updates; end

  sig { returns(T::Array[String]) }
  def status_update_ids; end

  sig { params(value: T::Enumerable[::PublisherStatusUpdate]).void }
  def status_updates=(value); end

  sig { returns(T.nilable(::StripeConnection)) }
  def stripe_connection; end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: ::StripeConnection).void)).returns(::StripeConnection) }
  def build_stripe_connection(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: ::StripeConnection).void)).returns(::StripeConnection) }
  def create_stripe_connection(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: ::StripeConnection).void)).returns(::StripeConnection) }
  def create_stripe_connection!(*args, &block); end

  sig { params(value: T.nilable(::StripeConnection)).void }
  def stripe_connection=(value); end

  sig { returns(T.nilable(::StripeConnection)) }
  def reload_stripe_connection; end

  sig { returns(T.nilable(::TotpRegistration)) }
  def totp_registration; end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: ::TotpRegistration).void)).returns(::TotpRegistration) }
  def build_totp_registration(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: ::TotpRegistration).void)).returns(::TotpRegistration) }
  def create_totp_registration(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: ::TotpRegistration).void)).returns(::TotpRegistration) }
  def create_totp_registration!(*args, &block); end

  sig { params(value: T.nilable(::TotpRegistration)).void }
  def totp_registration=(value); end

  sig { returns(T.nilable(::TotpRegistration)) }
  def reload_totp_registration; end

  sig { returns(T.nilable(::TwoFactorAuthenticationRemoval)) }
  def two_factor_authentication_removal; end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: ::TwoFactorAuthenticationRemoval).void)).returns(::TwoFactorAuthenticationRemoval) }
  def build_two_factor_authentication_removal(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: ::TwoFactorAuthenticationRemoval).void)).returns(::TwoFactorAuthenticationRemoval) }
  def create_two_factor_authentication_removal(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: ::TwoFactorAuthenticationRemoval).void)).returns(::TwoFactorAuthenticationRemoval) }
  def create_two_factor_authentication_removal!(*args, &block); end

  sig { params(value: T.nilable(::TwoFactorAuthenticationRemoval)).void }
  def two_factor_authentication_removal=(value); end

  sig { returns(T.nilable(::TwoFactorAuthenticationRemoval)) }
  def reload_two_factor_authentication_removal; end

  sig { returns(::U2fRegistration::ActiveRecord_Associations_CollectionProxy) }
  def u2f_registrations; end

  sig { returns(T::Array[String]) }
  def u2f_registration_ids; end

  sig { params(value: T::Enumerable[::U2fRegistration]).void }
  def u2f_registrations=(value); end

  sig { returns(T.nilable(::UpholdConnection)) }
  def uphold_connection; end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: ::UpholdConnection).void)).returns(::UpholdConnection) }
  def build_uphold_connection(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: ::UpholdConnection).void)).returns(::UpholdConnection) }
  def create_uphold_connection(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: ::UpholdConnection).void)).returns(::UpholdConnection) }
  def create_uphold_connection!(*args, &block); end

  sig { params(value: T.nilable(::UpholdConnection)).void }
  def uphold_connection=(value); end

  sig { returns(T.nilable(::UpholdConnection)) }
  def reload_uphold_connection; end

  sig { returns(T.nilable(::UserAuthenticationToken)) }
  def user_authentication_token; end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: ::UserAuthenticationToken).void)).returns(::UserAuthenticationToken) }
  def build_user_authentication_token(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: ::UserAuthenticationToken).void)).returns(::UserAuthenticationToken) }
  def create_user_authentication_token(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: ::UserAuthenticationToken).void)).returns(::UserAuthenticationToken) }
  def create_user_authentication_token!(*args, &block); end

  sig { params(value: T.nilable(::UserAuthenticationToken)).void }
  def user_authentication_token=(value); end

  sig { returns(T.nilable(::UserAuthenticationToken)) }
  def reload_user_authentication_token; end

  sig { returns(::PaperTrail::Version::ActiveRecord_Associations_CollectionProxy) }
  def versions; end

  sig { returns(T::Array[String]) }
  def version_ids; end

  sig { params(value: T::Enumerable[::PaperTrail::Version]).void }
  def versions=(value); end

  sig { returns(::PublisherWhitelistUpdate::ActiveRecord_Associations_CollectionProxy) }
  def whitelist_updates; end

  sig { returns(T::Array[String]) }
  def whitelist_update_ids; end

  sig { params(value: T::Enumerable[::PublisherWhitelistUpdate]).void }
  def whitelist_updates=(value); end

  sig { returns(::YoutubeChannelDetails::ActiveRecord_Associations_CollectionProxy) }
  def youtube_channel_details; end

  sig { returns(T::Array[String]) }
  def youtube_channel_details_ids; end

  sig { params(value: T::Enumerable[::YoutubeChannelDetails]).void }
  def youtube_channel_details=(value); end
end

module Partner::CustomFinderMethods
  sig { params(limit: Integer).returns(T::Array[Partner]) }
  def first_n(limit); end

  sig { params(limit: Integer).returns(T::Array[Partner]) }
  def last_n(limit); end

  sig { params(args: T::Array[T.any(Integer, String)]).returns(T::Array[Partner]) }
  def find_n(*args); end

  sig { params(id: T.nilable(Integer)).returns(T.nilable(Partner)) }
  def find_by_id(id); end

  sig { params(id: Integer).returns(Partner) }
  def find_by_id!(id); end
end

class Partner < Publisher
  include Partner::GeneratedAttributeMethods
  include Partner::GeneratedAssociationMethods
  extend Partner::CustomFinderMethods
  extend Partner::QueryMethodsReturningRelation
  RelationType = T.type_alias { T.any(Partner::ActiveRecord_Relation, Partner::ActiveRecord_Associations_CollectionProxy, Partner::ActiveRecord_AssociationRelation) }

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_Relation) }
  def self.admin(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_Relation) }
  def self.bitflyer_selected_provider(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_Relation) }
  def self.by_email_case_insensitive(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_Relation) }
  def self.by_pending_email_case_insensitive(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_Relation) }
  def self.created(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_Relation) }
  def self.created_recently(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_Relation) }
  def self.daily_emails_for_promo_stats(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_Relation) }
  def self.deleted(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_Relation) }
  def self.email_verified(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_Relation) }
  def self.gemini_enabled(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_Relation) }
  def self.gemini_selected_provider(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_Relation) }
  def self.hold(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_Relation) }
  def self.in_top_referrer_program(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_Relation) }
  def self.invoice(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_Relation) }
  def self.locked(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_Relation) }
  def self.merchant(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_Relation) }
  def self.no_grants(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_Relation) }
  def self.not_admin(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_Relation) }
  def self.not_in_top_referrer_program(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_Relation) }
  def self.not_partner(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_Relation) }
  def self.not_suspended(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_Relation) }
  def self.onboarding(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_Relation) }
  def self.only_user_funds(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_Relation) }
  def self.partner(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_Relation) }
  def self.stripe_enabled(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_Relation) }
  def self.suspended(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_Relation) }
  def self.uphold_selected_provider(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_Relation) }
  def self.valid_payable_bitflyer_creators(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_Relation) }
  def self.valid_payable_gemini_creators(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_Relation) }
  def self.valid_payable_uphold_creators(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_Relation) }
  def self.wire_only(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_Relation) }
  def self.with_verified_channel(*args); end
end

class Partner::ActiveRecord_Relation < ActiveRecord::Relation
  include Partner::ActiveRelation_WhereNot
  include Partner::CustomFinderMethods
  include Partner::QueryMethodsReturningRelation
  Elem = type_member(fixed: Partner)

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_Relation) }
  def admin(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_Relation) }
  def bitflyer_selected_provider(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_Relation) }
  def by_email_case_insensitive(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_Relation) }
  def by_pending_email_case_insensitive(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_Relation) }
  def created(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_Relation) }
  def created_recently(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_Relation) }
  def daily_emails_for_promo_stats(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_Relation) }
  def deleted(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_Relation) }
  def email_verified(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_Relation) }
  def gemini_enabled(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_Relation) }
  def gemini_selected_provider(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_Relation) }
  def hold(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_Relation) }
  def in_top_referrer_program(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_Relation) }
  def invoice(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_Relation) }
  def locked(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_Relation) }
  def merchant(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_Relation) }
  def no_grants(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_Relation) }
  def not_admin(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_Relation) }
  def not_in_top_referrer_program(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_Relation) }
  def not_partner(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_Relation) }
  def not_suspended(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_Relation) }
  def onboarding(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_Relation) }
  def only_user_funds(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_Relation) }
  def partner(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_Relation) }
  def stripe_enabled(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_Relation) }
  def suspended(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_Relation) }
  def uphold_selected_provider(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_Relation) }
  def valid_payable_bitflyer_creators(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_Relation) }
  def valid_payable_gemini_creators(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_Relation) }
  def valid_payable_uphold_creators(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_Relation) }
  def wire_only(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_Relation) }
  def with_verified_channel(*args); end
end

class Partner::ActiveRecord_AssociationRelation < ActiveRecord::AssociationRelation
  include Partner::ActiveRelation_WhereNot
  include Partner::CustomFinderMethods
  include Partner::QueryMethodsReturningAssociationRelation
  Elem = type_member(fixed: Partner)

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_AssociationRelation) }
  def admin(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_AssociationRelation) }
  def bitflyer_selected_provider(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_AssociationRelation) }
  def by_email_case_insensitive(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_AssociationRelation) }
  def by_pending_email_case_insensitive(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_AssociationRelation) }
  def created(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_AssociationRelation) }
  def created_recently(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_AssociationRelation) }
  def daily_emails_for_promo_stats(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_AssociationRelation) }
  def deleted(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_AssociationRelation) }
  def email_verified(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_AssociationRelation) }
  def gemini_enabled(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_AssociationRelation) }
  def gemini_selected_provider(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_AssociationRelation) }
  def hold(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_AssociationRelation) }
  def in_top_referrer_program(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_AssociationRelation) }
  def invoice(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_AssociationRelation) }
  def locked(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_AssociationRelation) }
  def merchant(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_AssociationRelation) }
  def no_grants(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_AssociationRelation) }
  def not_admin(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_AssociationRelation) }
  def not_in_top_referrer_program(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_AssociationRelation) }
  def not_partner(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_AssociationRelation) }
  def not_suspended(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_AssociationRelation) }
  def onboarding(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_AssociationRelation) }
  def only_user_funds(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_AssociationRelation) }
  def partner(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_AssociationRelation) }
  def stripe_enabled(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_AssociationRelation) }
  def suspended(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_AssociationRelation) }
  def uphold_selected_provider(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_AssociationRelation) }
  def valid_payable_bitflyer_creators(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_AssociationRelation) }
  def valid_payable_gemini_creators(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_AssociationRelation) }
  def valid_payable_uphold_creators(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_AssociationRelation) }
  def wire_only(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_AssociationRelation) }
  def with_verified_channel(*args); end
end

class Partner::ActiveRecord_Associations_CollectionProxy < ActiveRecord::Associations::CollectionProxy
  include Partner::CustomFinderMethods
  include Partner::QueryMethodsReturningAssociationRelation
  Elem = type_member(fixed: Partner)

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_AssociationRelation) }
  def admin(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_AssociationRelation) }
  def bitflyer_selected_provider(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_AssociationRelation) }
  def by_email_case_insensitive(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_AssociationRelation) }
  def by_pending_email_case_insensitive(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_AssociationRelation) }
  def created(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_AssociationRelation) }
  def created_recently(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_AssociationRelation) }
  def daily_emails_for_promo_stats(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_AssociationRelation) }
  def deleted(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_AssociationRelation) }
  def email_verified(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_AssociationRelation) }
  def gemini_enabled(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_AssociationRelation) }
  def gemini_selected_provider(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_AssociationRelation) }
  def hold(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_AssociationRelation) }
  def in_top_referrer_program(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_AssociationRelation) }
  def invoice(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_AssociationRelation) }
  def locked(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_AssociationRelation) }
  def merchant(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_AssociationRelation) }
  def no_grants(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_AssociationRelation) }
  def not_admin(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_AssociationRelation) }
  def not_in_top_referrer_program(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_AssociationRelation) }
  def not_partner(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_AssociationRelation) }
  def not_suspended(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_AssociationRelation) }
  def onboarding(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_AssociationRelation) }
  def only_user_funds(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_AssociationRelation) }
  def partner(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_AssociationRelation) }
  def stripe_enabled(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_AssociationRelation) }
  def suspended(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_AssociationRelation) }
  def uphold_selected_provider(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_AssociationRelation) }
  def valid_payable_bitflyer_creators(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_AssociationRelation) }
  def valid_payable_gemini_creators(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_AssociationRelation) }
  def valid_payable_uphold_creators(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_AssociationRelation) }
  def wire_only(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_AssociationRelation) }
  def with_verified_channel(*args); end

  sig { params(records: T.any(Partner, T::Array[Partner])).returns(T.self_type) }
  def <<(*records); end

  sig { params(records: T.any(Partner, T::Array[Partner])).returns(T.self_type) }
  def append(*records); end

  sig { params(records: T.any(Partner, T::Array[Partner])).returns(T.self_type) }
  def push(*records); end

  sig { params(records: T.any(Partner, T::Array[Partner])).returns(T.self_type) }
  def concat(*records); end
end

module Partner::QueryMethodsReturningRelation
  sig { returns(Partner::ActiveRecord_Relation) }
  def all; end

  sig { params(block: T.nilable(T.proc.void)).returns(Partner::ActiveRecord_Relation) }
  def unscoped(&block); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_Relation) }
  def reselect(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_Relation) }
  def order(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_Relation) }
  def reorder(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_Relation) }
  def group(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_Relation) }
  def limit(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_Relation) }
  def offset(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_Relation) }
  def joins(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_Relation) }
  def left_joins(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_Relation) }
  def left_outer_joins(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_Relation) }
  def where(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_Relation) }
  def rewhere(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_Relation) }
  def preload(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_Relation) }
  def extract_associated(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_Relation) }
  def eager_load(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_Relation) }
  def includes(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_Relation) }
  def from(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_Relation) }
  def lock(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_Relation) }
  def readonly(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_Relation) }
  def or(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_Relation) }
  def having(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_Relation) }
  def create_with(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_Relation) }
  def distinct(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_Relation) }
  def references(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_Relation) }
  def none(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_Relation) }
  def unscope(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_Relation) }
  def optimizer_hints(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_Relation) }
  def merge(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_Relation) }
  def except(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_Relation) }
  def only(*args); end

  sig { params(block: T.proc.params(e: Partner).returns(T::Boolean)).returns(T::Array[Partner]) }
  def select(&block); end

  sig { params(args: T.any(String, Symbol, T::Array[T.any(String, Symbol)])).returns(Partner::ActiveRecord_Relation) }
  def select_columns(*args); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Partner::ActiveRecord_Relation) }
  def extending(*args, &block); end

  sig do
    params(
      of: T.nilable(Integer),
      start: T.nilable(Integer),
      finish: T.nilable(Integer),
      load: T.nilable(T::Boolean),
      error_on_ignore: T.nilable(T::Boolean),
      block: T.nilable(T.proc.params(e: Partner::ActiveRecord_Relation).void)
    ).returns(ActiveRecord::Batches::BatchEnumerator)
  end
  def in_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, &block); end
end

module Partner::QueryMethodsReturningAssociationRelation
  sig { returns(Partner::ActiveRecord_AssociationRelation) }
  def all; end

  sig { params(block: T.nilable(T.proc.void)).returns(Partner::ActiveRecord_Relation) }
  def unscoped(&block); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_AssociationRelation) }
  def reselect(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_AssociationRelation) }
  def order(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_AssociationRelation) }
  def reorder(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_AssociationRelation) }
  def group(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_AssociationRelation) }
  def limit(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_AssociationRelation) }
  def offset(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_AssociationRelation) }
  def joins(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_AssociationRelation) }
  def left_joins(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_AssociationRelation) }
  def left_outer_joins(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_AssociationRelation) }
  def where(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_AssociationRelation) }
  def rewhere(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_AssociationRelation) }
  def preload(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_AssociationRelation) }
  def extract_associated(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_AssociationRelation) }
  def eager_load(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_AssociationRelation) }
  def includes(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_AssociationRelation) }
  def from(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_AssociationRelation) }
  def lock(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_AssociationRelation) }
  def readonly(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_AssociationRelation) }
  def or(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_AssociationRelation) }
  def having(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_AssociationRelation) }
  def create_with(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_AssociationRelation) }
  def distinct(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_AssociationRelation) }
  def references(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_AssociationRelation) }
  def none(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_AssociationRelation) }
  def unscope(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_AssociationRelation) }
  def optimizer_hints(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_AssociationRelation) }
  def merge(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_AssociationRelation) }
  def except(*args); end

  sig { params(args: T.untyped).returns(Partner::ActiveRecord_AssociationRelation) }
  def only(*args); end

  sig { params(block: T.proc.params(e: Partner).returns(T::Boolean)).returns(T::Array[Partner]) }
  def select(&block); end

  sig { params(args: T.any(String, Symbol, T::Array[T.any(String, Symbol)])).returns(Partner::ActiveRecord_AssociationRelation) }
  def select_columns(*args); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Partner::ActiveRecord_AssociationRelation) }
  def extending(*args, &block); end

  sig do
    params(
      of: T.nilable(Integer),
      start: T.nilable(Integer),
      finish: T.nilable(Integer),
      load: T.nilable(T::Boolean),
      error_on_ignore: T.nilable(T::Boolean),
      block: T.nilable(T.proc.params(e: Partner::ActiveRecord_AssociationRelation).void)
    ).returns(ActiveRecord::Batches::BatchEnumerator)
  end
  def in_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, &block); end
end
