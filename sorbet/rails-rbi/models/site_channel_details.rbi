# This is an autogenerated file for dynamic methods in SiteChannelDetails
# Please rerun bundle exec rake rails_rbi:models[SiteChannelDetails] to regenerate.

# typed: strong
module SiteChannelDetails::ActiveRelation_WhereNot
  sig { params(opts: T.untyped, rest: T.untyped).returns(T.self_type) }
  def not(opts, *rest); end
end

module SiteChannelDetails::GeneratedAttributeMethods
  sig { returns(T.nilable(ActiveSupport::TimeWithZone)) }
  def ads_enabled_at; end

  sig { params(value: T.nilable(T.any(Date, Time, ActiveSupport::TimeWithZone))).void }
  def ads_enabled_at=(value); end

  sig { returns(T::Boolean) }
  def ads_enabled_at?; end

  sig { returns(T.nilable(String)) }
  def brave_publisher_id; end

  sig { params(value: T.nilable(T.any(String, Symbol))).void }
  def brave_publisher_id=(value); end

  sig { returns(T::Boolean) }
  def brave_publisher_id?; end

  sig { returns(T.nilable(String)) }
  def brave_publisher_id_error_code; end

  sig { params(value: T.nilable(T.any(String, Symbol))).void }
  def brave_publisher_id_error_code=(value); end

  sig { returns(T::Boolean) }
  def brave_publisher_id_error_code?; end

  sig { returns(T.nilable(String)) }
  def brave_publisher_id_unnormalized; end

  sig { params(value: T.nilable(T.any(String, Symbol))).void }
  def brave_publisher_id_unnormalized=(value); end

  sig { returns(T::Boolean) }
  def brave_publisher_id_unnormalized?; end

  sig { returns(ActiveSupport::TimeWithZone) }
  def created_at; end

  sig { params(value: T.any(Date, Time, ActiveSupport::TimeWithZone)).void }
  def created_at=(value); end

  sig { returns(T::Boolean) }
  def created_at?; end

  sig { returns(T.nilable(String)) }
  def detected_web_host; end

  sig { params(value: T.nilable(T.any(String, Symbol))).void }
  def detected_web_host=(value); end

  sig { returns(T::Boolean) }
  def detected_web_host?; end

  sig { returns(T.nilable(T::Boolean)) }
  def host_connection_verified; end

  sig { params(value: T.nilable(T::Boolean)).void }
  def host_connection_verified=(value); end

  sig { returns(T::Boolean) }
  def host_connection_verified?; end

  sig { returns(T.nilable(String)) }
  def https_error; end

  sig { params(value: T.nilable(T.any(String, Symbol))).void }
  def https_error=(value); end

  sig { returns(T::Boolean) }
  def https_error?; end

  sig { returns(String) }
  def id; end

  sig { params(value: T.any(String, Symbol)).void }
  def id=(value); end

  sig { returns(T::Boolean) }
  def id?; end

  sig { returns(T.any(T::Array[T.untyped], T::Boolean, Float, T::Hash[T.untyped, T.untyped], Integer, String)) }
  def stats; end

  sig { params(value: T.any(T::Array[T.untyped], T::Boolean, Float, T::Hash[T.untyped, T.untyped], Integer, String)).void }
  def stats=(value); end

  sig { returns(T::Boolean) }
  def stats?; end

  sig { returns(T.nilable(T::Boolean)) }
  def supports_https; end

  sig { params(value: T.nilable(T::Boolean)).void }
  def supports_https=(value); end

  sig { returns(T::Boolean) }
  def supports_https?; end

  sig { returns(ActiveSupport::TimeWithZone) }
  def updated_at; end

  sig { params(value: T.any(Date, Time, ActiveSupport::TimeWithZone)).void }
  def updated_at=(value); end

  sig { returns(T::Boolean) }
  def updated_at?; end

  sig { returns(T.nilable(String)) }
  def verification_method; end

  sig { params(value: T.nilable(T.any(String, Symbol))).void }
  def verification_method=(value); end

  sig { returns(T::Boolean) }
  def verification_method?; end

  sig { returns(T.nilable(String)) }
  def verification_token; end

  sig { params(value: T.nilable(T.any(String, Symbol))).void }
  def verification_token=(value); end

  sig { returns(T::Boolean) }
  def verification_token?; end
end

module SiteChannelDetails::GeneratedAssociationMethods
  sig { returns(T.nilable(::Channel)) }
  def channel; end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: ::Channel).void)).returns(::Channel) }
  def build_channel(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: ::Channel).void)).returns(::Channel) }
  def create_channel(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: ::Channel).void)).returns(::Channel) }
  def create_channel!(*args, &block); end

  sig { params(value: T.nilable(::Channel)).void }
  def channel=(value); end

  sig { returns(T.nilable(::Channel)) }
  def reload_channel; end
end

module SiteChannelDetails::CustomFinderMethods
  sig { params(limit: Integer).returns(T::Array[SiteChannelDetails]) }
  def first_n(limit); end

  sig { params(limit: Integer).returns(T::Array[SiteChannelDetails]) }
  def last_n(limit); end

  sig { params(args: T::Array[T.any(Integer, String)]).returns(T::Array[SiteChannelDetails]) }
  def find_n(*args); end

  sig { params(id: T.nilable(Integer)).returns(T.nilable(SiteChannelDetails)) }
  def find_by_id(id); end

  sig { params(id: Integer).returns(SiteChannelDetails) }
  def find_by_id!(id); end
end

class SiteChannelDetails < BaseChannelDetails
  include SiteChannelDetails::GeneratedAttributeMethods
  include SiteChannelDetails::GeneratedAssociationMethods
  extend SiteChannelDetails::CustomFinderMethods
  extend SiteChannelDetails::QueryMethodsReturningRelation
  RelationType = T.type_alias { T.any(SiteChannelDetails::ActiveRecord_Relation, SiteChannelDetails::ActiveRecord_Associations_CollectionProxy, SiteChannelDetails::ActiveRecord_AssociationRelation) }

  sig { params(args: T.untyped).returns(SiteChannelDetails::ActiveRecord_Relation) }
  def self.recent_ready_to_verify_site_channels(*args); end

  sig { params(args: T.untyped).returns(SiteChannelDetails::ActiveRecord_Relation) }
  def self.recent_unverified_site_channels(*args); end
end

class SiteChannelDetails::ActiveRecord_Relation < ActiveRecord::Relation
  include SiteChannelDetails::ActiveRelation_WhereNot
  include SiteChannelDetails::CustomFinderMethods
  include SiteChannelDetails::QueryMethodsReturningRelation
  Elem = type_member(fixed: SiteChannelDetails)

  sig { params(args: T.untyped).returns(SiteChannelDetails::ActiveRecord_Relation) }
  def recent_ready_to_verify_site_channels(*args); end

  sig { params(args: T.untyped).returns(SiteChannelDetails::ActiveRecord_Relation) }
  def recent_unverified_site_channels(*args); end
end

class SiteChannelDetails::ActiveRecord_AssociationRelation < ActiveRecord::AssociationRelation
  include SiteChannelDetails::ActiveRelation_WhereNot
  include SiteChannelDetails::CustomFinderMethods
  include SiteChannelDetails::QueryMethodsReturningAssociationRelation
  Elem = type_member(fixed: SiteChannelDetails)

  sig { params(args: T.untyped).returns(SiteChannelDetails::ActiveRecord_AssociationRelation) }
  def recent_ready_to_verify_site_channels(*args); end

  sig { params(args: T.untyped).returns(SiteChannelDetails::ActiveRecord_AssociationRelation) }
  def recent_unverified_site_channels(*args); end
end

class SiteChannelDetails::ActiveRecord_Associations_CollectionProxy < ActiveRecord::Associations::CollectionProxy
  include SiteChannelDetails::CustomFinderMethods
  include SiteChannelDetails::QueryMethodsReturningAssociationRelation
  Elem = type_member(fixed: SiteChannelDetails)

  sig { params(args: T.untyped).returns(SiteChannelDetails::ActiveRecord_AssociationRelation) }
  def recent_ready_to_verify_site_channels(*args); end

  sig { params(args: T.untyped).returns(SiteChannelDetails::ActiveRecord_AssociationRelation) }
  def recent_unverified_site_channels(*args); end

  sig { params(records: T.any(SiteChannelDetails, T::Array[SiteChannelDetails])).returns(T.self_type) }
  def <<(*records); end

  sig { params(records: T.any(SiteChannelDetails, T::Array[SiteChannelDetails])).returns(T.self_type) }
  def append(*records); end

  sig { params(records: T.any(SiteChannelDetails, T::Array[SiteChannelDetails])).returns(T.self_type) }
  def push(*records); end

  sig { params(records: T.any(SiteChannelDetails, T::Array[SiteChannelDetails])).returns(T.self_type) }
  def concat(*records); end
end

module SiteChannelDetails::QueryMethodsReturningRelation
  sig { returns(SiteChannelDetails::ActiveRecord_Relation) }
  def all; end

  sig { params(block: T.nilable(T.proc.void)).returns(SiteChannelDetails::ActiveRecord_Relation) }
  def unscoped(&block); end

  sig { params(args: T.untyped).returns(SiteChannelDetails::ActiveRecord_Relation) }
  def reselect(*args); end

  sig { params(args: T.untyped).returns(SiteChannelDetails::ActiveRecord_Relation) }
  def order(*args); end

  sig { params(args: T.untyped).returns(SiteChannelDetails::ActiveRecord_Relation) }
  def reorder(*args); end

  sig { params(args: T.untyped).returns(SiteChannelDetails::ActiveRecord_Relation) }
  def group(*args); end

  sig { params(args: T.untyped).returns(SiteChannelDetails::ActiveRecord_Relation) }
  def limit(*args); end

  sig { params(args: T.untyped).returns(SiteChannelDetails::ActiveRecord_Relation) }
  def offset(*args); end

  sig { params(args: T.untyped).returns(SiteChannelDetails::ActiveRecord_Relation) }
  def joins(*args); end

  sig { params(args: T.untyped).returns(SiteChannelDetails::ActiveRecord_Relation) }
  def left_joins(*args); end

  sig { params(args: T.untyped).returns(SiteChannelDetails::ActiveRecord_Relation) }
  def left_outer_joins(*args); end

  sig { params(args: T.untyped).returns(SiteChannelDetails::ActiveRecord_Relation) }
  def where(*args); end

  sig { params(args: T.untyped).returns(SiteChannelDetails::ActiveRecord_Relation) }
  def rewhere(*args); end

  sig { params(args: T.untyped).returns(SiteChannelDetails::ActiveRecord_Relation) }
  def preload(*args); end

  sig { params(args: T.untyped).returns(SiteChannelDetails::ActiveRecord_Relation) }
  def extract_associated(*args); end

  sig { params(args: T.untyped).returns(SiteChannelDetails::ActiveRecord_Relation) }
  def eager_load(*args); end

  sig { params(args: T.untyped).returns(SiteChannelDetails::ActiveRecord_Relation) }
  def includes(*args); end

  sig { params(args: T.untyped).returns(SiteChannelDetails::ActiveRecord_Relation) }
  def from(*args); end

  sig { params(args: T.untyped).returns(SiteChannelDetails::ActiveRecord_Relation) }
  def lock(*args); end

  sig { params(args: T.untyped).returns(SiteChannelDetails::ActiveRecord_Relation) }
  def readonly(*args); end

  sig { params(args: T.untyped).returns(SiteChannelDetails::ActiveRecord_Relation) }
  def or(*args); end

  sig { params(args: T.untyped).returns(SiteChannelDetails::ActiveRecord_Relation) }
  def having(*args); end

  sig { params(args: T.untyped).returns(SiteChannelDetails::ActiveRecord_Relation) }
  def create_with(*args); end

  sig { params(args: T.untyped).returns(SiteChannelDetails::ActiveRecord_Relation) }
  def distinct(*args); end

  sig { params(args: T.untyped).returns(SiteChannelDetails::ActiveRecord_Relation) }
  def references(*args); end

  sig { params(args: T.untyped).returns(SiteChannelDetails::ActiveRecord_Relation) }
  def none(*args); end

  sig { params(args: T.untyped).returns(SiteChannelDetails::ActiveRecord_Relation) }
  def unscope(*args); end

  sig { params(args: T.untyped).returns(SiteChannelDetails::ActiveRecord_Relation) }
  def optimizer_hints(*args); end

  sig { params(args: T.untyped).returns(SiteChannelDetails::ActiveRecord_Relation) }
  def merge(*args); end

  sig { params(args: T.untyped).returns(SiteChannelDetails::ActiveRecord_Relation) }
  def except(*args); end

  sig { params(args: T.untyped).returns(SiteChannelDetails::ActiveRecord_Relation) }
  def only(*args); end

  sig { params(block: T.proc.params(e: SiteChannelDetails).returns(T::Boolean)).returns(T::Array[SiteChannelDetails]) }
  def select(&block); end

  sig { params(args: T.any(String, Symbol, T::Array[T.any(String, Symbol)])).returns(SiteChannelDetails::ActiveRecord_Relation) }
  def select_columns(*args); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(SiteChannelDetails::ActiveRecord_Relation) }
  def extending(*args, &block); end

  sig do
    params(
      of: T.nilable(Integer),
      start: T.nilable(Integer),
      finish: T.nilable(Integer),
      load: T.nilable(T::Boolean),
      error_on_ignore: T.nilable(T::Boolean),
      block: T.nilable(T.proc.params(e: SiteChannelDetails::ActiveRecord_Relation).void)
    ).returns(ActiveRecord::Batches::BatchEnumerator)
  end
  def in_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, &block); end
end

module SiteChannelDetails::QueryMethodsReturningAssociationRelation
  sig { returns(SiteChannelDetails::ActiveRecord_AssociationRelation) }
  def all; end

  sig { params(block: T.nilable(T.proc.void)).returns(SiteChannelDetails::ActiveRecord_Relation) }
  def unscoped(&block); end

  sig { params(args: T.untyped).returns(SiteChannelDetails::ActiveRecord_AssociationRelation) }
  def reselect(*args); end

  sig { params(args: T.untyped).returns(SiteChannelDetails::ActiveRecord_AssociationRelation) }
  def order(*args); end

  sig { params(args: T.untyped).returns(SiteChannelDetails::ActiveRecord_AssociationRelation) }
  def reorder(*args); end

  sig { params(args: T.untyped).returns(SiteChannelDetails::ActiveRecord_AssociationRelation) }
  def group(*args); end

  sig { params(args: T.untyped).returns(SiteChannelDetails::ActiveRecord_AssociationRelation) }
  def limit(*args); end

  sig { params(args: T.untyped).returns(SiteChannelDetails::ActiveRecord_AssociationRelation) }
  def offset(*args); end

  sig { params(args: T.untyped).returns(SiteChannelDetails::ActiveRecord_AssociationRelation) }
  def joins(*args); end

  sig { params(args: T.untyped).returns(SiteChannelDetails::ActiveRecord_AssociationRelation) }
  def left_joins(*args); end

  sig { params(args: T.untyped).returns(SiteChannelDetails::ActiveRecord_AssociationRelation) }
  def left_outer_joins(*args); end

  sig { params(args: T.untyped).returns(SiteChannelDetails::ActiveRecord_AssociationRelation) }
  def where(*args); end

  sig { params(args: T.untyped).returns(SiteChannelDetails::ActiveRecord_AssociationRelation) }
  def rewhere(*args); end

  sig { params(args: T.untyped).returns(SiteChannelDetails::ActiveRecord_AssociationRelation) }
  def preload(*args); end

  sig { params(args: T.untyped).returns(SiteChannelDetails::ActiveRecord_AssociationRelation) }
  def extract_associated(*args); end

  sig { params(args: T.untyped).returns(SiteChannelDetails::ActiveRecord_AssociationRelation) }
  def eager_load(*args); end

  sig { params(args: T.untyped).returns(SiteChannelDetails::ActiveRecord_AssociationRelation) }
  def includes(*args); end

  sig { params(args: T.untyped).returns(SiteChannelDetails::ActiveRecord_AssociationRelation) }
  def from(*args); end

  sig { params(args: T.untyped).returns(SiteChannelDetails::ActiveRecord_AssociationRelation) }
  def lock(*args); end

  sig { params(args: T.untyped).returns(SiteChannelDetails::ActiveRecord_AssociationRelation) }
  def readonly(*args); end

  sig { params(args: T.untyped).returns(SiteChannelDetails::ActiveRecord_AssociationRelation) }
  def or(*args); end

  sig { params(args: T.untyped).returns(SiteChannelDetails::ActiveRecord_AssociationRelation) }
  def having(*args); end

  sig { params(args: T.untyped).returns(SiteChannelDetails::ActiveRecord_AssociationRelation) }
  def create_with(*args); end

  sig { params(args: T.untyped).returns(SiteChannelDetails::ActiveRecord_AssociationRelation) }
  def distinct(*args); end

  sig { params(args: T.untyped).returns(SiteChannelDetails::ActiveRecord_AssociationRelation) }
  def references(*args); end

  sig { params(args: T.untyped).returns(SiteChannelDetails::ActiveRecord_AssociationRelation) }
  def none(*args); end

  sig { params(args: T.untyped).returns(SiteChannelDetails::ActiveRecord_AssociationRelation) }
  def unscope(*args); end

  sig { params(args: T.untyped).returns(SiteChannelDetails::ActiveRecord_AssociationRelation) }
  def optimizer_hints(*args); end

  sig { params(args: T.untyped).returns(SiteChannelDetails::ActiveRecord_AssociationRelation) }
  def merge(*args); end

  sig { params(args: T.untyped).returns(SiteChannelDetails::ActiveRecord_AssociationRelation) }
  def except(*args); end

  sig { params(args: T.untyped).returns(SiteChannelDetails::ActiveRecord_AssociationRelation) }
  def only(*args); end

  sig { params(block: T.proc.params(e: SiteChannelDetails).returns(T::Boolean)).returns(T::Array[SiteChannelDetails]) }
  def select(&block); end

  sig { params(args: T.any(String, Symbol, T::Array[T.any(String, Symbol)])).returns(SiteChannelDetails::ActiveRecord_AssociationRelation) }
  def select_columns(*args); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(SiteChannelDetails::ActiveRecord_AssociationRelation) }
  def extending(*args, &block); end

  sig do
    params(
      of: T.nilable(Integer),
      start: T.nilable(Integer),
      finish: T.nilable(Integer),
      load: T.nilable(T::Boolean),
      error_on_ignore: T.nilable(T::Boolean),
      block: T.nilable(T.proc.params(e: SiteChannelDetails::ActiveRecord_AssociationRelation).void)
    ).returns(ActiveRecord::Batches::BatchEnumerator)
  end
  def in_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, &block); end
end
