# This is an autogenerated file for dynamic methods in Case
# Please rerun bundle exec rake rails_rbi:models[Case] to regenerate.

# typed: ignore
module Case::ActiveRelation_WhereNot
  sig { params(opts: T.untyped, rest: T.untyped).returns(T.self_type) }
  def not(opts, *rest); end
end

module Case::GeneratedAttributeMethods
  sig { returns(T.nilable(String)) }
  def accident_question; end

  sig { params(value: T.nilable(T.any(String, Symbol))).void }
  def accident_question=(value); end

  sig { returns(T::Boolean) }
  def accident_question?; end

  sig { returns(T.nilable(String)) }
  def assignee_id; end

  sig { params(value: T.nilable(T.any(String, Symbol))).void }
  def assignee_id=(value); end

  sig { returns(T::Boolean) }
  def assignee_id?; end

  sig { returns(Integer) }
  def case_number; end

  sig { params(value: T.any(Numeric, ActiveSupport::Duration)).void }
  def case_number=(value); end

  sig { returns(T::Boolean) }
  def case_number?; end

  sig { returns(ActiveSupport::TimeWithZone) }
  def created_at; end

  sig { params(value: T.any(Date, Time, ActiveSupport::TimeWithZone)).void }
  def created_at=(value); end

  sig { returns(T::Boolean) }
  def created_at?; end

  sig { returns(String) }
  def id; end

  sig { params(value: T.any(String, Symbol)).void }
  def id=(value); end

  sig { returns(T::Boolean) }
  def id?; end

  sig { returns(T.nilable(ActiveSupport::TimeWithZone)) }
  def open_at; end

  sig { params(value: T.nilable(T.any(Date, Time, ActiveSupport::TimeWithZone))).void }
  def open_at=(value); end

  sig { returns(T::Boolean) }
  def open_at?; end

  sig { returns(T.nilable(String)) }
  def publisher_id; end

  sig { params(value: T.nilable(T.any(String, Symbol))).void }
  def publisher_id=(value); end

  sig { returns(T::Boolean) }
  def publisher_id?; end

  sig { returns(T.nilable(String)) }
  def solicit_question; end

  sig { params(value: T.nilable(T.any(String, Symbol))).void }
  def solicit_question=(value); end

  sig { returns(T::Boolean) }
  def solicit_question?; end

  sig { returns(String) }
  def status; end

  sig { params(value: T.any(String, Symbol)).void }
  def status=(value); end

  sig { returns(T::Boolean) }
  def status?; end

  sig { returns(ActiveSupport::TimeWithZone) }
  def updated_at; end

  sig { params(value: T.any(Date, Time, ActiveSupport::TimeWithZone)).void }
  def updated_at=(value); end

  sig { returns(T::Boolean) }
  def updated_at?; end
end

module Case::CustomFinderMethods
  sig { params(limit: Integer).returns(T::Array[Case]) }
  def first_n(limit); end

  sig { params(limit: Integer).returns(T::Array[Case]) }
  def last_n(limit); end

  sig { params(args: T::Array[T.any(Integer, String)]).returns(T::Array[Case]) }
  def find_n(*args); end

  sig { params(id: T.nilable(Integer)).returns(T.nilable(Case)) }
  def find_by_id(id); end

  sig { params(id: Integer).returns(Case) }
  def find_by_id!(id); end
end

class Case < ApplicationRecord
  include Case::GeneratedAttributeMethods
  include Case::GeneratedAssociationMethods
  extend Case::CustomFinderMethods
  extend Case::QueryMethodsReturningRelation
  RelationType = T.type_alias { T.any(Case::ActiveRecord_Relation, Case::ActiveRecord_Associations_CollectionProxy, Case::ActiveRecord_AssociationRelation) }

  sig { params(args: T.untyped).returns(Case::ActiveRecord_Relation) }
  def self.with_attached_files(*args); end
end

class Case::ActiveRecord_Relation < ActiveRecord::Relation
  include Case::ActiveRelation_WhereNot
  include Case::CustomFinderMethods
  include Case::QueryMethodsReturningRelation
  Elem = type_member(fixed: Case)

  sig { params(args: T.untyped).returns(Case::ActiveRecord_Relation) }
  def with_attached_files(*args); end
end

class Case::ActiveRecord_AssociationRelation < ActiveRecord::AssociationRelation
  include Case::ActiveRelation_WhereNot
  include Case::CustomFinderMethods
  include Case::QueryMethodsReturningAssociationRelation
  Elem = type_member(fixed: Case)

  sig { params(args: T.untyped).returns(Case::ActiveRecord_AssociationRelation) }
  def with_attached_files(*args); end
end

class Case::ActiveRecord_Associations_CollectionProxy < ActiveRecord::Associations::CollectionProxy
  include Case::CustomFinderMethods
  include Case::QueryMethodsReturningAssociationRelation
  Elem = type_member(fixed: Case)

  sig { params(args: T.untyped).returns(Case::ActiveRecord_AssociationRelation) }
  def with_attached_files(*args); end

  sig { params(records: T.any(Case, T::Array[Case])).returns(T.self_type) }
  def <<(*records); end

  sig { params(records: T.any(Case, T::Array[Case])).returns(T.self_type) }
  def append(*records); end

  sig { params(records: T.any(Case, T::Array[Case])).returns(T.self_type) }
  def push(*records); end

  sig { params(records: T.any(Case, T::Array[Case])).returns(T.self_type) }
  def concat(*records); end
end

module Case::QueryMethodsReturningRelation
  sig { returns(Case::ActiveRecord_Relation) }
  def all; end

  sig { params(block: T.nilable(T.proc.void)).returns(Case::ActiveRecord_Relation) }
  def unscoped(&block); end

  sig { params(args: T.untyped).returns(Case::ActiveRecord_Relation) }
  def reselect(*args); end

  sig { params(args: T.untyped).returns(Case::ActiveRecord_Relation) }
  def order(*args); end

  sig { params(args: T.untyped).returns(Case::ActiveRecord_Relation) }
  def reorder(*args); end

  sig { params(args: T.untyped).returns(Case::ActiveRecord_Relation) }
  def group(*args); end

  sig { params(args: T.untyped).returns(Case::ActiveRecord_Relation) }
  def limit(*args); end

  sig { params(args: T.untyped).returns(Case::ActiveRecord_Relation) }
  def offset(*args); end

  sig { params(args: T.untyped).returns(Case::ActiveRecord_Relation) }
  def joins(*args); end

  sig { params(args: T.untyped).returns(Case::ActiveRecord_Relation) }
  def left_joins(*args); end

  sig { params(args: T.untyped).returns(Case::ActiveRecord_Relation) }
  def left_outer_joins(*args); end

  sig { params(args: T.untyped).returns(Case::ActiveRecord_Relation) }
  def where(*args); end

  sig { params(args: T.untyped).returns(Case::ActiveRecord_Relation) }
  def rewhere(*args); end

  sig { params(args: T.untyped).returns(Case::ActiveRecord_Relation) }
  def preload(*args); end

  sig { params(args: T.untyped).returns(Case::ActiveRecord_Relation) }
  def extract_associated(*args); end

  sig { params(args: T.untyped).returns(Case::ActiveRecord_Relation) }
  def eager_load(*args); end

  sig { params(args: T.untyped).returns(Case::ActiveRecord_Relation) }
  def includes(*args); end

  sig { params(args: T.untyped).returns(Case::ActiveRecord_Relation) }
  def from(*args); end

  sig { params(args: T.untyped).returns(Case::ActiveRecord_Relation) }
  def lock(*args); end

  sig { params(args: T.untyped).returns(Case::ActiveRecord_Relation) }
  def readonly(*args); end

  sig { params(args: T.untyped).returns(Case::ActiveRecord_Relation) }
  def or(*args); end

  sig { params(args: T.untyped).returns(Case::ActiveRecord_Relation) }
  def having(*args); end

  sig { params(args: T.untyped).returns(Case::ActiveRecord_Relation) }
  def create_with(*args); end

  sig { params(args: T.untyped).returns(Case::ActiveRecord_Relation) }
  def distinct(*args); end

  sig { params(args: T.untyped).returns(Case::ActiveRecord_Relation) }
  def references(*args); end

  sig { params(args: T.untyped).returns(Case::ActiveRecord_Relation) }
  def none(*args); end

  sig { params(args: T.untyped).returns(Case::ActiveRecord_Relation) }
  def unscope(*args); end

  sig { params(args: T.untyped).returns(Case::ActiveRecord_Relation) }
  def optimizer_hints(*args); end

  sig { params(args: T.untyped).returns(Case::ActiveRecord_Relation) }
  def merge(*args); end

  sig { params(args: T.untyped).returns(Case::ActiveRecord_Relation) }
  def except(*args); end

  sig { params(args: T.untyped).returns(Case::ActiveRecord_Relation) }
  def only(*args); end

  sig { params(block: T.proc.params(e: Case).returns(T::Boolean)).returns(T::Array[Case]) }
  def select(&block); end

  sig { params(args: T.any(String, Symbol, T::Array[T.any(String, Symbol)])).returns(Case::ActiveRecord_Relation) }
  def select_columns(*args); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Case::ActiveRecord_Relation) }
  def extending(*args, &block); end

  sig do
    params(
      of: T.nilable(Integer),
      start: T.nilable(Integer),
      finish: T.nilable(Integer),
      load: T.nilable(T::Boolean),
      error_on_ignore: T.nilable(T::Boolean),
      block: T.nilable(T.proc.params(e: Case::ActiveRecord_Relation).void)
    ).returns(ActiveRecord::Batches::BatchEnumerator)
  end
  def in_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, &block); end
end

module Case::QueryMethodsReturningAssociationRelation
  sig { returns(Case::ActiveRecord_AssociationRelation) }
  def all; end

  sig { params(block: T.nilable(T.proc.void)).returns(Case::ActiveRecord_Relation) }
  def unscoped(&block); end

  sig { params(args: T.untyped).returns(Case::ActiveRecord_AssociationRelation) }
  def reselect(*args); end

  sig { params(args: T.untyped).returns(Case::ActiveRecord_AssociationRelation) }
  def order(*args); end

  sig { params(args: T.untyped).returns(Case::ActiveRecord_AssociationRelation) }
  def reorder(*args); end

  sig { params(args: T.untyped).returns(Case::ActiveRecord_AssociationRelation) }
  def group(*args); end

  sig { params(args: T.untyped).returns(Case::ActiveRecord_AssociationRelation) }
  def limit(*args); end

  sig { params(args: T.untyped).returns(Case::ActiveRecord_AssociationRelation) }
  def offset(*args); end

  sig { params(args: T.untyped).returns(Case::ActiveRecord_AssociationRelation) }
  def joins(*args); end

  sig { params(args: T.untyped).returns(Case::ActiveRecord_AssociationRelation) }
  def left_joins(*args); end

  sig { params(args: T.untyped).returns(Case::ActiveRecord_AssociationRelation) }
  def left_outer_joins(*args); end

  sig { params(args: T.untyped).returns(Case::ActiveRecord_AssociationRelation) }
  def where(*args); end

  sig { params(args: T.untyped).returns(Case::ActiveRecord_AssociationRelation) }
  def rewhere(*args); end

  sig { params(args: T.untyped).returns(Case::ActiveRecord_AssociationRelation) }
  def preload(*args); end

  sig { params(args: T.untyped).returns(Case::ActiveRecord_AssociationRelation) }
  def extract_associated(*args); end

  sig { params(args: T.untyped).returns(Case::ActiveRecord_AssociationRelation) }
  def eager_load(*args); end

  sig { params(args: T.untyped).returns(Case::ActiveRecord_AssociationRelation) }
  def includes(*args); end

  sig { params(args: T.untyped).returns(Case::ActiveRecord_AssociationRelation) }
  def from(*args); end

  sig { params(args: T.untyped).returns(Case::ActiveRecord_AssociationRelation) }
  def lock(*args); end

  sig { params(args: T.untyped).returns(Case::ActiveRecord_AssociationRelation) }
  def readonly(*args); end

  sig { params(args: T.untyped).returns(Case::ActiveRecord_AssociationRelation) }
  def or(*args); end

  sig { params(args: T.untyped).returns(Case::ActiveRecord_AssociationRelation) }
  def having(*args); end

  sig { params(args: T.untyped).returns(Case::ActiveRecord_AssociationRelation) }
  def create_with(*args); end

  sig { params(args: T.untyped).returns(Case::ActiveRecord_AssociationRelation) }
  def distinct(*args); end

  sig { params(args: T.untyped).returns(Case::ActiveRecord_AssociationRelation) }
  def references(*args); end

  sig { params(args: T.untyped).returns(Case::ActiveRecord_AssociationRelation) }
  def none(*args); end

  sig { params(args: T.untyped).returns(Case::ActiveRecord_AssociationRelation) }
  def unscope(*args); end

  sig { params(args: T.untyped).returns(Case::ActiveRecord_AssociationRelation) }
  def optimizer_hints(*args); end

  sig { params(args: T.untyped).returns(Case::ActiveRecord_AssociationRelation) }
  def merge(*args); end

  sig { params(args: T.untyped).returns(Case::ActiveRecord_AssociationRelation) }
  def except(*args); end

  sig { params(args: T.untyped).returns(Case::ActiveRecord_AssociationRelation) }
  def only(*args); end

  sig { params(block: T.proc.params(e: Case).returns(T::Boolean)).returns(T::Array[Case]) }
  def select(&block); end

  sig { params(args: T.any(String, Symbol, T::Array[T.any(String, Symbol)])).returns(Case::ActiveRecord_AssociationRelation) }
  def select_columns(*args); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Case::ActiveRecord_AssociationRelation) }
  def extending(*args, &block); end

  sig do
    params(
      of: T.nilable(Integer),
      start: T.nilable(Integer),
      finish: T.nilable(Integer),
      load: T.nilable(T::Boolean),
      error_on_ignore: T.nilable(T::Boolean),
      block: T.nilable(T.proc.params(e: Case::ActiveRecord_AssociationRelation).void)
    ).returns(ActiveRecord::Batches::BatchEnumerator)
  end
  def in_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, &block); end
end

module Case::GeneratedAssociationMethods
  sig { returns(T.nilable(::Publisher)) }
  def assignee; end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: ::Publisher).void)).returns(::Publisher) }
  def build_assignee(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: ::Publisher).void)).returns(::Publisher) }
  def create_assignee(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: ::Publisher).void)).returns(::Publisher) }
  def create_assignee!(*args, &block); end

  sig { params(value: T.nilable(::Publisher)).void }
  def assignee=(value); end

  sig { returns(T.nilable(::Publisher)) }
  def reload_assignee; end

  sig { returns(::CaseNote::ActiveRecord_Associations_CollectionProxy) }
  def case_notes; end

  sig { returns(T::Array[String]) }
  def case_note_ids; end

  sig { params(value: T::Enumerable[::CaseNote]).void }
  def case_notes=(value); end

  sig { returns(::ActiveStorage::Attachment::ActiveRecord_Associations_CollectionProxy) }
  def files_attachments; end

  sig { returns(T::Array[Integer]) }
  def files_attachment_ids; end

  sig { params(value: T::Enumerable[::ActiveStorage::Attachment]).void }
  def files_attachments=(value); end

  sig { returns(::ActiveStorage::Blob::ActiveRecord_Associations_CollectionProxy) }
  def files_blobs; end

  sig { returns(T::Array[Integer]) }
  def files_blob_ids; end

  sig { params(value: T::Enumerable[::ActiveStorage::Blob]).void }
  def files_blobs=(value); end

  sig { returns(T.nilable(::Publisher)) }
  def publisher; end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: ::Publisher).void)).returns(::Publisher) }
  def build_publisher(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: ::Publisher).void)).returns(::Publisher) }
  def create_publisher(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: ::Publisher).void)).returns(::Publisher) }
  def create_publisher!(*args, &block); end

  sig { params(value: T.nilable(::Publisher)).void }
  def publisher=(value); end

  sig { returns(T.nilable(::Publisher)) }
  def reload_publisher; end

  sig { returns(::PaperTrail::Version::ActiveRecord_Associations_CollectionProxy) }
  def versions; end

  sig { returns(T::Array[String]) }
  def version_ids; end

  sig { params(value: T::Enumerable[::PaperTrail::Version]).void }
  def versions=(value); end

  sig { returns(T.nilable(ActiveStorage::Attached::Many)) }
  def files; end

  sig { params(attachables: T.untyped).returns(T.untyped) }
  def files=(attachables); end
end
