# This is an autogenerated file for dynamic methods in PotentialPayment
# Please rerun bundle exec rake rails_rbi:models[PotentialPayment] to regenerate.

# typed: ignore
module PotentialPayment::EnumInstanceMethods
  sig { returns(T::Boolean) }
  def uphold?; end

  sig { void }
  def uphold!; end

  sig { returns(T::Boolean) }
  def paypal?; end

  sig { void }
  def paypal!; end

  sig { returns(T::Boolean) }
  def gemini?; end

  sig { void }
  def gemini!; end

  sig { returns(T::Boolean) }
  def bitflyer?; end

  sig { void }
  def bitflyer!; end
end

module PotentialPayment::ActiveRelation_WhereNot
  sig { params(opts: T.untyped, rest: T.untyped).returns(T.self_type) }
  def not(opts, *rest); end
end

module PotentialPayment::GeneratedAttributeMethods
  sig { returns(String) }
  def address; end

  sig { params(value: T.any(String, Symbol)).void }
  def address=(value); end

  sig { returns(T::Boolean) }
  def address?; end

  sig { returns(String) }
  def amount; end

  sig { params(value: T.any(String, Symbol)).void }
  def amount=(value); end

  sig { returns(T::Boolean) }
  def amount?; end

  sig { returns(T.nilable(String)) }
  def channel_id; end

  sig { params(value: T.nilable(T.any(String, Symbol))).void }
  def channel_id=(value); end

  sig { returns(T::Boolean) }
  def channel_id?; end

  sig { returns(T.nilable(T.any(T::Array[T.untyped], T::Boolean, Float, T::Hash[T.untyped, T.untyped], Integer, String))) }
  def channel_stats; end

  sig { params(value: T.nilable(T.any(T::Array[T.untyped], T::Boolean, Float, T::Hash[T.untyped, T.untyped], Integer, String))).void }
  def channel_stats=(value); end

  sig { returns(T::Boolean) }
  def channel_stats?; end

  sig { returns(T.nilable(String)) }
  def channel_type; end

  sig { params(value: T.nilable(T.any(String, Symbol))).void }
  def channel_type=(value); end

  sig { returns(T::Boolean) }
  def channel_type?; end

  sig { returns(ActiveSupport::TimeWithZone) }
  def created_at; end

  sig { params(value: T.any(Date, Time, ActiveSupport::TimeWithZone)).void }
  def created_at=(value); end

  sig { returns(T::Boolean) }
  def created_at?; end

  sig { returns(String) }
  def fees; end

  sig { params(value: T.any(String, Symbol)).void }
  def fees=(value); end

  sig { returns(T::Boolean) }
  def fees?; end

  sig { returns(T.nilable(String)) }
  def finalized_by_id; end

  sig { params(value: T.nilable(T.any(String, Symbol))).void }
  def finalized_by_id=(value); end

  sig { returns(T::Boolean) }
  def finalized_by_id?; end

  sig { returns(T.nilable(T::Boolean)) }
  def gemini_is_verified; end

  sig { params(value: T.nilable(T::Boolean)).void }
  def gemini_is_verified=(value); end

  sig { returns(T::Boolean) }
  def gemini_is_verified?; end

  sig { returns(String) }
  def id; end

  sig { params(value: T.any(String, Symbol)).void }
  def id=(value); end

  sig { returns(T::Boolean) }
  def id?; end

  sig { returns(T.nilable(String)) }
  def invoice_id; end

  sig { params(value: T.nilable(T.any(String, Symbol))).void }
  def invoice_id=(value); end

  sig { returns(T::Boolean) }
  def invoice_id?; end

  sig { returns(String) }
  def kind; end

  sig { params(value: T.any(String, Symbol)).void }
  def kind=(value); end

  sig { returns(T::Boolean) }
  def kind?; end

  sig { returns(String) }
  def name; end

  sig { params(value: T.any(String, Symbol)).void }
  def name=(value); end

  sig { returns(T::Boolean) }
  def name?; end

  sig { returns(String) }
  def payout_report_id; end

  sig { params(value: T.any(String, Symbol)).void }
  def payout_report_id=(value); end

  sig { returns(T::Boolean) }
  def payout_report_id?; end

  sig { returns(T::Boolean) }
  def paypal_bank_account_attached; end

  sig { params(value: T::Boolean).void }
  def paypal_bank_account_attached=(value); end

  sig { returns(T::Boolean) }
  def paypal_bank_account_attached?; end

  sig { returns(String) }
  def publisher_id; end

  sig { params(value: T.any(String, Symbol)).void }
  def publisher_id=(value); end

  sig { returns(T::Boolean) }
  def publisher_id?; end

  sig { returns(T.nilable(T::Boolean)) }
  def reauthorization_needed; end

  sig { params(value: T.nilable(T::Boolean)).void }
  def reauthorization_needed=(value); end

  sig { returns(T::Boolean) }
  def reauthorization_needed?; end

  sig { returns(T.nilable(String)) }
  def status; end

  sig { params(value: T.nilable(T.any(String, Symbol))).void }
  def status=(value); end

  sig { returns(T::Boolean) }
  def status?; end

  sig { returns(T.nilable(T::Boolean)) }
  def suspended; end

  sig { params(value: T.nilable(T::Boolean)).void }
  def suspended=(value); end

  sig { returns(T::Boolean) }
  def suspended?; end

  sig { returns(ActiveSupport::TimeWithZone) }
  def updated_at; end

  sig { params(value: T.any(Date, Time, ActiveSupport::TimeWithZone)).void }
  def updated_at=(value); end

  sig { returns(T::Boolean) }
  def updated_at?; end

  sig { returns(T.nilable(String)) }
  def uphold_id; end

  sig { params(value: T.nilable(T.any(String, Symbol))).void }
  def uphold_id=(value); end

  sig { returns(T::Boolean) }
  def uphold_id?; end

  sig { returns(T.nilable(T::Boolean)) }
  def uphold_member; end

  sig { params(value: T.nilable(T::Boolean)).void }
  def uphold_member=(value); end

  sig { returns(T::Boolean) }
  def uphold_member?; end

  sig { returns(T.nilable(String)) }
  def uphold_status; end

  sig { params(value: T.nilable(T.any(String, Symbol))).void }
  def uphold_status=(value); end

  sig { returns(T::Boolean) }
  def uphold_status?; end

  sig { returns(T.nilable(String)) }
  def url; end

  sig { params(value: T.nilable(T.any(String, Symbol))).void }
  def url=(value); end

  sig { returns(T::Boolean) }
  def url?; end

  sig { returns(T.nilable(String)) }
  def wallet_provider; end

  sig { params(value: T.nilable(T.any(Integer, String, Symbol))).void }
  def wallet_provider=(value); end

  sig { returns(T::Boolean) }
  def wallet_provider?; end

  sig { returns(T.nilable(String)) }
  def wallet_provider_id; end

  sig { params(value: T.nilable(T.any(String, Symbol))).void }
  def wallet_provider_id=(value); end

  sig { returns(T::Boolean) }
  def wallet_provider_id?; end
end

module PotentialPayment::GeneratedAssociationMethods
  sig { returns(T.nilable(::Channel)) }
  def channel; end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: ::Channel).void)).returns(::Channel) }
  def build_channel(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: ::Channel).void)).returns(::Channel) }
  def create_channel(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: ::Channel).void)).returns(::Channel) }
  def create_channel!(*args, &block); end

  sig { params(value: T.nilable(::Channel)).void }
  def channel=(value); end

  sig { returns(T.nilable(::Channel)) }
  def reload_channel; end

  sig { returns(::PayoutReport) }
  def payout_report; end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: ::PayoutReport).void)).returns(::PayoutReport) }
  def build_payout_report(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: ::PayoutReport).void)).returns(::PayoutReport) }
  def create_payout_report(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: ::PayoutReport).void)).returns(::PayoutReport) }
  def create_payout_report!(*args, &block); end

  sig { params(value: ::PayoutReport).void }
  def payout_report=(value); end

  sig { returns(::PayoutReport) }
  def reload_payout_report; end

  sig { returns(::Publisher) }
  def publisher; end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: ::Publisher).void)).returns(::Publisher) }
  def build_publisher(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: ::Publisher).void)).returns(::Publisher) }
  def create_publisher(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: ::Publisher).void)).returns(::Publisher) }
  def create_publisher!(*args, &block); end

  sig { params(value: ::Publisher).void }
  def publisher=(value); end

  sig { returns(::Publisher) }
  def reload_publisher; end
end

module PotentialPayment::CustomFinderMethods
  sig { params(limit: Integer).returns(T::Array[PotentialPayment]) }
  def first_n(limit); end

  sig { params(limit: Integer).returns(T::Array[PotentialPayment]) }
  def last_n(limit); end

  sig { params(args: T::Array[T.any(Integer, String)]).returns(T::Array[PotentialPayment]) }
  def find_n(*args); end

  sig { params(id: T.nilable(Integer)).returns(T.nilable(PotentialPayment)) }
  def find_by_id(id); end

  sig { params(id: Integer).returns(PotentialPayment) }
  def find_by_id!(id); end
end

class PotentialPayment < ApplicationRecord
  include PotentialPayment::EnumInstanceMethods
  include PotentialPayment::GeneratedAttributeMethods
  include PotentialPayment::GeneratedAssociationMethods
  extend PotentialPayment::CustomFinderMethods
  extend PotentialPayment::QueryMethodsReturningRelation
  RelationType = T.type_alias { T.any(PotentialPayment::ActiveRecord_Relation, PotentialPayment::ActiveRecord_Associations_CollectionProxy, PotentialPayment::ActiveRecord_AssociationRelation) }

  sig { returns(T::Hash[T.any(String, Symbol), Integer]) }
  def self.wallet_providers; end

  sig { params(args: T.untyped).returns(PotentialPayment::ActiveRecord_Relation) }
  def self.bitflyer(*args); end

  sig { params(args: T.untyped).returns(PotentialPayment::ActiveRecord_Relation) }
  def self.gemini(*args); end

  sig { params(args: T.untyped).returns(PotentialPayment::ActiveRecord_Relation) }
  def self.gemini_kyc(*args); end

  sig { params(args: T.untyped).returns(PotentialPayment::ActiveRecord_Relation) }
  def self.not_bitflyer(*args); end

  sig { params(args: T.untyped).returns(PotentialPayment::ActiveRecord_Relation) }
  def self.not_gemini(*args); end

  sig { params(args: T.untyped).returns(PotentialPayment::ActiveRecord_Relation) }
  def self.not_paypal(*args); end

  sig { params(args: T.untyped).returns(PotentialPayment::ActiveRecord_Relation) }
  def self.not_uphold(*args); end

  sig { params(args: T.untyped).returns(PotentialPayment::ActiveRecord_Relation) }
  def self.paypal(*args); end

  sig { params(args: T.untyped).returns(PotentialPayment::ActiveRecord_Relation) }
  def self.to_be_paid(*args); end

  sig { params(args: T.untyped).returns(PotentialPayment::ActiveRecord_Relation) }
  def self.uphold(*args); end

  sig { params(args: T.untyped).returns(PotentialPayment::ActiveRecord_Relation) }
  def self.uphold_kyc(*args); end

  sig { returns(T.nilable(PotentialPayment::WalletProvider)) }
  def typed_wallet_provider; end

  sig { params(value: T.nilable(PotentialPayment::WalletProvider)).void }
  def typed_wallet_provider=(value); end

  class WalletProvider < T::Enum
    enums do
      Uphold = new(%q{uphold})
      Paypal = new(%q{paypal})
      Gemini = new(%q{gemini})
      Bitflyer = new(%q{bitflyer})
    end

  end
end

class PotentialPayment::ActiveRecord_Relation < ActiveRecord::Relation
  include PotentialPayment::ActiveRelation_WhereNot
  include PotentialPayment::CustomFinderMethods
  include PotentialPayment::QueryMethodsReturningRelation
  Elem = type_member(fixed: PotentialPayment)

  sig { params(args: T.untyped).returns(PotentialPayment::ActiveRecord_Relation) }
  def bitflyer(*args); end

  sig { params(args: T.untyped).returns(PotentialPayment::ActiveRecord_Relation) }
  def gemini(*args); end

  sig { params(args: T.untyped).returns(PotentialPayment::ActiveRecord_Relation) }
  def gemini_kyc(*args); end

  sig { params(args: T.untyped).returns(PotentialPayment::ActiveRecord_Relation) }
  def not_bitflyer(*args); end

  sig { params(args: T.untyped).returns(PotentialPayment::ActiveRecord_Relation) }
  def not_gemini(*args); end

  sig { params(args: T.untyped).returns(PotentialPayment::ActiveRecord_Relation) }
  def not_paypal(*args); end

  sig { params(args: T.untyped).returns(PotentialPayment::ActiveRecord_Relation) }
  def not_uphold(*args); end

  sig { params(args: T.untyped).returns(PotentialPayment::ActiveRecord_Relation) }
  def paypal(*args); end

  sig { params(args: T.untyped).returns(PotentialPayment::ActiveRecord_Relation) }
  def to_be_paid(*args); end

  sig { params(args: T.untyped).returns(PotentialPayment::ActiveRecord_Relation) }
  def uphold(*args); end

  sig { params(args: T.untyped).returns(PotentialPayment::ActiveRecord_Relation) }
  def uphold_kyc(*args); end
end

class PotentialPayment::ActiveRecord_AssociationRelation < ActiveRecord::AssociationRelation
  include PotentialPayment::ActiveRelation_WhereNot
  include PotentialPayment::CustomFinderMethods
  include PotentialPayment::QueryMethodsReturningAssociationRelation
  Elem = type_member(fixed: PotentialPayment)

  sig { params(args: T.untyped).returns(PotentialPayment::ActiveRecord_AssociationRelation) }
  def bitflyer(*args); end

  sig { params(args: T.untyped).returns(PotentialPayment::ActiveRecord_AssociationRelation) }
  def gemini(*args); end

  sig { params(args: T.untyped).returns(PotentialPayment::ActiveRecord_AssociationRelation) }
  def gemini_kyc(*args); end

  sig { params(args: T.untyped).returns(PotentialPayment::ActiveRecord_AssociationRelation) }
  def not_bitflyer(*args); end

  sig { params(args: T.untyped).returns(PotentialPayment::ActiveRecord_AssociationRelation) }
  def not_gemini(*args); end

  sig { params(args: T.untyped).returns(PotentialPayment::ActiveRecord_AssociationRelation) }
  def not_paypal(*args); end

  sig { params(args: T.untyped).returns(PotentialPayment::ActiveRecord_AssociationRelation) }
  def not_uphold(*args); end

  sig { params(args: T.untyped).returns(PotentialPayment::ActiveRecord_AssociationRelation) }
  def paypal(*args); end

  sig { params(args: T.untyped).returns(PotentialPayment::ActiveRecord_AssociationRelation) }
  def to_be_paid(*args); end

  sig { params(args: T.untyped).returns(PotentialPayment::ActiveRecord_AssociationRelation) }
  def uphold(*args); end

  sig { params(args: T.untyped).returns(PotentialPayment::ActiveRecord_AssociationRelation) }
  def uphold_kyc(*args); end
end

class PotentialPayment::ActiveRecord_Associations_CollectionProxy < ActiveRecord::Associations::CollectionProxy
  include PotentialPayment::CustomFinderMethods
  include PotentialPayment::QueryMethodsReturningAssociationRelation
  Elem = type_member(fixed: PotentialPayment)

  sig { params(args: T.untyped).returns(PotentialPayment::ActiveRecord_AssociationRelation) }
  def bitflyer(*args); end

  sig { params(args: T.untyped).returns(PotentialPayment::ActiveRecord_AssociationRelation) }
  def gemini(*args); end

  sig { params(args: T.untyped).returns(PotentialPayment::ActiveRecord_AssociationRelation) }
  def gemini_kyc(*args); end

  sig { params(args: T.untyped).returns(PotentialPayment::ActiveRecord_AssociationRelation) }
  def not_bitflyer(*args); end

  sig { params(args: T.untyped).returns(PotentialPayment::ActiveRecord_AssociationRelation) }
  def not_gemini(*args); end

  sig { params(args: T.untyped).returns(PotentialPayment::ActiveRecord_AssociationRelation) }
  def not_paypal(*args); end

  sig { params(args: T.untyped).returns(PotentialPayment::ActiveRecord_AssociationRelation) }
  def not_uphold(*args); end

  sig { params(args: T.untyped).returns(PotentialPayment::ActiveRecord_AssociationRelation) }
  def paypal(*args); end

  sig { params(args: T.untyped).returns(PotentialPayment::ActiveRecord_AssociationRelation) }
  def to_be_paid(*args); end

  sig { params(args: T.untyped).returns(PotentialPayment::ActiveRecord_AssociationRelation) }
  def uphold(*args); end

  sig { params(args: T.untyped).returns(PotentialPayment::ActiveRecord_AssociationRelation) }
  def uphold_kyc(*args); end

  sig { params(records: T.any(PotentialPayment, T::Array[PotentialPayment])).returns(T.self_type) }
  def <<(*records); end

  sig { params(records: T.any(PotentialPayment, T::Array[PotentialPayment])).returns(T.self_type) }
  def append(*records); end

  sig { params(records: T.any(PotentialPayment, T::Array[PotentialPayment])).returns(T.self_type) }
  def push(*records); end

  sig { params(records: T.any(PotentialPayment, T::Array[PotentialPayment])).returns(T.self_type) }
  def concat(*records); end
end

module PotentialPayment::QueryMethodsReturningRelation
  sig { returns(PotentialPayment::ActiveRecord_Relation) }
  def all; end

  sig { params(block: T.nilable(T.proc.void)).returns(PotentialPayment::ActiveRecord_Relation) }
  def unscoped(&block); end

  sig { params(args: T.untyped).returns(PotentialPayment::ActiveRecord_Relation) }
  def reselect(*args); end

  sig { params(args: T.untyped).returns(PotentialPayment::ActiveRecord_Relation) }
  def order(*args); end

  sig { params(args: T.untyped).returns(PotentialPayment::ActiveRecord_Relation) }
  def reorder(*args); end

  sig { params(args: T.untyped).returns(PotentialPayment::ActiveRecord_Relation) }
  def group(*args); end

  sig { params(args: T.untyped).returns(PotentialPayment::ActiveRecord_Relation) }
  def limit(*args); end

  sig { params(args: T.untyped).returns(PotentialPayment::ActiveRecord_Relation) }
  def offset(*args); end

  sig { params(args: T.untyped).returns(PotentialPayment::ActiveRecord_Relation) }
  def joins(*args); end

  sig { params(args: T.untyped).returns(PotentialPayment::ActiveRecord_Relation) }
  def left_joins(*args); end

  sig { params(args: T.untyped).returns(PotentialPayment::ActiveRecord_Relation) }
  def left_outer_joins(*args); end

  sig { params(args: T.untyped).returns(PotentialPayment::ActiveRecord_Relation) }
  def where(*args); end

  sig { params(args: T.untyped).returns(PotentialPayment::ActiveRecord_Relation) }
  def rewhere(*args); end

  sig { params(args: T.untyped).returns(PotentialPayment::ActiveRecord_Relation) }
  def preload(*args); end

  sig { params(args: T.untyped).returns(PotentialPayment::ActiveRecord_Relation) }
  def extract_associated(*args); end

  sig { params(args: T.untyped).returns(PotentialPayment::ActiveRecord_Relation) }
  def eager_load(*args); end

  sig { params(args: T.untyped).returns(PotentialPayment::ActiveRecord_Relation) }
  def includes(*args); end

  sig { params(args: T.untyped).returns(PotentialPayment::ActiveRecord_Relation) }
  def from(*args); end

  sig { params(args: T.untyped).returns(PotentialPayment::ActiveRecord_Relation) }
  def lock(*args); end

  sig { params(args: T.untyped).returns(PotentialPayment::ActiveRecord_Relation) }
  def readonly(*args); end

  sig { params(args: T.untyped).returns(PotentialPayment::ActiveRecord_Relation) }
  def or(*args); end

  sig { params(args: T.untyped).returns(PotentialPayment::ActiveRecord_Relation) }
  def having(*args); end

  sig { params(args: T.untyped).returns(PotentialPayment::ActiveRecord_Relation) }
  def create_with(*args); end

  sig { params(args: T.untyped).returns(PotentialPayment::ActiveRecord_Relation) }
  def distinct(*args); end

  sig { params(args: T.untyped).returns(PotentialPayment::ActiveRecord_Relation) }
  def references(*args); end

  sig { params(args: T.untyped).returns(PotentialPayment::ActiveRecord_Relation) }
  def none(*args); end

  sig { params(args: T.untyped).returns(PotentialPayment::ActiveRecord_Relation) }
  def unscope(*args); end

  sig { params(args: T.untyped).returns(PotentialPayment::ActiveRecord_Relation) }
  def optimizer_hints(*args); end

  sig { params(args: T.untyped).returns(PotentialPayment::ActiveRecord_Relation) }
  def merge(*args); end

  sig { params(args: T.untyped).returns(PotentialPayment::ActiveRecord_Relation) }
  def except(*args); end

  sig { params(args: T.untyped).returns(PotentialPayment::ActiveRecord_Relation) }
  def only(*args); end

  sig { params(block: T.proc.params(e: PotentialPayment).returns(T::Boolean)).returns(T::Array[PotentialPayment]) }
  def select(&block); end

  sig { params(args: T.any(String, Symbol, T::Array[T.any(String, Symbol)])).returns(PotentialPayment::ActiveRecord_Relation) }
  def select_columns(*args); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(PotentialPayment::ActiveRecord_Relation) }
  def extending(*args, &block); end

  sig do
    params(
      of: T.nilable(Integer),
      start: T.nilable(Integer),
      finish: T.nilable(Integer),
      load: T.nilable(T::Boolean),
      error_on_ignore: T.nilable(T::Boolean),
      block: T.nilable(T.proc.params(e: PotentialPayment::ActiveRecord_Relation).void)
    ).returns(ActiveRecord::Batches::BatchEnumerator)
  end
  def in_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, &block); end
end

module PotentialPayment::QueryMethodsReturningAssociationRelation
  sig { returns(PotentialPayment::ActiveRecord_AssociationRelation) }
  def all; end

  sig { params(block: T.nilable(T.proc.void)).returns(PotentialPayment::ActiveRecord_Relation) }
  def unscoped(&block); end

  sig { params(args: T.untyped).returns(PotentialPayment::ActiveRecord_AssociationRelation) }
  def reselect(*args); end

  sig { params(args: T.untyped).returns(PotentialPayment::ActiveRecord_AssociationRelation) }
  def order(*args); end

  sig { params(args: T.untyped).returns(PotentialPayment::ActiveRecord_AssociationRelation) }
  def reorder(*args); end

  sig { params(args: T.untyped).returns(PotentialPayment::ActiveRecord_AssociationRelation) }
  def group(*args); end

  sig { params(args: T.untyped).returns(PotentialPayment::ActiveRecord_AssociationRelation) }
  def limit(*args); end

  sig { params(args: T.untyped).returns(PotentialPayment::ActiveRecord_AssociationRelation) }
  def offset(*args); end

  sig { params(args: T.untyped).returns(PotentialPayment::ActiveRecord_AssociationRelation) }
  def joins(*args); end

  sig { params(args: T.untyped).returns(PotentialPayment::ActiveRecord_AssociationRelation) }
  def left_joins(*args); end

  sig { params(args: T.untyped).returns(PotentialPayment::ActiveRecord_AssociationRelation) }
  def left_outer_joins(*args); end

  sig { params(args: T.untyped).returns(PotentialPayment::ActiveRecord_AssociationRelation) }
  def where(*args); end

  sig { params(args: T.untyped).returns(PotentialPayment::ActiveRecord_AssociationRelation) }
  def rewhere(*args); end

  sig { params(args: T.untyped).returns(PotentialPayment::ActiveRecord_AssociationRelation) }
  def preload(*args); end

  sig { params(args: T.untyped).returns(PotentialPayment::ActiveRecord_AssociationRelation) }
  def extract_associated(*args); end

  sig { params(args: T.untyped).returns(PotentialPayment::ActiveRecord_AssociationRelation) }
  def eager_load(*args); end

  sig { params(args: T.untyped).returns(PotentialPayment::ActiveRecord_AssociationRelation) }
  def includes(*args); end

  sig { params(args: T.untyped).returns(PotentialPayment::ActiveRecord_AssociationRelation) }
  def from(*args); end

  sig { params(args: T.untyped).returns(PotentialPayment::ActiveRecord_AssociationRelation) }
  def lock(*args); end

  sig { params(args: T.untyped).returns(PotentialPayment::ActiveRecord_AssociationRelation) }
  def readonly(*args); end

  sig { params(args: T.untyped).returns(PotentialPayment::ActiveRecord_AssociationRelation) }
  def or(*args); end

  sig { params(args: T.untyped).returns(PotentialPayment::ActiveRecord_AssociationRelation) }
  def having(*args); end

  sig { params(args: T.untyped).returns(PotentialPayment::ActiveRecord_AssociationRelation) }
  def create_with(*args); end

  sig { params(args: T.untyped).returns(PotentialPayment::ActiveRecord_AssociationRelation) }
  def distinct(*args); end

  sig { params(args: T.untyped).returns(PotentialPayment::ActiveRecord_AssociationRelation) }
  def references(*args); end

  sig { params(args: T.untyped).returns(PotentialPayment::ActiveRecord_AssociationRelation) }
  def none(*args); end

  sig { params(args: T.untyped).returns(PotentialPayment::ActiveRecord_AssociationRelation) }
  def unscope(*args); end

  sig { params(args: T.untyped).returns(PotentialPayment::ActiveRecord_AssociationRelation) }
  def optimizer_hints(*args); end

  sig { params(args: T.untyped).returns(PotentialPayment::ActiveRecord_AssociationRelation) }
  def merge(*args); end

  sig { params(args: T.untyped).returns(PotentialPayment::ActiveRecord_AssociationRelation) }
  def except(*args); end

  sig { params(args: T.untyped).returns(PotentialPayment::ActiveRecord_AssociationRelation) }
  def only(*args); end

  sig { params(block: T.proc.params(e: PotentialPayment).returns(T::Boolean)).returns(T::Array[PotentialPayment]) }
  def select(&block); end

  sig { params(args: T.any(String, Symbol, T::Array[T.any(String, Symbol)])).returns(PotentialPayment::ActiveRecord_AssociationRelation) }
  def select_columns(*args); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(PotentialPayment::ActiveRecord_AssociationRelation) }
  def extending(*args, &block); end

  sig do
    params(
      of: T.nilable(Integer),
      start: T.nilable(Integer),
      finish: T.nilable(Integer),
      load: T.nilable(T::Boolean),
      error_on_ignore: T.nilable(T::Boolean),
      block: T.nilable(T.proc.params(e: PotentialPayment::ActiveRecord_AssociationRelation).void)
    ).returns(ActiveRecord::Batches::BatchEnumerator)
  end
  def in_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, &block); end
end
