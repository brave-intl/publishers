# This is an autogenerated file for dynamic methods in CaseNote
# Please rerun bundle exec rake rails_rbi:models[CaseNote] to regenerate.

# typed: strong
module CaseNote::ActiveRelation_WhereNot
  sig { params(opts: T.untyped, rest: T.untyped).returns(T.self_type) }
  def not(opts, *rest); end
end

module CaseNote::GeneratedAttributeMethods
  sig { returns(String) }
  def case_id; end

  sig { params(value: T.any(String, Symbol)).void }
  def case_id=(value); end

  sig { returns(T::Boolean) }
  def case_id?; end

  sig { returns(ActiveSupport::TimeWithZone) }
  def created_at; end

  sig { params(value: T.any(Date, Time, ActiveSupport::TimeWithZone)).void }
  def created_at=(value); end

  sig { returns(T::Boolean) }
  def created_at?; end

  sig { returns(T.nilable(String)) }
  def created_by_id; end

  sig { params(value: T.nilable(T.any(String, Symbol))).void }
  def created_by_id=(value); end

  sig { returns(T::Boolean) }
  def created_by_id?; end

  sig { returns(String) }
  def id; end

  sig { params(value: T.any(String, Symbol)).void }
  def id=(value); end

  sig { returns(T::Boolean) }
  def id?; end

  sig { returns(String) }
  def note; end

  sig { params(value: T.any(String, Symbol)).void }
  def note=(value); end

  sig { returns(T::Boolean) }
  def note?; end

  sig { returns(T::Boolean) }
  def public; end

  sig { params(value: T::Boolean).void }
  def public=(value); end

  sig { returns(T::Boolean) }
  def public?; end

  sig { returns(ActiveSupport::TimeWithZone) }
  def updated_at; end

  sig { params(value: T.any(Date, Time, ActiveSupport::TimeWithZone)).void }
  def updated_at=(value); end

  sig { returns(T::Boolean) }
  def updated_at?; end
end

module CaseNote::CustomFinderMethods
  sig { params(limit: Integer).returns(T::Array[CaseNote]) }
  def first_n(limit); end

  sig { params(limit: Integer).returns(T::Array[CaseNote]) }
  def last_n(limit); end

  sig { params(args: T::Array[T.any(Integer, String)]).returns(T::Array[CaseNote]) }
  def find_n(*args); end

  sig { params(id: T.nilable(Integer)).returns(T.nilable(CaseNote)) }
  def find_by_id(id); end

  sig { params(id: Integer).returns(CaseNote) }
  def find_by_id!(id); end
end

class CaseNote < ApplicationRecord
  include CaseNote::GeneratedAttributeMethods
  include CaseNote::GeneratedAssociationMethods
  extend CaseNote::CustomFinderMethods
  extend CaseNote::QueryMethodsReturningRelation
  RelationType = T.type_alias { T.any(CaseNote::ActiveRecord_Relation, CaseNote::ActiveRecord_Associations_CollectionProxy, CaseNote::ActiveRecord_AssociationRelation) }

  sig { params(args: T.untyped).returns(CaseNote::ActiveRecord_Relation) }
  def self.with_attached_files(*args); end
end

class CaseNote::ActiveRecord_Relation < ActiveRecord::Relation
  include CaseNote::ActiveRelation_WhereNot
  include CaseNote::CustomFinderMethods
  include CaseNote::QueryMethodsReturningRelation
  Elem = type_member(fixed: CaseNote)

  sig { params(args: T.untyped).returns(CaseNote::ActiveRecord_Relation) }
  def with_attached_files(*args); end
end

class CaseNote::ActiveRecord_AssociationRelation < ActiveRecord::AssociationRelation
  include CaseNote::ActiveRelation_WhereNot
  include CaseNote::CustomFinderMethods
  include CaseNote::QueryMethodsReturningAssociationRelation
  Elem = type_member(fixed: CaseNote)

  sig { params(args: T.untyped).returns(CaseNote::ActiveRecord_AssociationRelation) }
  def with_attached_files(*args); end
end

class CaseNote::ActiveRecord_Associations_CollectionProxy < ActiveRecord::Associations::CollectionProxy
  include CaseNote::CustomFinderMethods
  include CaseNote::QueryMethodsReturningAssociationRelation
  Elem = type_member(fixed: CaseNote)

  sig { params(args: T.untyped).returns(CaseNote::ActiveRecord_AssociationRelation) }
  def with_attached_files(*args); end

  sig { params(records: T.any(CaseNote, T::Array[CaseNote])).returns(T.self_type) }
  def <<(*records); end

  sig { params(records: T.any(CaseNote, T::Array[CaseNote])).returns(T.self_type) }
  def append(*records); end

  sig { params(records: T.any(CaseNote, T::Array[CaseNote])).returns(T.self_type) }
  def push(*records); end

  sig { params(records: T.any(CaseNote, T::Array[CaseNote])).returns(T.self_type) }
  def concat(*records); end
end

module CaseNote::QueryMethodsReturningRelation
  sig { returns(CaseNote::ActiveRecord_Relation) }
  def all; end

  sig { params(block: T.nilable(T.proc.void)).returns(CaseNote::ActiveRecord_Relation) }
  def unscoped(&block); end

  sig { params(args: T.untyped).returns(CaseNote::ActiveRecord_Relation) }
  def reselect(*args); end

  sig { params(args: T.untyped).returns(CaseNote::ActiveRecord_Relation) }
  def order(*args); end

  sig { params(args: T.untyped).returns(CaseNote::ActiveRecord_Relation) }
  def reorder(*args); end

  sig { params(args: T.untyped).returns(CaseNote::ActiveRecord_Relation) }
  def group(*args); end

  sig { params(args: T.untyped).returns(CaseNote::ActiveRecord_Relation) }
  def limit(*args); end

  sig { params(args: T.untyped).returns(CaseNote::ActiveRecord_Relation) }
  def offset(*args); end

  sig { params(args: T.untyped).returns(CaseNote::ActiveRecord_Relation) }
  def joins(*args); end

  sig { params(args: T.untyped).returns(CaseNote::ActiveRecord_Relation) }
  def left_joins(*args); end

  sig { params(args: T.untyped).returns(CaseNote::ActiveRecord_Relation) }
  def left_outer_joins(*args); end

  sig { params(args: T.untyped).returns(CaseNote::ActiveRecord_Relation) }
  def where(*args); end

  sig { params(args: T.untyped).returns(CaseNote::ActiveRecord_Relation) }
  def rewhere(*args); end

  sig { params(args: T.untyped).returns(CaseNote::ActiveRecord_Relation) }
  def preload(*args); end

  sig { params(args: T.untyped).returns(CaseNote::ActiveRecord_Relation) }
  def extract_associated(*args); end

  sig { params(args: T.untyped).returns(CaseNote::ActiveRecord_Relation) }
  def eager_load(*args); end

  sig { params(args: T.untyped).returns(CaseNote::ActiveRecord_Relation) }
  def includes(*args); end

  sig { params(args: T.untyped).returns(CaseNote::ActiveRecord_Relation) }
  def from(*args); end

  sig { params(args: T.untyped).returns(CaseNote::ActiveRecord_Relation) }
  def lock(*args); end

  sig { params(args: T.untyped).returns(CaseNote::ActiveRecord_Relation) }
  def readonly(*args); end

  sig { params(args: T.untyped).returns(CaseNote::ActiveRecord_Relation) }
  def or(*args); end

  sig { params(args: T.untyped).returns(CaseNote::ActiveRecord_Relation) }
  def having(*args); end

  sig { params(args: T.untyped).returns(CaseNote::ActiveRecord_Relation) }
  def create_with(*args); end

  sig { params(args: T.untyped).returns(CaseNote::ActiveRecord_Relation) }
  def distinct(*args); end

  sig { params(args: T.untyped).returns(CaseNote::ActiveRecord_Relation) }
  def references(*args); end

  sig { params(args: T.untyped).returns(CaseNote::ActiveRecord_Relation) }
  def none(*args); end

  sig { params(args: T.untyped).returns(CaseNote::ActiveRecord_Relation) }
  def unscope(*args); end

  sig { params(args: T.untyped).returns(CaseNote::ActiveRecord_Relation) }
  def optimizer_hints(*args); end

  sig { params(args: T.untyped).returns(CaseNote::ActiveRecord_Relation) }
  def merge(*args); end

  sig { params(args: T.untyped).returns(CaseNote::ActiveRecord_Relation) }
  def except(*args); end

  sig { params(args: T.untyped).returns(CaseNote::ActiveRecord_Relation) }
  def only(*args); end

  sig { params(block: T.proc.params(e: CaseNote).returns(T::Boolean)).returns(T::Array[CaseNote]) }
  def select(&block); end

  sig { params(args: T.any(String, Symbol, T::Array[T.any(String, Symbol)])).returns(CaseNote::ActiveRecord_Relation) }
  def select_columns(*args); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(CaseNote::ActiveRecord_Relation) }
  def extending(*args, &block); end

  sig do
    params(
      of: T.nilable(Integer),
      start: T.nilable(Integer),
      finish: T.nilable(Integer),
      load: T.nilable(T::Boolean),
      error_on_ignore: T.nilable(T::Boolean),
      block: T.nilable(T.proc.params(e: CaseNote::ActiveRecord_Relation).void)
    ).returns(ActiveRecord::Batches::BatchEnumerator)
  end
  def in_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, &block); end
end

module CaseNote::QueryMethodsReturningAssociationRelation
  sig { returns(CaseNote::ActiveRecord_AssociationRelation) }
  def all; end

  sig { params(block: T.nilable(T.proc.void)).returns(CaseNote::ActiveRecord_Relation) }
  def unscoped(&block); end

  sig { params(args: T.untyped).returns(CaseNote::ActiveRecord_AssociationRelation) }
  def reselect(*args); end

  sig { params(args: T.untyped).returns(CaseNote::ActiveRecord_AssociationRelation) }
  def order(*args); end

  sig { params(args: T.untyped).returns(CaseNote::ActiveRecord_AssociationRelation) }
  def reorder(*args); end

  sig { params(args: T.untyped).returns(CaseNote::ActiveRecord_AssociationRelation) }
  def group(*args); end

  sig { params(args: T.untyped).returns(CaseNote::ActiveRecord_AssociationRelation) }
  def limit(*args); end

  sig { params(args: T.untyped).returns(CaseNote::ActiveRecord_AssociationRelation) }
  def offset(*args); end

  sig { params(args: T.untyped).returns(CaseNote::ActiveRecord_AssociationRelation) }
  def joins(*args); end

  sig { params(args: T.untyped).returns(CaseNote::ActiveRecord_AssociationRelation) }
  def left_joins(*args); end

  sig { params(args: T.untyped).returns(CaseNote::ActiveRecord_AssociationRelation) }
  def left_outer_joins(*args); end

  sig { params(args: T.untyped).returns(CaseNote::ActiveRecord_AssociationRelation) }
  def where(*args); end

  sig { params(args: T.untyped).returns(CaseNote::ActiveRecord_AssociationRelation) }
  def rewhere(*args); end

  sig { params(args: T.untyped).returns(CaseNote::ActiveRecord_AssociationRelation) }
  def preload(*args); end

  sig { params(args: T.untyped).returns(CaseNote::ActiveRecord_AssociationRelation) }
  def extract_associated(*args); end

  sig { params(args: T.untyped).returns(CaseNote::ActiveRecord_AssociationRelation) }
  def eager_load(*args); end

  sig { params(args: T.untyped).returns(CaseNote::ActiveRecord_AssociationRelation) }
  def includes(*args); end

  sig { params(args: T.untyped).returns(CaseNote::ActiveRecord_AssociationRelation) }
  def from(*args); end

  sig { params(args: T.untyped).returns(CaseNote::ActiveRecord_AssociationRelation) }
  def lock(*args); end

  sig { params(args: T.untyped).returns(CaseNote::ActiveRecord_AssociationRelation) }
  def readonly(*args); end

  sig { params(args: T.untyped).returns(CaseNote::ActiveRecord_AssociationRelation) }
  def or(*args); end

  sig { params(args: T.untyped).returns(CaseNote::ActiveRecord_AssociationRelation) }
  def having(*args); end

  sig { params(args: T.untyped).returns(CaseNote::ActiveRecord_AssociationRelation) }
  def create_with(*args); end

  sig { params(args: T.untyped).returns(CaseNote::ActiveRecord_AssociationRelation) }
  def distinct(*args); end

  sig { params(args: T.untyped).returns(CaseNote::ActiveRecord_AssociationRelation) }
  def references(*args); end

  sig { params(args: T.untyped).returns(CaseNote::ActiveRecord_AssociationRelation) }
  def none(*args); end

  sig { params(args: T.untyped).returns(CaseNote::ActiveRecord_AssociationRelation) }
  def unscope(*args); end

  sig { params(args: T.untyped).returns(CaseNote::ActiveRecord_AssociationRelation) }
  def optimizer_hints(*args); end

  sig { params(args: T.untyped).returns(CaseNote::ActiveRecord_AssociationRelation) }
  def merge(*args); end

  sig { params(args: T.untyped).returns(CaseNote::ActiveRecord_AssociationRelation) }
  def except(*args); end

  sig { params(args: T.untyped).returns(CaseNote::ActiveRecord_AssociationRelation) }
  def only(*args); end

  sig { params(block: T.proc.params(e: CaseNote).returns(T::Boolean)).returns(T::Array[CaseNote]) }
  def select(&block); end

  sig { params(args: T.any(String, Symbol, T::Array[T.any(String, Symbol)])).returns(CaseNote::ActiveRecord_AssociationRelation) }
  def select_columns(*args); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(CaseNote::ActiveRecord_AssociationRelation) }
  def extending(*args, &block); end

  sig do
    params(
      of: T.nilable(Integer),
      start: T.nilable(Integer),
      finish: T.nilable(Integer),
      load: T.nilable(T::Boolean),
      error_on_ignore: T.nilable(T::Boolean),
      block: T.nilable(T.proc.params(e: CaseNote::ActiveRecord_AssociationRelation).void)
    ).returns(ActiveRecord::Batches::BatchEnumerator)
  end
  def in_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, &block); end
end

module CaseNote::GeneratedAssociationMethods
  sig { returns(::Case) }
  def case; end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: ::Case).void)).returns(::Case) }
  def build_case(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: ::Case).void)).returns(::Case) }
  def create_case(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: ::Case).void)).returns(::Case) }
  def create_case!(*args, &block); end

  sig { params(value: ::Case).void }
  def case=(value); end

  sig { returns(::Case) }
  def reload_case; end

  sig { returns(::Publisher) }
  def created_by; end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: ::Publisher).void)).returns(::Publisher) }
  def build_created_by(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: ::Publisher).void)).returns(::Publisher) }
  def create_created_by(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: ::Publisher).void)).returns(::Publisher) }
  def create_created_by!(*args, &block); end

  sig { params(value: ::Publisher).void }
  def created_by=(value); end

  sig { returns(::Publisher) }
  def reload_created_by; end

  sig { returns(::ActiveStorage::Attachment::ActiveRecord_Associations_CollectionProxy) }
  def files_attachments; end

  sig { returns(T::Array[Integer]) }
  def files_attachment_ids; end

  sig { params(value: T::Enumerable[::ActiveStorage::Attachment]).void }
  def files_attachments=(value); end

  sig { returns(::ActiveStorage::Blob::ActiveRecord_Associations_CollectionProxy) }
  def files_blobs; end

  sig { returns(T::Array[Integer]) }
  def files_blob_ids; end

  sig { params(value: T::Enumerable[::ActiveStorage::Blob]).void }
  def files_blobs=(value); end

  sig { returns(T.nilable(ActiveStorage::Attached::Many)) }
  def files; end

  sig { params(attachables: T.untyped).returns(T.untyped) }
  def files=(attachables); end
end
