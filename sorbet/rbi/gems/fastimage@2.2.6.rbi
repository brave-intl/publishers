# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `fastimage` gem.
# Please instead update this file by running `bin/tapioca gem fastimage`.

class FastImage
  def initialize(uri, options = T.unsafe(nil)); end

  def animated; end
  def bytes_read; end
  def content_length; end
  def orientation; end
  def size; end
  def type; end

  private

  def escaped_location(location); end
  def fetch_using_base64(uri); end
  def fetch_using_file_open; end
  def fetch_using_http; end
  def fetch_using_http_from_parsed_uri; end
  def fetch_using_read(readable); end
  def parse_animated; end
  def parse_animated_for_gif; end
  def parse_packets(stream); end
  def parse_size; end
  def parse_size_for_avif; end
  def parse_size_for_bmp; end
  def parse_size_for_cur; end
  def parse_size_for_gif; end
  def parse_size_for_heic; end
  def parse_size_for_heif; end
  def parse_size_for_ico; end
  def parse_size_for_jpeg; end
  def parse_size_for_png; end
  def parse_size_for_psd; end
  def parse_size_for_svg; end
  def parse_size_for_tiff; end
  def parse_size_for_webp; end
  def parse_size_vp8; end
  def parse_size_vp8l; end
  def parse_size_vp8x; end
  def parse_type; end
  def protocol_relative_url?(url); end
  def proxy_uri; end
  def setup_http; end

  class << self
    def animated?(uri, options = T.unsafe(nil)); end
    def size(uri, options = T.unsafe(nil)); end
    def type(uri, options = T.unsafe(nil)); end
  end
end

class FastImage::CannotParseImage < ::FastImage::FastImageException; end
FastImage::DefaultTimeout = T.let(T.unsafe(nil), Integer)

class FastImage::Exif
  def initialize(stream); end

  def height; end
  def orientation; end
  def rotated?; end
  def width; end

  private

  def get_exif_byte_order; end
  def parse_exif; end
  def parse_exif_ifd; end
end

class FastImage::FastImageException < ::StandardError; end

class FastImage::FiberStream
  include ::FastImage::StreamUtil

  def initialize(read_fiber); end

  def peek(n); end
  def pos; end
  def read(n); end
  def skip(n); end
end

class FastImage::Gif
  def initialize(stream); end

  def animated?; end
  def width_and_height; end

  private

  def skip_sub_blocks; end
end

class FastImage::IOStream < ::SimpleDelegator
  include ::FastImage::StreamUtil
end

class FastImage::ImageFetchFailure < ::FastImage::FastImageException; end

class FastImage::IsoBmff
  def initialize(stream); end

  def width_and_height; end

  private

  def handle_hdlr_box(box_size); end
  def handle_ipma_box(box_size); end
  def handle_irot_box; end
  def handle_ispe_box(box_size, index); end
  def handle_meta_box(box_size); end
  def handle_pitm_box(box_size); end
  def read_box_header!; end
  def read_boxes!(max_read_bytes = T.unsafe(nil)); end
  def read_uint16!; end
  def read_uint32!; end
  def read_uint8!; end
end

FastImage::LocalFileChunkSize = T.let(T.unsafe(nil), Integer)
FastImage::SUPPORTED_IMAGE_TYPES = T.let(T.unsafe(nil), Array)
class FastImage::SizeNotFound < ::FastImage::FastImageException; end

module FastImage::StreamUtil
  def read_byte; end
  def read_int; end
  def read_string_int; end
end

class FastImage::Svg
  def initialize(stream); end

  def width_and_height; end

  private

  def attr_value; end
  def parse_svg; end
end

class FastImage::UnknownImageType < ::FastImage::FastImageException; end
FastImage::VERSION = T.let(T.unsafe(nil), String)
