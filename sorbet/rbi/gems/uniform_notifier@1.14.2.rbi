# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `uniform_notifier` gem.
# Please instead update this file by running `bin/tapioca gem uniform_notifier`.

class UniformNotifier
  class << self
    def active_notifiers; end
    def airbrake; end
    def airbrake=(_arg0); end
    def alert; end
    def alert=(_arg0); end
    def appsignal; end
    def appsignal=(_arg0); end
    def bugsnag; end
    def bugsnag=(_arg0); end
    def console; end
    def console=(_arg0); end
    def customized_logger; end
    def customized_logger=(logdev); end
    def growl; end
    def growl=(growl); end
    def honeybadger; end
    def honeybadger=(_arg0); end
    def rails_logger; end
    def rails_logger=(_arg0); end
    def raise; end
    def raise=(exception_class); end
    def rollbar; end
    def rollbar=(_arg0); end
    def sentry; end
    def sentry=(_arg0); end
    def slack; end
    def slack=(slack); end
    def terminal_notifier; end
    def terminal_notifier=(_arg0); end
    def xmpp; end
    def xmpp=(xmpp); end
  end
end

UniformNotifier::AVAILABLE_NOTIFIERS = T.let(T.unsafe(nil), Array)

class UniformNotifier::AirbrakeNotifier < ::UniformNotifier::Base
  class << self
    def active?; end

    protected

    def _out_of_channel_notify(data); end
  end
end

class UniformNotifier::AppsignalNotifier < ::UniformNotifier::Base
  class << self
    def active?; end

    protected

    def _out_of_channel_notify(data); end
  end
end

class UniformNotifier::Base
  class << self
    def active?; end
    def inline_notify(data); end
    def out_of_channel_notify(data); end

    protected

    def _inline_notify(data); end
    def _out_of_channel_notify(data); end
    def wrap_js_association(code, attributes = T.unsafe(nil)); end
  end
end

class UniformNotifier::BugsnagNotifier < ::UniformNotifier::Base
  class << self
    def active?; end

    protected

    def _out_of_channel_notify(data); end
  end
end

class UniformNotifier::CustomizedLogger < ::UniformNotifier::Base
  class << self
    def _out_of_channel_notify(data); end
    def active?; end
    def setup(logdev); end
  end
end

class UniformNotifier::Exception < ::RuntimeError; end

class UniformNotifier::Growl < ::UniformNotifier::Base
  class << self
    def active?; end
    def setup_connection(growl); end
    def setup_connection_gntp(growl); end
    def setup_connection_growl(growl); end

    protected

    def _out_of_channel_notify(data); end

    private

    def notify(message); end
  end
end

class UniformNotifier::HoneybadgerNotifier < ::UniformNotifier::Base
  class << self
    def active?; end

    protected

    def _out_of_channel_notify(data); end
  end
end

class UniformNotifier::JavascriptAlert < ::UniformNotifier::Base
  class << self
    def active?; end

    protected

    def _inline_notify(data); end
  end
end

class UniformNotifier::JavascriptConsole < ::UniformNotifier::Base
  class << self
    def active?; end

    protected

    def _inline_notify(data); end
  end
end

UniformNotifier::NOTIFIERS = T.let(T.unsafe(nil), Array)
class UniformNotifier::NotificationError < ::StandardError; end

class UniformNotifier::RailsLogger < ::UniformNotifier::Base
  class << self
    def active?; end

    protected

    def _out_of_channel_notify(data); end
  end
end

class UniformNotifier::Raise < ::UniformNotifier::Base
  class << self
    def active?; end
    def setup_connection(exception_class); end

    protected

    def _out_of_channel_notify(data); end
  end
end

class UniformNotifier::RollbarNotifier < ::UniformNotifier::Base
  class << self
    def active?; end

    protected

    def _out_of_channel_notify(data); end
  end
end

UniformNotifier::RollbarNotifier::DEFAULT_LEVEL = T.let(T.unsafe(nil), String)

class UniformNotifier::SentryNotifier < ::UniformNotifier::Base
  class << self
    def active?; end

    protected

    def _out_of_channel_notify(data); end
  end
end

class UniformNotifier::Slack < ::UniformNotifier::Base
  class << self
    def active?; end
    def setup_connection(config = T.unsafe(nil)); end

    protected

    def _out_of_channel_notify(data); end

    private

    def fail_connection(message); end
    def notify(message); end
    def parse_config(config); end
  end
end

UniformNotifier::Slack::POSSIBLE_OPTIONS = T.let(T.unsafe(nil), Array)

class UniformNotifier::TerminalNotifier < ::UniformNotifier::Base
  class << self
    def active?; end

    protected

    def _out_of_channel_notify(data); end
  end
end

class UniformNotifier::Xmpp < ::UniformNotifier::Base
  class << self
    def active?; end
    def setup_connection(xmpp_information); end

    protected

    def _out_of_channel_notify(data); end

    private

    def connect; end
    def notify(message); end
    def presence_status; end
  end
end
