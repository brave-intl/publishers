# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `yt` gem.
# Please instead update this file by running `bin/tapioca gem yt`.

module Yt
  include ::Yt::Models
  extend ::Yt::Config
end

module Yt::Actions; end

module Yt::Actions::Base
  private

  def sanitize_brackets!(source); end
  def underscore(value); end
  def underscore_keys!(hash); end
end

module Yt::Actions::Delete
  include ::Yt::Actions::Base
  include ::Yt::Actions::Modify

  private

  def delete_params; end
  def do_delete(extra_delete_params = T.unsafe(nil), &block); end
end

module Yt::Actions::DeleteAll
  include ::Yt::Actions::List

  private

  def do_delete_all(params = T.unsafe(nil), options = T.unsafe(nil)); end
  def list_all(params = T.unsafe(nil)); end
end

module Yt::Actions::Get
  include ::Yt::Actions::Base

  def get; end

  private

  def get_params; end
  def get_request(params = T.unsafe(nil)); end
end

module Yt::Actions::Insert
  include ::Yt::Actions::Base

  private

  def do_insert(extra_insert_params = T.unsafe(nil)); end
  def extract_data_from(response); end
  def insert_params; end
  def insert_request(params = T.unsafe(nil)); end
end

module Yt::Actions::List
  def any?(*_arg0, &_arg1); end
  def count(*_arg0, &_arg1); end
  def each(*_arg0, &_arg1); end
  def each_cons(*_arg0, &_arg1); end
  def each_slice(*_arg0, &_arg1); end
  def find(*_arg0, &_arg1); end
  def first(*_arg0, &_arg1); end
  def first!; end
  def flat_map(*_arg0, &_arg1); end
  def map(*_arg0, &_arg1); end
  def select(*_arg0, &_arg1); end
  def size(*_arg0, &_arg1); end
  def take(*_arg0, &_arg1); end

  private

  def attributes_for_new_item(data); end
  def eager_load_items_from(items); end
  def error_message; end
  def extract_items(list); end
  def fetch_page(params = T.unsafe(nil)); end
  def find_next; end
  def items_key; end
  def list; end
  def list_params; end
  def list_request(params = T.unsafe(nil)); end
  def list_resources; end
  def more_pages?; end
  def new_item(data); end
  def next_page; end
  def resource_class; end
  def total_results; end
end

module Yt::Actions::Modify
  include ::Yt::Actions::Base

  private

  def do_modify(params = T.unsafe(nil)); end
  def modify_params; end
  def modify_request(params = T.unsafe(nil)); end
end

module Yt::Actions::Patch
  include ::Yt::Actions::Base
  include ::Yt::Actions::Modify

  private

  def do_patch(extra_patch_params = T.unsafe(nil), &block); end
  def patch_params; end
end

module Yt::Actions::Update
  include ::Yt::Actions::Base
  include ::Yt::Actions::Modify

  private

  def do_update(extra_update_params = T.unsafe(nil), &block); end
  def update_params; end
end

module Yt::Associations; end

module Yt::Associations::Authenticable
  def initialize(options = T.unsafe(nil)); end

  def access_token(*_arg0, &_arg1); end
  def access_token_was_refreshed; end
  def auth; end
  def authentication; end
  def authentication_url; end
  def expires_at(*_arg0, &_arg1); end
  def refresh_token(*_arg0, &_arg1); end
  def refreshed_access_token?; end
  def revoke_access; end

  private

  def authentication_scope; end
  def authentication_url_params; end
  def client_id; end
  def client_secret; end
  def current_authentication; end
  def current_data; end
  def device_code_authentication_params; end
  def device_code_authentications; end
  def device_flow_params; end
  def device_flows; end
  def missing_authorization_code_message; end
  def new_authentication_params; end
  def new_authentications; end
  def pending_device_code_message; end
  def raise_missing_authentication!; end
  def refreshed_authentication_params; end
  def refreshed_authentications; end
  def revocations; end
  def use_authorization_code!; end
  def use_device_code!; end
  def use_refresh_token!; end
end

module Yt::Associations::HasAttribute
  mixes_in_class_methods ::Yt::Associations::HasAttribute::ClassMethods

  private

  def type_cast(value, type); end

  class << self
    def included(base); end
  end
end

module Yt::Associations::HasAttribute::ClassMethods
  def has_attribute(attribute, options = T.unsafe(nil), &block); end

  private

  def define_memoized_method(name, &method); end
end

module Yt::Associations::HasAuthentication
  def has_authentication; end
end

module Yt::Associations::HasMany
  def has_many(attributes); end
end

module Yt::Associations::HasOne
  def has_one(attribute); end
end

module Yt::Associations::HasReports
  def has_report(metric, type); end

  private

  def define_all_metric_method(metric, type); end
  def define_metric_method(metric); end
  def define_range_metric_method(metric); end
  def define_reports_method(metric, type); end
end

Yt::COUNTRIES = T.let(T.unsafe(nil), ActiveSupport::HashWithIndifferentAccess)
module Yt::Collections; end

class Yt::Collections::AdvertisingOptionsSets < ::Yt::Collections::Resources
  private

  def attributes_for_new_item(data); end
  def fetch_page(params = T.unsafe(nil)); end
  def list_params; end
end

class Yt::Collections::Annotations < ::Yt::Collections::Base
  private

  def expected?(error); end
  def list_params; end
  def next_page; end
  def total_results; end
end

class Yt::Collections::Assets < ::Yt::Collections::Base
  def insert(attributes = T.unsafe(nil)); end

  private

  def assets_params; end
  def assets_path; end
  def insert_params; end
  def list_params; end
  def new_item(data); end
end

class Yt::Collections::Authentications < ::Yt::Collections::Base
  def auth_params; end
  def auth_params=(_arg0); end

  private

  def attributes_for_new_item(data); end
  def expected?(error); end
  def invalid_code_errors; end
  def list_params; end
  def more_pages?; end
  def next_page; end
end

class Yt::Collections::Base
  include ::Yt::Actions::List
  include ::Yt::Actions::DeleteAll
  include ::Yt::Actions::Base
  include ::Yt::Actions::Insert

  def initialize(options = T.unsafe(nil)); end

  def includes(*relationships); end
  def where(requirements = T.unsafe(nil)); end

  private

  def apply_where_params!(params = T.unsafe(nil)); end
  def included_relationships; end

  class << self
    def of(parent); end
  end
end

class Yt::Collections::BulkReportJobs < ::Yt::Collections::Base
  private

  def attributes_for_new_item(data); end
  def items_key; end
  def list_params; end
end

class Yt::Collections::BulkReports < ::Yt::Collections::Base
  private

  def items_key; end
  def list_params; end
end

class Yt::Collections::Channels < ::Yt::Collections::Resources
  private

  def attributes_for_new_item(data); end
  def channels_params; end
  def list_params; end
end

class Yt::Collections::ClaimHistories < ::Yt::Collections::Resources
  private

  def attributes_for_new_item(data); end
  def fetch_page(params = T.unsafe(nil)); end
  def list_params; end
end

class Yt::Collections::Claims < ::Yt::Collections::Base
  def insert(attributes = T.unsafe(nil)); end

  private

  def attributes_for_new_item(data); end
  def claims_params; end
  def claims_path; end
  def eager_load_items_from(items); end
  def insert_params; end
  def list_params; end
  def match_attributes(attributes = T.unsafe(nil)); end
end

class Yt::Collections::CommentThreads < ::Yt::Collections::Base
  private

  def attributes_for_new_item(data); end
  def comments_params; end
  def list_params; end
end

class Yt::Collections::ContentDetails < ::Yt::Collections::Base
  private

  def attributes_for_new_item(data); end
  def content_details_params; end
  def list_params; end
end

class Yt::Collections::ContentOwnerDetails < ::Yt::Collections::Base
  private

  def attributes_for_new_item(data); end
  def content_owner_details_params; end
  def list_params; end
end

class Yt::Collections::ContentOwners < ::Yt::Collections::Base
  private

  def attributes_for_new_item(data); end
  def content_owners_params; end
  def list_params; end
end

class Yt::Collections::DeviceFlows < ::Yt::Collections::Authentications
  def auth_params; end
  def auth_params=(_arg0); end

  private

  def attributes_for_new_item(data); end
  def list_params; end
end

class Yt::Collections::FileDetails < ::Yt::Collections::Base
  private

  def attributes_for_new_item(data); end
  def file_details_params; end
  def list_params; end
end

class Yt::Collections::GroupInfos < ::Yt::Collections::Base
  private

  def attributes_for_new_item(data); end
  def list_params; end
end

class Yt::Collections::GroupItems < ::Yt::Collections::Base
  private

  def attributes_for_new_item(data); end
  def eager_load_items_from(items); end
  def list_params; end
end

class Yt::Collections::LiveStreamingDetails < ::Yt::Collections::Base
  private

  def attributes_for_new_item(data); end
  def list_params; end
  def live_streaming_details_params; end
end

class Yt::Collections::Ownerships < ::Yt::Collections::Resources
  private

  def attributes_for_new_item(data); end
  def fetch_page(params = T.unsafe(nil)); end
  def list_params; end
end

class Yt::Collections::PartneredChannels < ::Yt::Collections::Channels
  private

  def channels_params; end
  def list_resources; end
end

class Yt::Collections::Players < ::Yt::Collections::Base
  private

  def attributes_for_new_item(data); end
  def list_params; end
  def players_params; end
end

class Yt::Collections::PlaylistItems < ::Yt::Collections::Resources
  def insert(attributes = T.unsafe(nil), options = T.unsafe(nil)); end

  private

  def attributes_for_new_item(data); end
  def eager_load_items_from(items); end
  def insert_params; end
  def insert_parts; end
  def list_params; end
  def playlist_items_params; end
end

class Yt::Collections::Playlists < ::Yt::Collections::Resources
  private

  def attributes_for_new_item(data); end
  def eager_load_items_from(items); end
  def insert_parts; end
  def list_params; end
  def playlists_params; end
end

class Yt::Collections::Policies < ::Yt::Collections::Base
  private

  def list_params; end
  def policies_params; end
end

class Yt::Collections::Ratings < ::Yt::Collections::Base
  private

  def attributes_for_new_item(data); end
  def list_params; end
end

class Yt::Collections::References < ::Yt::Collections::Base
  def insert(attributes = T.unsafe(nil)); end

  private

  def body_params; end
  def insert_params; end
  def list_params; end
  def references_params; end
end

class Yt::Collections::RelatedPlaylists < ::Yt::Collections::Playlists
  private

  def eager_load_items_from(items); end
  def extract_items(list); end
  def list_resources; end
  def new_item(playlist); end
  def playlists_params; end
  def resource_class; end
end

class Yt::Collections::Reports < ::Yt::Collections::Base
  def metrics=(_arg0); end
  def within(days_range, country, state, dimension, videos, historical, max_retries = T.unsafe(nil)); end

  private

  def items_key; end
  def list_params; end
  def new_item(data); end
  def reports_params; end
  def rescue?(error); end
  def retry_time; end
  def type_cast(value, type); end
end

Yt::Collections::Reports::DEVICE_TYPES = T.let(T.unsafe(nil), Hash)
Yt::Collections::Reports::DIMENSIONS = T.let(T.unsafe(nil), Hash)
Yt::Collections::Reports::OPERATING_SYSTEMS = T.let(T.unsafe(nil), Hash)
Yt::Collections::Reports::PLAYBACK_LOCATIONS = T.let(T.unsafe(nil), Hash)
Yt::Collections::Reports::SUBSCRIBED_STATUSES = T.let(T.unsafe(nil), Hash)
Yt::Collections::Reports::TRAFFIC_SOURCES = T.let(T.unsafe(nil), Hash)
Yt::Collections::Reports::YOUTUBE_PRODUCTS = T.let(T.unsafe(nil), Hash)

class Yt::Collections::Resources < ::Yt::Collections::Base
  def delete_all(params = T.unsafe(nil)); end
  def insert(attributes = T.unsafe(nil), options = T.unsafe(nil)); end

  private

  def attributes_for_new_item(data); end
  def build_insert_body(attributes = T.unsafe(nil)); end
  def build_insert_body_part(part, attributes = T.unsafe(nil)); end
  def camelize(value); end
  def resources_params; end
  def should_include_part_in_insert?(part, attributes = T.unsafe(nil)); end
end

class Yt::Collections::ResumableSessions < ::Yt::Collections::Base
  def insert(content_length, body = T.unsafe(nil)); end

  private

  def attributes_for_new_item(data); end
  def extract_data_from(response); end
  def headers_for(content_length); end
  def insert_params; end
end

class Yt::Collections::Revocations < ::Yt::Collections::Authentications
  def auth_params; end
  def auth_params=(_arg0); end

  private

  def attributes_for_new_item(data); end
  def list_params; end
end

class Yt::Collections::Snippets < ::Yt::Collections::Base
  private

  def attributes_for_new_item(data); end
  def list_params; end
end

class Yt::Collections::StatisticsSets < ::Yt::Collections::Base
  private

  def attributes_for_new_item(data); end
  def list_params; end
  def statistics_sets_params; end
end

class Yt::Collections::Statuses < ::Yt::Collections::Base
  private

  def attributes_for_new_item(data); end
  def list_params; end
end

class Yt::Collections::SubscribedChannels < ::Yt::Collections::Channels
  private

  def attributes_for_new_item(data); end
  def channels_params; end
  def list_params; end
  def resource_class; end
end

class Yt::Collections::Subscribers < ::Yt::Collections::SubscribedChannels
  private

  def attributes_for_new_item(data); end
  def channels_params; end
end

class Yt::Collections::Subscriptions < ::Yt::Collections::Base
  def insert(options = T.unsafe(nil)); end

  private

  def attributes_for_new_item(data); end
  def insert_params; end
  def list_params; end
  def subscriptions_params; end
end

class Yt::Collections::UserInfos < ::Yt::Collections::Base
  private

  def list_params; end
  def next_page; end
end

class Yt::Collections::VideoCategories < ::Yt::Collections::Base
  private

  def attributes_for_new_item(data); end
  def list_params; end
  def video_categories_params; end
end

class Yt::Collections::VideoGroups < ::Yt::Collections::Base
  private

  def attributes_for_new_item(data); end
  def list_params; end
  def new_item(data); end
end

class Yt::Collections::Videos < ::Yt::Collections::Base
  def where(requirements = T.unsafe(nil)); end

  private

  def add_offset_to(items); end
  def attributes_for_new_item(data); end
  def eager_load_items_from(items); end
  def halt_list; end
  def list_params; end
  def more_pages?; end
  def next_page; end
  def use_list_endpoint?; end
  def videos_params; end
  def videos_path; end
end

module Yt::Config
  def configuration; end
  def configure; end
end

Yt::Error = Yt::Errors::RequestError
module Yt::Errors; end

class Yt::Errors::Forbidden < ::Yt::Errors::RequestError
  def explanation; end
end

class Yt::Errors::MissingAuth < ::Yt::Errors::RequestError
  def message; end
  def more_details; end

  private

  def authentication_url; end
  def more_details_with_authentication_url; end
  def more_details_with_verification_url; end
  def more_details_without_url; end
  def redirect_uri; end
  def scopes; end
  def user_code; end
  def verification_url; end
end

class Yt::Errors::NoItems < ::Yt::Errors::RequestError
  def explanation; end
end

class Yt::Errors::RequestError < ::StandardError
  def initialize(msg = T.unsafe(nil)); end

  def description; end
  def explanation; end
  def kind; end
  def message; end
  def reasons; end
  def response_body; end

  private

  def details; end
  def json; end
  def more_details; end
  def no_details; end
  def request_curl; end
end

class Yt::Errors::ServerError < ::Yt::Errors::RequestError
  def explanation; end
end

class Yt::Errors::Unauthorized < ::Yt::Errors::RequestError
  def explanation; end

  private

  def more_details; end
end

module Yt::Models; end

class Yt::Models::Account < ::Yt::Models::Base
  include ::Yt::Associations::Authenticable

  def initialize(options = T.unsafe(nil)); end

  def avatar_url; end
  def channel; end
  def channels; end
  def content_owners; end
  def create_playlist(params = T.unsafe(nil)); end
  def delete_playlists(*_arg0, &_arg1); end
  def email(*_arg0, &_arg1); end
  def family_name(*_arg0, &_arg1); end
  def gender(*_arg0, &_arg1); end
  def given_name(*_arg0, &_arg1); end
  def has_verified_email?; end
  def hd(*_arg0, &_arg1); end
  def id(*_arg0, &_arg1); end
  def insert_playlist_item_params; end
  def locale(*_arg0, &_arg1); end
  def name(*_arg0, &_arg1); end
  def owner_name; end
  def playlist_items_params; end
  def playlists(*_arg0, &_arg1); end
  def profile_url; end
  def related_playlists(*_arg0, &_arg1); end
  def resumable_sessions; end
  def subscribed_channels(*_arg0, &_arg1); end
  def subscribers; end
  def update_playlist_params; end
  def update_video_params; end
  def upload_body(params = T.unsafe(nil)); end
  def upload_content_type; end
  def upload_params; end
  def upload_path; end
  def upload_thumbnail_params; end
  def upload_video(path_or_url, params = T.unsafe(nil)); end
  def user_info; end
  def user_infos; end
  def video_groups; end
  def video_groups_params; end
  def videos; end
  def videos_params; end
end

class Yt::Models::AdvertisingOptionsSet < ::Yt::Models::Base
  def initialize(options = T.unsafe(nil)); end

  def ad_breaks; end
  def ad_formats; end
  def tp_ad_server_video_id; end
  def update(attributes = T.unsafe(nil)); end

  private

  def patch_params; end
end

class Yt::Models::Annotation < ::Yt::Models::Base
  def initialize(options = T.unsafe(nil)); end

  def above?(y); end
  def action; end
  def below?(y); end
  def has_invideo_programming?; end
  def has_link_to_playlist?; end
  def has_link_to_same_window?; end
  def has_link_to_subscribe?(options = T.unsafe(nil)); end
  def has_link_to_video?(options = T.unsafe(nil)); end
  def segment; end
  def starts_after?(seconds); end
  def starts_before?(seconds); end
  def text; end
  def type; end

  private

  def bottom; end
  def link_class; end
  def link_target; end
  def positions; end
  def region; end
  def timestamp_of(position); end
  def timestamps; end
  def top; end
  def url; end
end

class Yt::Models::Asset < ::Yt::Models::Base
  def initialize(options = T.unsafe(nil)); end

  def auth; end
  def general_owners(*_arg0, &_arg1); end
  def id; end
  def label; end
  def mechanical_owners(*_arg0, &_arg1); end
  def metadata_effective; end
  def metadata_mine; end
  def ownership; end
  def ownership_effective; end
  def ownerships; end
  def performance_owners(*_arg0, &_arg1); end
  def synchronization_owners(*_arg0, &_arg1); end
  def type; end
  def update(attributes = T.unsafe(nil)); end

  private

  def get_params; end
  def patch_params; end
  def update_params; end
end

class Yt::Models::AssetMetadata < ::Yt::Models::Base
  def initialize(options = T.unsafe(nil)); end

  def custom_id; end
  def description; end
  def notes; end
  def title; end
end

class Yt::Models::AssetSnippet < ::Yt::Models::Base
  def initialize(options = T.unsafe(nil)); end

  def auth; end
  def custom_id; end
  def id; end
  def isrc; end
  def iswc; end
  def title; end
  def type; end
end

class Yt::Models::Authentication
  def initialize(data = T.unsafe(nil)); end

  def access_token; end
  def expired?; end
  def expires_at; end
  def pending?; end
  def refresh_token; end

  private

  def expiration_date(options = T.unsafe(nil)); end
end

class Yt::Models::Base
  include ::Yt::Actions::Base
  include ::Yt::Actions::Modify
  include ::Yt::Actions::Delete
  include ::Yt::Actions::Update
  include ::Yt::Actions::Patch
  include ::Yt::Actions::Get
  include ::Yt::Associations::HasAttribute
  extend ::Yt::Associations::HasAttribute::ClassMethods
  extend ::Yt::Associations::HasReports
  extend ::Yt::Associations::HasOne
  extend ::Yt::Associations::HasMany
  extend ::Yt::Associations::HasAuthentication
end

class Yt::Models::BulkReport < ::Yt::Models::Base
  def initialize(options = T.unsafe(nil)); end

  def auth; end
  def download_url; end
  def end_time; end
  def id; end
  def start_time; end
end

class Yt::Models::BulkReportJob < ::Yt::Models::Base
  def initialize(options = T.unsafe(nil)); end

  def auth; end
  def bulk_reports; end
  def id; end
  def report_type_id; end
end

class Yt::Models::Channel < ::Yt::Models::Resource
  def initialize(options = T.unsafe(nil)); end

  def ad_impressions(options = T.unsafe(nil)); end
  def annotation_click_through_rate(options = T.unsafe(nil)); end
  def annotation_clicks(options = T.unsafe(nil)); end
  def annotation_close_rate(options = T.unsafe(nil)); end
  def average_view_duration(options = T.unsafe(nil)); end
  def average_view_percentage(options = T.unsafe(nil)); end
  def card_click_rate(options = T.unsafe(nil)); end
  def card_clicks(options = T.unsafe(nil)); end
  def card_impressions(options = T.unsafe(nil)); end
  def card_teaser_click_rate(options = T.unsafe(nil)); end
  def card_teaser_clicks(options = T.unsafe(nil)); end
  def card_teaser_impressions(options = T.unsafe(nil)); end
  def comments(options = T.unsafe(nil)); end
  def content_owner(*_arg0, &_arg1); end
  def content_owner_detail; end
  def content_owner_details; end
  def content_owner_details_params; end
  def delete_playlists(attributes = T.unsafe(nil)); end
  def description(*_arg0, &_arg1); end
  def dislikes(options = T.unsafe(nil)); end
  def estimated_minutes_watched(options = T.unsafe(nil)); end
  def estimated_revenue(options = T.unsafe(nil)); end
  def likes(options = T.unsafe(nil)); end
  def linked_at; end
  def made_for_kids?; end
  def monetized_playbacks(options = T.unsafe(nil)); end
  def playback_based_cpm(options = T.unsafe(nil)); end
  def playlists; end
  def published_at(*_arg0, &_arg1); end
  def related_playlists; end
  def reports(options = T.unsafe(nil)); end
  def reports_params; end
  def self_declared_made_for_kids?; end
  def shares(options = T.unsafe(nil)); end
  def statistics_set; end
  def statistics_sets; end
  def subscribe; end
  def subscribe!; end
  def subscribed?; end
  def subscribed_channels; end
  def subscriber_count(*_arg0, &_arg1); end
  def subscriber_count_visible?; end
  def subscribers_gained(options = T.unsafe(nil)); end
  def subscribers_lost(options = T.unsafe(nil)); end
  def subscription; end
  def subscriptions; end
  def throttle_subscriptions(seconds = T.unsafe(nil)); end
  def thumbnail_url(*_arg0, &_arg1); end
  def title(*_arg0, &_arg1); end
  def unsubscribe; end
  def unsubscribe!; end
  def video_count(*_arg0, &_arg1); end
  def videos; end
  def videos_added_to_playlists(options = T.unsafe(nil)); end
  def videos_params; end
  def videos_removed_from_playlists(options = T.unsafe(nil)); end
  def view_count(*_arg0, &_arg1); end
  def viewer_percentage(options = T.unsafe(nil)); end
  def views(options = T.unsafe(nil)); end

  private

  def all_ad_impressions; end
  def all_annotation_click_through_rate; end
  def all_annotation_clicks; end
  def all_annotation_close_rate; end
  def all_average_view_duration; end
  def all_average_view_percentage; end
  def all_card_click_rate; end
  def all_card_clicks; end
  def all_card_impressions; end
  def all_card_teaser_click_rate; end
  def all_card_teaser_clicks; end
  def all_card_teaser_impressions; end
  def all_comments; end
  def all_dislikes; end
  def all_estimated_minutes_watched; end
  def all_estimated_revenue; end
  def all_likes; end
  def all_monetized_playbacks; end
  def all_playback_based_cpm; end
  def all_shares; end
  def all_subscribers_gained; end
  def all_subscribers_lost; end
  def all_videos_added_to_playlists; end
  def all_videos_removed_from_playlists; end
  def all_viewer_percentage; end
  def all_views; end
  def range_ad_impressions(date_range, dimension, country, state, videos, historical); end
  def range_annotation_click_through_rate(date_range, dimension, country, state, videos, historical); end
  def range_annotation_clicks(date_range, dimension, country, state, videos, historical); end
  def range_annotation_close_rate(date_range, dimension, country, state, videos, historical); end
  def range_average_view_duration(date_range, dimension, country, state, videos, historical); end
  def range_average_view_percentage(date_range, dimension, country, state, videos, historical); end
  def range_card_click_rate(date_range, dimension, country, state, videos, historical); end
  def range_card_clicks(date_range, dimension, country, state, videos, historical); end
  def range_card_impressions(date_range, dimension, country, state, videos, historical); end
  def range_card_teaser_click_rate(date_range, dimension, country, state, videos, historical); end
  def range_card_teaser_clicks(date_range, dimension, country, state, videos, historical); end
  def range_card_teaser_impressions(date_range, dimension, country, state, videos, historical); end
  def range_comments(date_range, dimension, country, state, videos, historical); end
  def range_dislikes(date_range, dimension, country, state, videos, historical); end
  def range_estimated_minutes_watched(date_range, dimension, country, state, videos, historical); end
  def range_estimated_revenue(date_range, dimension, country, state, videos, historical); end
  def range_likes(date_range, dimension, country, state, videos, historical); end
  def range_monetized_playbacks(date_range, dimension, country, state, videos, historical); end
  def range_playback_based_cpm(date_range, dimension, country, state, videos, historical); end
  def range_shares(date_range, dimension, country, state, videos, historical); end
  def range_subscribers_gained(date_range, dimension, country, state, videos, historical); end
  def range_subscribers_lost(date_range, dimension, country, state, videos, historical); end
  def range_videos_added_to_playlists(date_range, dimension, country, state, videos, historical); end
  def range_videos_removed_from_playlists(date_range, dimension, country, state, videos, historical); end
  def range_viewer_percentage(date_range, dimension, country, state, videos, historical); end
  def range_views(date_range, dimension, country, state, videos, historical); end
end

class Yt::Models::Claim < ::Yt::Models::Base
  def initialize(options = T.unsafe(nil)); end

  def active?; end
  def appealed?; end
  def asset; end
  def asset_id; end
  def audio?; end
  def audiovisual?; end
  def auth; end
  def block_outside_ownership?; end
  def claim_histories; end
  def claim_history; end
  def content_type; end
  def created_at; end
  def data; end
  def delete; end
  def disputed?; end
  def has_unknown_status?; end
  def id; end
  def inactive?; end
  def match_reference_id; end
  def pending?; end
  def potential?; end
  def source; end
  def status; end
  def takedown?; end
  def third_party?; end
  def update(attributes = T.unsafe(nil)); end
  def video?; end
  def video_id; end

  private

  def patch_params; end
end

class Yt::Models::ClaimEvent < ::Yt::Models::Base
  def initialize(options = T.unsafe(nil)); end

  def dispute_notes; end
  def dispute_reason; end
  def reason; end
  def source_content_owner_id; end
  def source_type; end
  def source_user_email; end
  def time; end
  def type; end
  def update_status; end
end

Yt::Models::ClaimEvent::REASONS = T.let(T.unsafe(nil), Array)

class Yt::Models::ClaimHistory < ::Yt::Models::Base
  def initialize(options = T.unsafe(nil)); end

  def events; end
  def id; end
  def uploader_channel_id; end
end

class Yt::Models::Comment < ::Yt::Models::Resource
  def author_display_name(*_arg0, &_arg1); end
  def like_count(*_arg0, &_arg1); end
  def parent_id(*_arg0, &_arg1); end
  def text_display(*_arg0, &_arg1); end
  def updated_at(*_arg0, &_arg1); end
  def video_id(*_arg0, &_arg1); end
end

class Yt::Models::CommentThread < ::Yt::Models::Resource
  def author_display_name(*_arg0, &_arg1); end
  def can_reply?(*_arg0, &_arg1); end
  def like_count(*_arg0, &_arg1); end
  def public?(*_arg0, &_arg1); end
  def text_display(*_arg0, &_arg1); end
  def top_level_comment(*_arg0, &_arg1); end
  def total_reply_count(*_arg0, &_arg1); end
  def updated_at(*_arg0, &_arg1); end
  def video_id(*_arg0, &_arg1); end
end

class Yt::Models::Configuration
  def initialize; end

  def api_key; end
  def api_key=(_arg0); end
  def client_id; end
  def client_id=(_arg0); end
  def client_secret; end
  def client_secret=(_arg0); end
  def debugging?; end
  def developing?; end
  def log_level; end
  def log_level=(_arg0); end
end

class Yt::Models::ContentDetail < ::Yt::Models::Base
  def initialize(options = T.unsafe(nil)); end

  def caption; end
  def content_rating; end
  def data; end
  def definition; end
  def dimension; end
  def duration; end
  def item_count; end
  def length; end
  def licensed_content; end
  def youtube_rating; end

  private

  def to_seconds(iso8601_duration); end
end

class Yt::Models::ContentOwner < ::Yt::Models::Account
  def initialize(options = T.unsafe(nil)); end

  def assets; end
  def bulk_report_jobs; end
  def claims; end
  def create_asset(params = T.unsafe(nil)); end
  def create_claim(params = T.unsafe(nil)); end
  def create_reference(params = T.unsafe(nil)); end
  def display_name; end
  def insert_playlist_item_params; end
  def partnered_channels; end
  def playlist_items_params; end
  def policies; end
  def references; end
  def update_playlist_params; end
  def update_video_params; end
  def upload_params; end
  def upload_path; end
  def upload_reference_file(path_or_url, params = T.unsafe(nil)); end
  def upload_thumbnail_params; end
  def video_groups; end
  def video_groups_params; end
  def videos_params; end
end

class Yt::Models::ContentOwnerDetail < ::Yt::Models::Base
  def initialize(options = T.unsafe(nil)); end

  def content_owner; end
  def time_linked; end
end

class Yt::Models::DeviceFlow < ::Yt::Models::Base
  def initialize(options = T.unsafe(nil)); end

  def device_code; end
  def user_code; end
  def verification_url; end
end

class Yt::Models::FileDetail < ::Yt::Models::Base
  def initialize(options = T.unsafe(nil)); end

  def container; end
  def data; end
  def file_name; end
  def file_size; end
  def file_type; end
end

class Yt::Models::GroupInfo < ::Yt::Models::Base
  def initialize(options = T.unsafe(nil)); end

  def data; end
  def item_count; end
  def published_at; end
  def title; end
end

class Yt::Models::GroupItem < ::Yt::Models::Base
  def initialize(options = T.unsafe(nil)); end

  def auth; end
  def data; end
  def video; end
end

class Yt::Models::Iterator < ::Enumerator
  def initialize(size = T.unsafe(nil), &block); end

  def size; end
end

class Yt::Models::LiveStreamingDetail < ::Yt::Models::Base
  def initialize(options = T.unsafe(nil)); end

  def actual_end_time; end
  def actual_start_time; end
  def concurrent_viewers; end
  def scheduled_end_time; end
  def scheduled_start_time; end
end

class Yt::Models::MatchPolicy < ::Yt::Models::Base
  def initialize(options = T.unsafe(nil)); end

  def update(attributes = T.unsafe(nil)); end

  private

  def update_params; end
end

class Yt::Models::Ownership < ::Yt::Models::Base
  def initialize(options = T.unsafe(nil)); end

  def general_owners; end
  def mechanical_owners; end
  def obtain!; end
  def performance_owners; end
  def release!; end
  def synchronization_owners; end
  def update(attributes = T.unsafe(nil)); end

  private

  def as_owners(data); end
  def update_params; end
end

class Yt::Models::Player < ::Yt::Models::Base
  def initialize(options = T.unsafe(nil)); end

  def data; end
  def embed_html; end
end

class Yt::Models::Playlist < ::Yt::Models::Resource
  def initialize(options = T.unsafe(nil)); end

  def add_video(video_id, options = T.unsafe(nil)); end
  def add_video!(video_id, options = T.unsafe(nil)); end
  def add_videos(video_ids = T.unsafe(nil), options = T.unsafe(nil)); end
  def add_videos!(video_ids = T.unsafe(nil), options = T.unsafe(nil)); end
  def average_time_in_playlist(options = T.unsafe(nil)); end
  def average_view_duration(options = T.unsafe(nil)); end
  def channel_id(*_arg0, &_arg1); end
  def channel_title(*_arg0, &_arg1); end
  def content_detail; end
  def content_details; end
  def delete(options = T.unsafe(nil)); end
  def delete_playlist_items(attributes = T.unsafe(nil)); end
  def description(*_arg0, &_arg1); end
  def estimated_minutes_watched(options = T.unsafe(nil)); end
  def exists?; end
  def item_count(*_arg0, &_arg1); end
  def playlist_items; end
  def playlist_starts(options = T.unsafe(nil)); end
  def published_at(*_arg0, &_arg1); end
  def reports(options = T.unsafe(nil)); end
  def reports_params; end
  def tags(*_arg0, &_arg1); end
  def thumbnail_url(*_arg0, &_arg1); end
  def title(*_arg0, &_arg1); end
  def update(attributes = T.unsafe(nil)); end
  def viewer_percentage(options = T.unsafe(nil)); end
  def views(options = T.unsafe(nil)); end
  def views_per_playlist_start(options = T.unsafe(nil)); end

  private

  def all_average_time_in_playlist; end
  def all_average_view_duration; end
  def all_estimated_minutes_watched; end
  def all_playlist_starts; end
  def all_viewer_percentage; end
  def all_views; end
  def all_views_per_playlist_start; end
  def playlist_item_params(video_id, params = T.unsafe(nil)); end
  def range_average_time_in_playlist(date_range, dimension, country, state, videos, historical); end
  def range_average_view_duration(date_range, dimension, country, state, videos, historical); end
  def range_estimated_minutes_watched(date_range, dimension, country, state, videos, historical); end
  def range_playlist_starts(date_range, dimension, country, state, videos, historical); end
  def range_viewer_percentage(date_range, dimension, country, state, videos, historical); end
  def range_views(date_range, dimension, country, state, videos, historical); end
  def range_views_per_playlist_start(date_range, dimension, country, state, videos, historical); end
  def update_params; end
  def update_parts; end
end

class Yt::Models::PlaylistItem < ::Yt::Models::Resource
  def initialize(options = T.unsafe(nil)); end

  def channel_id(*_arg0, &_arg1); end
  def channel_title(*_arg0, &_arg1); end
  def delete(options = T.unsafe(nil)); end
  def description(*_arg0, &_arg1); end
  def exists?; end
  def playlist_id(*_arg0, &_arg1); end
  def position; end
  def published_at(*_arg0, &_arg1); end
  def thumbnail_url(*_arg0, &_arg1); end
  def title(*_arg0, &_arg1); end
  def update(attributes = T.unsafe(nil)); end
  def video; end
  def video_id; end

  private

  def delete_params; end
  def resource_id; end
  def update_parts; end
end

class Yt::Models::Policy < ::Yt::Models::Base
  def initialize(options = T.unsafe(nil)); end

  def description; end
  def id; end
  def name; end
  def rules; end
  def updated_at; end
end

class Yt::Models::PolicyRule < ::Yt::Models::Base
  def initialize(options = T.unsafe(nil)); end

  def action; end
  def conditions; end
  def excluded_territories; end
  def included_territories; end
  def match_duration; end
  def match_percent; end
  def reference_duration; end
  def reference_percent; end
  def subaction; end

  private

  def low_and_high(range); end
  def match_duration_list; end
  def match_percent_list; end
  def reference_duration_list; end
  def reference_percent_list; end
  def territories; end
  def territories_object; end
  def territories_type; end
end

class Yt::Models::Rating < ::Yt::Models::Base
  def initialize(options = T.unsafe(nil)); end

  def rating; end
  def set(new_rating); end

  private

  def update_params; end
end

class Yt::Models::Reference < ::Yt::Models::Base
  def initialize(options = T.unsafe(nil)); end

  def activating?; end
  def active?; end
  def asset_id; end
  def audio?; end
  def audioswap_enabled?; end
  def audiovisual?; end
  def checking?; end
  def claim_id; end
  def computing_fingerprint?; end
  def content_type; end
  def delete; end
  def deleted?; end
  def duplicate_leader; end
  def duplicate_on_hold?; end
  def id; end
  def ignore_fp_match?; end
  def inactive?; end
  def length; end
  def live_streaming_processing?; end
  def status; end
  def status_reason; end
  def urgent?; end
  def urgent_reference_processing?; end
  def video?; end
  def video_id; end

  private

  def update_params; end
end

class Yt::Models::Resource < ::Yt::Models::Base
  def initialize(options = T.unsafe(nil)); end

  def auth; end
  def id; end
  def kind; end
  def privacy_status(*_arg0, &_arg1); end
  def private?; end
  def public?; end
  def snippet; end
  def snippets; end
  def status; end
  def statuses; end
  def unlisted?; end
  def update(attributes = T.unsafe(nil)); end

  private

  def build_update_body(attributes = T.unsafe(nil)); end
  def build_update_body_part(name, part, attributes = T.unsafe(nil)); end
  def camelize(value); end
  def delete_params; end
  def ensure_complete_snippet(attribute); end
  def fetch_channel_id; end
  def find_pattern_match; end
  def patterns; end
  def should_include_part_in_update?(part, attributes = T.unsafe(nil)); end
  def update_params; end
end

Yt::Models::Resource::CHANNEL_PATTERNS = T.let(T.unsafe(nil), Array)
Yt::Models::Resource::PLAYLIST_PATTERNS = T.let(T.unsafe(nil), Array)
Yt::Models::Resource::VIDEO_PATTERNS = T.let(T.unsafe(nil), Array)

class Yt::Models::ResumableSession < ::Yt::Models::Base
  def initialize(options = T.unsafe(nil)); end

  def update(params = T.unsafe(nil)); end
  def upload_thumbnail(file); end

  private

  def session_params; end
  def update_params; end
end

class Yt::Models::Revocation < ::Yt::Models::Base
  def initialize(options = T.unsafe(nil)); end
end

class Yt::Models::RightOwner < ::Yt::Models::Base
  def initialize(options = T.unsafe(nil)); end

  def everywhere?; end
  def excluded_territories; end
  def included_territories; end
  def owner; end
  def publisher; end
  def ratio; end
  def territories; end
  def type; end
end

class Yt::Models::Snippet < ::Yt::Models::Base
  def initialize(options = T.unsafe(nil)); end

  def author_display_name; end
  def can_reply?; end
  def category_id; end
  def channel_id; end
  def channel_title; end
  def complete?; end
  def data; end
  def description; end
  def like_count; end
  def live_broadcast_content; end
  def parent_id; end
  def playlist_id; end
  def position; end
  def public?; end
  def published_at; end
  def resource_id; end
  def tags; end
  def text_display; end
  def thumbnail_url(size = T.unsafe(nil)); end
  def thumbnails; end
  def title; end
  def top_level_comment; end
  def total_reply_count; end
  def updated_at; end
  def video_id; end
end

class Yt::Models::StatisticsSet < ::Yt::Models::Base
  def initialize(options = T.unsafe(nil)); end

  def comment_count; end
  def data; end
  def dislike_count; end
  def favorite_count; end
  def hidden_subscriber_count; end
  def like_count; end
  def subscriber_count; end
  def video_count; end
  def view_count; end
end

class Yt::Models::Status < ::Yt::Models::Base
  def initialize(options = T.unsafe(nil)); end

  def data; end
  def embeddable; end
  def failure_reason; end
  def license; end
  def made_for_kids; end
  def privacy_status; end
  def public_stats_viewable; end
  def publish_at; end
  def rejection_reason; end
  def self_declared_made_for_kids; end
  def upload_status; end
end

class Yt::Models::Subscription < ::Yt::Models::Base
  def initialize(options = T.unsafe(nil)); end

  def delete(options = T.unsafe(nil), &block); end
  def exists?; end
  def id; end

  private

  def delete_params; end
end

class Yt::Models::Timestamp < ::Time
  def as_json(options = T.unsafe(nil)); end
end

class Yt::Models::URL
  def initialize(text); end

  def id; end
  def kind; end
  def resource(options = T.unsafe(nil)); end
end

class Yt::Models::UserInfo < ::Yt::Models::Base
  def initialize(options = T.unsafe(nil)); end

  def email; end
  def family_name; end
  def gender; end
  def given_name; end
  def hd; end
  def id; end
  def link; end
  def locale; end
  def name; end
  def picture; end
  def verified_email; end
end

class Yt::Models::Video < ::Yt::Models::Resource
  def initialize(options = T.unsafe(nil)); end

  def aborted?; end
  def actual_end_time(*_arg0, &_arg1); end
  def actual_start_time(*_arg0, &_arg1); end
  def ad_formats(*_arg0, &_arg1); end
  def ad_impressions(options = T.unsafe(nil)); end
  def advertising_options_set; end
  def advertising_options_sets; end
  def age_restricted?; end
  def annotation_click_through_rate(options = T.unsafe(nil)); end
  def annotation_clicks(options = T.unsafe(nil)); end
  def annotation_close_rate(options = T.unsafe(nil)); end
  def annotations; end
  def average_view_duration(options = T.unsafe(nil)); end
  def average_view_percentage(options = T.unsafe(nil)); end
  def belongs_to_closed_account?; end
  def belongs_to_suspended_account?; end
  def captioned?; end
  def card_click_rate(options = T.unsafe(nil)); end
  def card_clicks(options = T.unsafe(nil)); end
  def card_impressions(options = T.unsafe(nil)); end
  def card_teaser_click_rate(options = T.unsafe(nil)); end
  def card_teaser_clicks(options = T.unsafe(nil)); end
  def card_teaser_impressions(options = T.unsafe(nil)); end
  def category_id; end
  def category_title; end
  def channel_id(*_arg0, &_arg1); end
  def channel_title(*_arg0, &_arg1); end
  def channel_url; end
  def claim; end
  def claimed?; end
  def comment_count(*_arg0, &_arg1); end
  def comment_threads; end
  def comments(options = T.unsafe(nil)); end
  def concurrent_viewers(*_arg0, &_arg1); end
  def container(*_arg0, &_arg1); end
  def content_detail; end
  def content_details; end
  def delete(options = T.unsafe(nil)); end
  def deleted?; end
  def description(*_arg0, &_arg1); end
  def dislike; end
  def dislike_count(*_arg0, &_arg1); end
  def dislikes(options = T.unsafe(nil)); end
  def duplicate?; end
  def duration(*_arg0, &_arg1); end
  def embed_html(*_arg0, &_arg1); end
  def embeddable?; end
  def empty?; end
  def estimated_minutes_watched(options = T.unsafe(nil)); end
  def estimated_revenue(options = T.unsafe(nil)); end
  def exists?; end
  def failed?; end
  def favorite_count(*_arg0, &_arg1); end
  def file_detail; end
  def file_details; end
  def file_name(*_arg0, &_arg1); end
  def file_size(*_arg0, &_arg1); end
  def file_type(*_arg0, &_arg1); end
  def has_failed_conversion?; end
  def has_public_stats_viewable?; end
  def hd?; end
  def inappropriate?; end
  def infringes_copyright?; end
  def infringes_trademark?; end
  def invalid?; end
  def length(*_arg0, &_arg1); end
  def license(*_arg0, &_arg1); end
  def licensed?; end
  def licensed_as_creative_commons?; end
  def licensed_as_standard_youtube?; end
  def like; end
  def like_count(*_arg0, &_arg1); end
  def liked?; end
  def likes(options = T.unsafe(nil)); end
  def live_broadcast_content(*_arg0, &_arg1); end
  def live_streaming_detail; end
  def live_streaming_details; end
  def made_for_kids?; end
  def monetized_playbacks(options = T.unsafe(nil)); end
  def playback_based_cpm(options = T.unsafe(nil)); end
  def player; end
  def players; end
  def processed?; end
  def published_at(*_arg0, &_arg1); end
  def rating; end
  def ratings; end
  def rejected?; end
  def reports(options = T.unsafe(nil)); end
  def reports_params; end
  def resumable_sessions; end
  def scheduled?; end
  def scheduled_at; end
  def scheduled_end_time(*_arg0, &_arg1); end
  def scheduled_start_time(*_arg0, &_arg1); end
  def self_declared_made_for_kids?; end
  def shares(options = T.unsafe(nil)); end
  def statistics_set; end
  def statistics_sets; end
  def stereoscopic?; end
  def subscribers_gained(options = T.unsafe(nil)); end
  def subscribers_lost(options = T.unsafe(nil)); end
  def tags; end
  def thumbnail_url(*_arg0, &_arg1); end
  def title(*_arg0, &_arg1); end
  def too_long?; end
  def too_small?; end
  def unlike; end
  def update(attributes = T.unsafe(nil)); end
  def upload_content_type; end
  def upload_params; end
  def upload_path; end
  def upload_thumbnail(path_or_url); end
  def uploading?; end
  def uses_unsupported_codec?; end
  def video_categories; end
  def video_category; end
  def videos_added_to_playlists(options = T.unsafe(nil)); end
  def videos_removed_from_playlists(options = T.unsafe(nil)); end
  def view_count(*_arg0, &_arg1); end
  def viewer_percentage(options = T.unsafe(nil)); end
  def views(options = T.unsafe(nil)); end
  def violates_terms_of_use?; end

  private

  def all_ad_impressions; end
  def all_annotation_click_through_rate; end
  def all_annotation_clicks; end
  def all_annotation_close_rate; end
  def all_average_view_duration; end
  def all_average_view_percentage; end
  def all_card_click_rate; end
  def all_card_clicks; end
  def all_card_impressions; end
  def all_card_teaser_click_rate; end
  def all_card_teaser_clicks; end
  def all_card_teaser_impressions; end
  def all_comments; end
  def all_dislikes; end
  def all_estimated_minutes_watched; end
  def all_estimated_revenue; end
  def all_likes; end
  def all_monetized_playbacks; end
  def all_playback_based_cpm; end
  def all_shares; end
  def all_subscribers_gained; end
  def all_subscribers_lost; end
  def all_videos_added_to_playlists; end
  def all_videos_removed_from_playlists; end
  def all_viewer_percentage; end
  def all_views; end
  def build_update_body_part(name, part, attributes = T.unsafe(nil)); end
  def range_ad_impressions(date_range, dimension, country, state, videos, historical); end
  def range_annotation_click_through_rate(date_range, dimension, country, state, videos, historical); end
  def range_annotation_clicks(date_range, dimension, country, state, videos, historical); end
  def range_annotation_close_rate(date_range, dimension, country, state, videos, historical); end
  def range_average_view_duration(date_range, dimension, country, state, videos, historical); end
  def range_average_view_percentage(date_range, dimension, country, state, videos, historical); end
  def range_card_click_rate(date_range, dimension, country, state, videos, historical); end
  def range_card_clicks(date_range, dimension, country, state, videos, historical); end
  def range_card_impressions(date_range, dimension, country, state, videos, historical); end
  def range_card_teaser_click_rate(date_range, dimension, country, state, videos, historical); end
  def range_card_teaser_clicks(date_range, dimension, country, state, videos, historical); end
  def range_card_teaser_impressions(date_range, dimension, country, state, videos, historical); end
  def range_comments(date_range, dimension, country, state, videos, historical); end
  def range_dislikes(date_range, dimension, country, state, videos, historical); end
  def range_estimated_minutes_watched(date_range, dimension, country, state, videos, historical); end
  def range_estimated_revenue(date_range, dimension, country, state, videos, historical); end
  def range_likes(date_range, dimension, country, state, videos, historical); end
  def range_monetized_playbacks(date_range, dimension, country, state, videos, historical); end
  def range_playback_based_cpm(date_range, dimension, country, state, videos, historical); end
  def range_shares(date_range, dimension, country, state, videos, historical); end
  def range_subscribers_gained(date_range, dimension, country, state, videos, historical); end
  def range_subscribers_lost(date_range, dimension, country, state, videos, historical); end
  def range_videos_added_to_playlists(date_range, dimension, country, state, videos, historical); end
  def range_videos_removed_from_playlists(date_range, dimension, country, state, videos, historical); end
  def range_viewer_percentage(date_range, dimension, country, state, videos, historical); end
  def range_views(date_range, dimension, country, state, videos, historical); end
  def update_params; end
  def update_parts; end
end

class Yt::Models::VideoCategory < ::Yt::Models::Resource
  def data(*_arg0, &_arg1); end
  def title(*_arg0, &_arg1); end
end

class Yt::Models::VideoGroup < ::Yt::Models::Base
  def initialize(options = T.unsafe(nil)); end

  def ad_impressions(options = T.unsafe(nil)); end
  def all_channel_ids; end
  def all_video_ids; end
  def annotation_click_through_rate(options = T.unsafe(nil)); end
  def annotation_clicks(options = T.unsafe(nil)); end
  def annotation_close_rate(options = T.unsafe(nil)); end
  def auth; end
  def average_view_duration(options = T.unsafe(nil)); end
  def average_view_percentage(options = T.unsafe(nil)); end
  def card_click_rate(options = T.unsafe(nil)); end
  def card_clicks(options = T.unsafe(nil)); end
  def card_impressions(options = T.unsafe(nil)); end
  def card_teaser_click_rate(options = T.unsafe(nil)); end
  def card_teaser_clicks(options = T.unsafe(nil)); end
  def card_teaser_impressions(options = T.unsafe(nil)); end
  def channels; end
  def comments(options = T.unsafe(nil)); end
  def dislikes(options = T.unsafe(nil)); end
  def estimated_minutes_watched(options = T.unsafe(nil)); end
  def estimated_revenue(options = T.unsafe(nil)); end
  def group_info; end
  def group_infos; end
  def group_items; end
  def id; end
  def item_count(*_arg0, &_arg1); end
  def likes(options = T.unsafe(nil)); end
  def monetized_playbacks(options = T.unsafe(nil)); end
  def playback_based_cpm(options = T.unsafe(nil)); end
  def published_at(*_arg0, &_arg1); end
  def reports(options = T.unsafe(nil)); end
  def reports_params; end
  def shares(options = T.unsafe(nil)); end
  def subscribers_gained(options = T.unsafe(nil)); end
  def subscribers_lost(options = T.unsafe(nil)); end
  def title(*_arg0, &_arg1); end
  def videos; end
  def videos_added_to_playlists(options = T.unsafe(nil)); end
  def videos_removed_from_playlists(options = T.unsafe(nil)); end
  def viewer_percentage(options = T.unsafe(nil)); end
  def views(options = T.unsafe(nil)); end

  private

  def all_ad_impressions; end
  def all_annotation_click_through_rate; end
  def all_annotation_clicks; end
  def all_annotation_close_rate; end
  def all_average_view_duration; end
  def all_average_view_percentage; end
  def all_card_click_rate; end
  def all_card_clicks; end
  def all_card_impressions; end
  def all_card_teaser_click_rate; end
  def all_card_teaser_clicks; end
  def all_card_teaser_impressions; end
  def all_comments; end
  def all_dislikes; end
  def all_estimated_minutes_watched; end
  def all_estimated_revenue; end
  def all_likes; end
  def all_monetized_playbacks; end
  def all_playback_based_cpm; end
  def all_shares; end
  def all_subscribers_gained; end
  def all_subscribers_lost; end
  def all_videos_added_to_playlists; end
  def all_videos_removed_from_playlists; end
  def all_viewer_percentage; end
  def all_views; end
  def range_ad_impressions(date_range, dimension, country, state, videos, historical); end
  def range_annotation_click_through_rate(date_range, dimension, country, state, videos, historical); end
  def range_annotation_clicks(date_range, dimension, country, state, videos, historical); end
  def range_annotation_close_rate(date_range, dimension, country, state, videos, historical); end
  def range_average_view_duration(date_range, dimension, country, state, videos, historical); end
  def range_average_view_percentage(date_range, dimension, country, state, videos, historical); end
  def range_card_click_rate(date_range, dimension, country, state, videos, historical); end
  def range_card_clicks(date_range, dimension, country, state, videos, historical); end
  def range_card_impressions(date_range, dimension, country, state, videos, historical); end
  def range_card_teaser_click_rate(date_range, dimension, country, state, videos, historical); end
  def range_card_teaser_clicks(date_range, dimension, country, state, videos, historical); end
  def range_card_teaser_impressions(date_range, dimension, country, state, videos, historical); end
  def range_comments(date_range, dimension, country, state, videos, historical); end
  def range_dislikes(date_range, dimension, country, state, videos, historical); end
  def range_estimated_minutes_watched(date_range, dimension, country, state, videos, historical); end
  def range_estimated_revenue(date_range, dimension, country, state, videos, historical); end
  def range_likes(date_range, dimension, country, state, videos, historical); end
  def range_monetized_playbacks(date_range, dimension, country, state, videos, historical); end
  def range_playback_based_cpm(date_range, dimension, country, state, videos, historical); end
  def range_shares(date_range, dimension, country, state, videos, historical); end
  def range_subscribers_gained(date_range, dimension, country, state, videos, historical); end
  def range_subscribers_lost(date_range, dimension, country, state, videos, historical); end
  def range_videos_added_to_playlists(date_range, dimension, country, state, videos, historical); end
  def range_videos_removed_from_playlists(date_range, dimension, country, state, videos, historical); end
  def range_viewer_percentage(date_range, dimension, country, state, videos, historical); end
  def range_views(date_range, dimension, country, state, videos, historical); end
end

class Yt::Request
  def initialize(options = T.unsafe(nil)); end

  def as_curl; end
  def run; end

  private

  def camelize_keys!(hash); end
  def error_message; end
  def exceeded_quota?; end
  def extra_server_errors; end
  def http_request; end
  def matches_expectations?; end
  def parse_response!; end
  def refresh_token_and_retry?; end
  def response; end
  def response_error; end
  def retry_time; end
  def run_again?; end
  def send_http_request; end
  def server_error?; end
  def server_errors; end
  def set_request_body!(request); end
  def set_request_headers!(request); end
  def sleep_and_retry?(max_retries = T.unsafe(nil)); end
  def unauthorized?; end
  def uri; end
end

Yt::US_STATES = T.let(T.unsafe(nil), ActiveSupport::HashWithIndifferentAccess)
Yt::VERSION = T.let(T.unsafe(nil), String)
