# typed: strict

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `attr_encrypted` gem.
# Please instead update this file by running `bin/tapioca gem attr_encrypted`.

module AttrEncrypted
  def attr_encrypted(*attributes); end
  def attr_encrypted?(attribute); end
  def attr_encrypted_options; end
  def attr_encryptor(*attributes); end
  def decrypt(attribute, encrypted_value, options = T.unsafe(nil)); end
  def encrypt(attribute, value, options = T.unsafe(nil)); end
  def encrypted_attributes; end
  def method_missing(method, *arguments, &block); end
  def not_empty?(value); end

  protected

  def attribute_instance_methods_as_symbols; end
  def attribute_instance_methods_as_symbols_available?; end

  private

  def attr_encrypted_default_options; end

  class << self
    def extended(base); end
  end
end

module AttrEncrypted::Adapters; end

module AttrEncrypted::Adapters::ActiveRecord
  protected

  def attr_encrypted(*attrs); end
  def attribute_instance_methods_as_symbols; end
  def attribute_instance_methods_as_symbols_available?; end
  def method_missing_with_attr_encrypted(method, *args, &block); end

  class << self
    def extended(base); end
  end
end

module AttrEncrypted::InstanceMethods
  def decrypt(attribute, encrypted_value); end
  def encrypt(attribute, value); end
  def encrypted_attributes; end

  protected

  def decode_salt_if_encoded(salt, encoding); end
  def evaluate_attr_encrypted_option(option); end
  def evaluated_attr_encrypted_options_for(attribute); end
  def generate_iv(algorithm); end
  def load_iv_for_attribute(attribute, options); end
  def load_salt_for_attribute(attribute, options); end
  def prefix_and_encode_salt(salt, encoding); end
end

module AttrEncrypted::Version
  class << self
    def string; end
  end
end

AttrEncrypted::Version::MAJOR = T.let(T.unsafe(nil), Integer)
AttrEncrypted::Version::MINOR = T.let(T.unsafe(nil), Integer)
AttrEncrypted::Version::PATCH = T.let(T.unsafe(nil), Integer)
