# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `stripe` gem.
# Please instead update this file by running `bin/tapioca gem stripe`.

module Stripe
  class << self
    def api_base(*args, &block); end
    def api_base=(*args, &block); end
    def api_key(*args, &block); end
    def api_key=(*args, &block); end
    def api_version(*args, &block); end
    def api_version=(*args, &block); end
    def app_info; end
    def app_info=(info); end
    def ca_bundle_path(*args, &block); end
    def ca_bundle_path=(*args, &block); end
    def ca_store(*args, &block); end
    def client_id(*args, &block); end
    def client_id=(*args, &block); end
    def config; end
    def connect_base(*args, &block); end
    def connect_base=(*args, &block); end
    def enable_telemetry=(*args, &block); end
    def enable_telemetry?(*args, &block); end
    def initial_network_retry_delay(*args, &block); end
    def log_level(*args, &block); end
    def log_level=(*args, &block); end
    def logger(*args, &block); end
    def logger=(*args, &block); end
    def max_network_retries(*args, &block); end
    def max_network_retries=(*args, &block); end
    def max_network_retry_delay(*args, &block); end
    def open_timeout(*args, &block); end
    def open_timeout=(*args, &block); end
    def proxy(*args, &block); end
    def proxy=(*args, &block); end
    def read_timeout(*args, &block); end
    def read_timeout=(*args, &block); end
    def set_app_info(name, partner_id: T.unsafe(nil), url: T.unsafe(nil), version: T.unsafe(nil)); end
    def stripe_account(*args, &block); end
    def stripe_account=(*args, &block); end
    def uploads_base(*args, &block); end
    def uploads_base=(*args, &block); end
    def verify_ssl_certs(*args, &block); end
    def verify_ssl_certs=(*args, &block); end
    def write_timeout(*args, &block); end
    def write_timeout=(*args, &block); end
  end
end

class Stripe::APIConnectionError < ::Stripe::StripeError; end
class Stripe::APIError < ::Stripe::StripeError; end
module Stripe::APIOperations; end

module Stripe::APIOperations::Create
  def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

module Stripe::APIOperations::Delete
  mixes_in_class_methods ::Stripe::APIOperations::Delete::ClassMethods

  def delete(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  class << self
    def included(base); end
  end
end

module Stripe::APIOperations::Delete::ClassMethods
  def delete(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

module Stripe::APIOperations::List
  def list(filters = T.unsafe(nil), opts = T.unsafe(nil)); end
end

module Stripe::APIOperations::NestedResource
  def nested_resource_class_methods(resource, path: T.unsafe(nil), operations: T.unsafe(nil), resource_plural: T.unsafe(nil)); end
end

module Stripe::APIOperations::Request
  mixes_in_class_methods ::Stripe::APIOperations::Request::ClassMethods

  protected

  def execute_resource_request(method, url, params = T.unsafe(nil), opts = T.unsafe(nil)); end
  def execute_resource_request_stream(method, url, params = T.unsafe(nil), opts = T.unsafe(nil), &read_body_chunk_block); end
  def request(method, url, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  class << self
    def included(base); end
  end
end

module Stripe::APIOperations::Request::ClassMethods
  def execute_resource_request(method, url, params = T.unsafe(nil), opts = T.unsafe(nil)); end
  def execute_resource_request_stream(method, url, params = T.unsafe(nil), opts = T.unsafe(nil), &read_body_chunk_block); end
  def request(method, url, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  private

  def error_on_invalid_params(params); end
  def error_on_non_string_user_opts(opts); end
  def execute_resource_request_internal(client_request_method_sym, method, url, params, opts, &read_body_chunk_block); end
  def warn_on_opts_in_params(params); end
end

module Stripe::APIOperations::Save
  mixes_in_class_methods ::Stripe::APIOperations::Save::ClassMethods

  def save(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  private

  def save_url; end

  class << self
    def included(base); end
  end
end

module Stripe::APIOperations::Save::ClassMethods
  def update(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

class Stripe::APIResource < ::Stripe::StripeObject
  include ::Stripe::APIOperations::Request
  extend ::Stripe::APIOperations::Request::ClassMethods

  def refresh; end
  def resource_url; end
  def save_with_parent; end
  def save_with_parent=(_arg0); end

  protected

  def request_stream(method:, path:, params:, opts: T.unsafe(nil), &read_body_chunk_block); end
  def request_stripe_object(method:, path:, params:, opts: T.unsafe(nil)); end

  class << self
    def class_name; end
    def custom_method(name, http_verb:, http_path: T.unsafe(nil)); end
    def resource_url; end
    def retrieve(id, opts = T.unsafe(nil)); end
    def save_nested_resource(name); end
  end
end

class Stripe::Account < ::Stripe::APIResource
  include ::Stripe::APIOperations::Delete
  include ::Stripe::APIOperations::Save
  extend ::Gem::Deprecate
  extend ::Stripe::APIOperations::Create
  extend ::Stripe::APIOperations::Delete::ClassMethods
  extend ::Stripe::APIOperations::List
  extend ::Stripe::APIOperations::Save::ClassMethods
  extend ::Stripe::APIOperations::NestedResource

  def deauthorize(client_id = T.unsafe(nil), opts = T.unsafe(nil)); end
  def external_account=(value); end
  def legal_entity; end
  def legal_entity=(_legal_entity); end
  def persons(params = T.unsafe(nil), opts = T.unsafe(nil)); end
  def reject(params = T.unsafe(nil), opts = T.unsafe(nil)); end
  def resource_url; end
  def serialize_params(options = T.unsafe(nil)); end
  def serialize_params_account(_obj, update_hash, options = T.unsafe(nil)); end

  private

  def serialize_additional_owners(legal_entity, additional_owners); end

  class << self
    def capabilitys_url(id, nested_id = T.unsafe(nil)); end
    def create_external_account(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end
    def create_login_link(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end
    def create_person(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end
    def delete_external_account(id, nested_id, params = T.unsafe(nil), opts = T.unsafe(nil)); end
    def delete_person(id, nested_id, params = T.unsafe(nil), opts = T.unsafe(nil)); end
    def external_accounts_url(id, nested_id = T.unsafe(nil)); end
    def list_capabilities(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end
    def list_external_accounts(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end
    def list_persons(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end
    def login_links_url(id, nested_id = T.unsafe(nil)); end
    def persons_url(id, nested_id = T.unsafe(nil)); end
    def protected_fields; end
    def reject(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end
    def retrieve(id = T.unsafe(nil), opts = T.unsafe(nil)); end
    def retrieve_capability(id, nested_id, opts = T.unsafe(nil)); end
    def retrieve_external_account(id, nested_id, opts = T.unsafe(nil)); end
    def retrieve_person(id, nested_id, opts = T.unsafe(nil)); end
    def update_capability(id, nested_id, params = T.unsafe(nil), opts = T.unsafe(nil)); end
    def update_external_account(id, nested_id, params = T.unsafe(nil), opts = T.unsafe(nil)); end
    def update_person(id, nested_id, params = T.unsafe(nil), opts = T.unsafe(nil)); end
  end
end

Stripe::Account::OBJECT_NAME = T.let(T.unsafe(nil), String)

class Stripe::AccountLink < ::Stripe::APIResource
  extend ::Stripe::APIOperations::Create
end

Stripe::AccountLink::OBJECT_NAME = T.let(T.unsafe(nil), String)

class Stripe::AlipayAccount < ::Stripe::APIResource
  include ::Stripe::APIOperations::Save
  include ::Stripe::APIOperations::Delete
  extend ::Stripe::APIOperations::Save::ClassMethods
  extend ::Stripe::APIOperations::Delete::ClassMethods

  def resource_url; end

  class << self
    def retrieve(_id, _opts = T.unsafe(nil)); end
    def update(_id, _params = T.unsafe(nil), _opts = T.unsafe(nil)); end
  end
end

Stripe::AlipayAccount::OBJECT_NAME = T.let(T.unsafe(nil), String)

class Stripe::ApplePayDomain < ::Stripe::APIResource
  include ::Stripe::APIOperations::Delete
  extend ::Stripe::APIOperations::Create
  extend ::Stripe::APIOperations::Delete::ClassMethods
  extend ::Stripe::APIOperations::List

  class << self
    def resource_url; end
  end
end

Stripe::ApplePayDomain::OBJECT_NAME = T.let(T.unsafe(nil), String)

class Stripe::ApplicationFee < ::Stripe::APIResource
  extend ::Stripe::APIOperations::List
  extend ::Stripe::APIOperations::NestedResource

  class << self
    def create_refund(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end
    def list_refunds(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end
    def refunds_url(id, nested_id = T.unsafe(nil)); end
    def retrieve_refund(id, nested_id, opts = T.unsafe(nil)); end
    def update_refund(id, nested_id, params = T.unsafe(nil), opts = T.unsafe(nil)); end
  end
end

Stripe::ApplicationFee::OBJECT_NAME = T.let(T.unsafe(nil), String)

class Stripe::ApplicationFeeRefund < ::Stripe::APIResource
  include ::Stripe::APIOperations::Save
  extend ::Stripe::APIOperations::List
  extend ::Stripe::APIOperations::Save::ClassMethods

  def resource_url; end

  class << self
    def retrieve(_id, _api_key = T.unsafe(nil)); end
    def update(_id, _params = T.unsafe(nil), _opts = T.unsafe(nil)); end
  end
end

Stripe::ApplicationFeeRefund::OBJECT_NAME = T.let(T.unsafe(nil), String)
class Stripe::AuthenticationError < ::Stripe::StripeError; end
class Stripe::Balance < ::Stripe::SingletonAPIResource; end
Stripe::Balance::OBJECT_NAME = T.let(T.unsafe(nil), String)

class Stripe::BalanceTransaction < ::Stripe::APIResource
  extend ::Stripe::APIOperations::List
end

Stripe::BalanceTransaction::OBJECT_NAME = T.let(T.unsafe(nil), String)

class Stripe::BankAccount < ::Stripe::APIResource
  include ::Stripe::APIOperations::Delete
  include ::Stripe::APIOperations::Save
  extend ::Stripe::APIOperations::Delete::ClassMethods
  extend ::Stripe::APIOperations::List
  extend ::Stripe::APIOperations::Save::ClassMethods

  def resource_url; end
  def verify(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  class << self
    def retrieve(_id, _opts = T.unsafe(nil)); end
    def update(_id, _params = T.unsafe(nil), _opts = T.unsafe(nil)); end
  end
end

Stripe::BankAccount::OBJECT_NAME = T.let(T.unsafe(nil), String)
module Stripe::BillingPortal; end

class Stripe::BillingPortal::Configuration < ::Stripe::APIResource
  include ::Stripe::APIOperations::Save
  extend ::Stripe::APIOperations::Create
  extend ::Stripe::APIOperations::List
  extend ::Stripe::APIOperations::Save::ClassMethods
end

Stripe::BillingPortal::Configuration::OBJECT_NAME = T.let(T.unsafe(nil), String)

class Stripe::BillingPortal::Session < ::Stripe::APIResource
  extend ::Stripe::APIOperations::Create
end

Stripe::BillingPortal::Session::OBJECT_NAME = T.let(T.unsafe(nil), String)

class Stripe::BitcoinReceiver < ::Stripe::APIResource
  extend ::Stripe::APIOperations::List

  def resource_url; end

  class << self
    def resource_url; end
  end
end

Stripe::BitcoinReceiver::OBJECT_NAME = T.let(T.unsafe(nil), String)

class Stripe::BitcoinTransaction < ::Stripe::APIResource
  extend ::Stripe::APIOperations::List

  class << self
    def resource_url; end
  end
end

Stripe::BitcoinTransaction::OBJECT_NAME = T.let(T.unsafe(nil), String)

class Stripe::Capability < ::Stripe::APIResource
  include ::Stripe::APIOperations::Save
  extend ::Stripe::APIOperations::List
  extend ::Stripe::APIOperations::Save::ClassMethods

  def resource_url; end

  class << self
    def retrieve(_id, _opts = T.unsafe(nil)); end
    def update(_id, _params = T.unsafe(nil), _opts = T.unsafe(nil)); end
  end
end

Stripe::Capability::OBJECT_NAME = T.let(T.unsafe(nil), String)

class Stripe::Card < ::Stripe::APIResource
  include ::Stripe::APIOperations::Delete
  include ::Stripe::APIOperations::Save
  extend ::Stripe::APIOperations::Delete::ClassMethods
  extend ::Stripe::APIOperations::List
  extend ::Stripe::APIOperations::Save::ClassMethods

  def resource_url; end

  class << self
    def retrieve(_id, _opts = T.unsafe(nil)); end
    def update(_id, _params = T.unsafe(nil), _opts = T.unsafe(nil)); end
  end
end

Stripe::Card::OBJECT_NAME = T.let(T.unsafe(nil), String)

class Stripe::CardError < ::Stripe::StripeError
  def initialize(message, param, code: T.unsafe(nil), http_status: T.unsafe(nil), http_body: T.unsafe(nil), json_body: T.unsafe(nil), http_headers: T.unsafe(nil)); end

  def param; end
end

class Stripe::Charge < ::Stripe::APIResource
  include ::Stripe::APIOperations::Save
  extend ::Stripe::APIOperations::Create
  extend ::Stripe::APIOperations::List
  extend ::Stripe::APIOperations::Save::ClassMethods

  def capture(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  class << self
    def capture(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end
  end
end

Stripe::Charge::OBJECT_NAME = T.let(T.unsafe(nil), String)
module Stripe::Checkout; end

class Stripe::Checkout::Session < ::Stripe::APIResource
  extend ::Stripe::APIOperations::Create
  extend ::Stripe::APIOperations::List
  extend ::Stripe::APIOperations::NestedResource

  class << self
    def line_items_url(id, nested_id = T.unsafe(nil)); end
    def list_line_items(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end
  end
end

Stripe::Checkout::Session::OBJECT_NAME = T.let(T.unsafe(nil), String)

class Stripe::ConnectionManager
  def initialize(config = T.unsafe(nil)); end

  def clear; end
  def config; end
  def connection_for(uri); end
  def execute_request(method, uri, body: T.unsafe(nil), headers: T.unsafe(nil), query: T.unsafe(nil), &block); end
  def last_used; end

  private

  def create_connection(uri); end
  def proxy_parts; end
  def warn_ssl_verify_none; end
end

class Stripe::CountrySpec < ::Stripe::APIResource
  extend ::Stripe::APIOperations::List
end

Stripe::CountrySpec::OBJECT_NAME = T.let(T.unsafe(nil), String)

class Stripe::Coupon < ::Stripe::APIResource
  include ::Stripe::APIOperations::Delete
  include ::Stripe::APIOperations::Save
  extend ::Stripe::APIOperations::Create
  extend ::Stripe::APIOperations::Delete::ClassMethods
  extend ::Stripe::APIOperations::List
  extend ::Stripe::APIOperations::Save::ClassMethods
end

Stripe::Coupon::OBJECT_NAME = T.let(T.unsafe(nil), String)

class Stripe::CreditNote < ::Stripe::APIResource
  include ::Stripe::APIOperations::Save
  extend ::Stripe::APIOperations::Create
  extend ::Stripe::APIOperations::List
  extend ::Stripe::APIOperations::Save::ClassMethods

  def void_credit_note(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  class << self
    def list_preview_line_items(params, opts = T.unsafe(nil)); end
    def preview(params, opts = T.unsafe(nil)); end
    def void_credit_note(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end
  end
end

Stripe::CreditNote::OBJECT_NAME = T.let(T.unsafe(nil), String)
class Stripe::CreditNoteLineItem < ::Stripe::StripeObject; end
Stripe::CreditNoteLineItem::OBJECT_NAME = T.let(T.unsafe(nil), String)

class Stripe::Customer < ::Stripe::APIResource
  include ::Stripe::APIOperations::Delete
  include ::Stripe::APIOperations::Save
  extend ::Stripe::APIOperations::Create
  extend ::Stripe::APIOperations::Delete::ClassMethods
  extend ::Stripe::APIOperations::List
  extend ::Stripe::APIOperations::Save::ClassMethods
  extend ::Stripe::APIOperations::NestedResource

  def delete_discount; end
  def list_payment_methods(params = T.unsafe(nil), opts = T.unsafe(nil)); end
  def source=(value); end

  class << self
    def balance_transactions_url(id, nested_id = T.unsafe(nil)); end
    def create_balance_transaction(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end
    def create_source(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end
    def create_tax_id(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end
    def delete_discount(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end
    def delete_source(id, nested_id, params = T.unsafe(nil), opts = T.unsafe(nil)); end
    def delete_tax_id(id, nested_id, params = T.unsafe(nil), opts = T.unsafe(nil)); end
    def detach_source(id, nested_id, params = T.unsafe(nil), opts = T.unsafe(nil)); end
    def list_balance_transactions(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end
    def list_payment_methods(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end
    def list_sources(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end
    def list_tax_ids(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end
    def retrieve_balance_transaction(id, nested_id, opts = T.unsafe(nil)); end
    def retrieve_source(id, nested_id, opts = T.unsafe(nil)); end
    def retrieve_tax_id(id, nested_id, opts = T.unsafe(nil)); end
    def sources_url(id, nested_id = T.unsafe(nil)); end
    def tax_ids_url(id, nested_id = T.unsafe(nil)); end
    def update_balance_transaction(id, nested_id, params = T.unsafe(nil), opts = T.unsafe(nil)); end
    def update_source(id, nested_id, params = T.unsafe(nil), opts = T.unsafe(nil)); end
  end
end

Stripe::Customer::OBJECT_NAME = T.let(T.unsafe(nil), String)

class Stripe::CustomerBalanceTransaction < ::Stripe::APIResource
  include ::Stripe::APIOperations::Save
  extend ::Stripe::APIOperations::List
  extend ::Stripe::APIOperations::Save::ClassMethods

  def resource_url; end

  class << self
    def retrieve(_id, _opts = T.unsafe(nil)); end
    def update(_id, _params = T.unsafe(nil), _opts = T.unsafe(nil)); end
  end
end

Stripe::CustomerBalanceTransaction::OBJECT_NAME = T.let(T.unsafe(nil), String)
Stripe::DEFAULT_CA_BUNDLE_PATH = T.let(T.unsafe(nil), String)
class Stripe::Discount < ::Stripe::StripeObject; end
Stripe::Discount::OBJECT_NAME = T.let(T.unsafe(nil), String)

class Stripe::Dispute < ::Stripe::APIResource
  include ::Stripe::APIOperations::Save
  extend ::Stripe::APIOperations::List
  extend ::Stripe::APIOperations::Save::ClassMethods

  def close(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  class << self
    def close(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end
  end
end

Stripe::Dispute::OBJECT_NAME = T.let(T.unsafe(nil), String)

class Stripe::EphemeralKey < ::Stripe::APIResource
  include ::Stripe::APIOperations::Delete
  extend ::Stripe::APIOperations::Create
  extend ::Stripe::APIOperations::Delete::ClassMethods

  class << self
    def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end
  end
end

Stripe::EphemeralKey::OBJECT_NAME = T.let(T.unsafe(nil), String)

class Stripe::ErrorObject < ::Stripe::StripeObject
  def charge; end
  def code; end
  def decline_code; end
  def doc_url; end
  def message; end
  def param; end
  def payment_intent; end
  def payment_method; end
  def setup_intent; end
  def source; end
  def type; end
end

class Stripe::Event < ::Stripe::APIResource
  extend ::Stripe::APIOperations::List
end

Stripe::Event::OBJECT_NAME = T.let(T.unsafe(nil), String)

class Stripe::ExchangeRate < ::Stripe::APIResource
  extend ::Stripe::APIOperations::List
end

Stripe::ExchangeRate::OBJECT_NAME = T.let(T.unsafe(nil), String)

class Stripe::File < ::Stripe::APIResource
  extend ::Stripe::APIOperations::Create
  extend ::Stripe::APIOperations::List

  class << self
    def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end
    def resource_url; end
  end
end

Stripe::File::OBJECT_NAME = T.let(T.unsafe(nil), String)
Stripe::File::OBJECT_NAME_ALT = T.let(T.unsafe(nil), String)

class Stripe::FileLink < ::Stripe::APIResource
  include ::Stripe::APIOperations::Save
  extend ::Stripe::APIOperations::Create
  extend ::Stripe::APIOperations::List
  extend ::Stripe::APIOperations::Save::ClassMethods
end

Stripe::FileLink::OBJECT_NAME = T.let(T.unsafe(nil), String)
class Stripe::IdempotencyError < ::Stripe::StripeError; end
module Stripe::Identity; end

class Stripe::Identity::VerificationReport < ::Stripe::APIResource
  extend ::Stripe::APIOperations::List
end

Stripe::Identity::VerificationReport::OBJECT_NAME = T.let(T.unsafe(nil), String)

class Stripe::Identity::VerificationSession < ::Stripe::APIResource
  include ::Stripe::APIOperations::Save
  extend ::Stripe::APIOperations::Create
  extend ::Stripe::APIOperations::List
  extend ::Stripe::APIOperations::Save::ClassMethods

  def cancel(params = T.unsafe(nil), opts = T.unsafe(nil)); end
  def redact(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  class << self
    def cancel(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end
    def redact(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end
  end
end

Stripe::Identity::VerificationSession::OBJECT_NAME = T.let(T.unsafe(nil), String)

class Stripe::Instrumentation
  class << self
    def any_subscribers?(topic); end
    def notify(topic, event); end
    def subscribe(topic, name = T.unsafe(nil), &block); end
    def unsubscribe(topic, name); end

    private

    def subscribers; end
  end
end

class Stripe::Instrumentation::RequestBeginEvent
  def initialize(method:, path:, user_data:); end

  def method; end
  def path; end
  def user_data; end
end

class Stripe::Instrumentation::RequestEndEvent
  def initialize(duration:, http_status:, method:, num_retries:, path:, request_id:, user_data: T.unsafe(nil)); end

  def duration; end
  def http_status; end
  def method; end
  def num_retries; end
  def path; end
  def request_id; end
  def user_data; end
end

Stripe::Instrumentation::RequestEvent = Stripe::Instrumentation::RequestEndEvent

class Stripe::InvalidRequestError < ::Stripe::StripeError
  def initialize(message, param, http_status: T.unsafe(nil), http_body: T.unsafe(nil), json_body: T.unsafe(nil), http_headers: T.unsafe(nil), code: T.unsafe(nil)); end

  def param; end
  def param=(_arg0); end
end

class Stripe::Invoice < ::Stripe::APIResource
  include ::Stripe::APIOperations::Delete
  include ::Stripe::APIOperations::Save
  extend ::Stripe::APIOperations::Create
  extend ::Stripe::APIOperations::Delete::ClassMethods
  extend ::Stripe::APIOperations::List
  extend ::Stripe::APIOperations::Save::ClassMethods

  def finalize_invoice(params = T.unsafe(nil), opts = T.unsafe(nil)); end
  def mark_uncollectible(params = T.unsafe(nil), opts = T.unsafe(nil)); end
  def pay(params = T.unsafe(nil), opts = T.unsafe(nil)); end
  def send_invoice(params = T.unsafe(nil), opts = T.unsafe(nil)); end
  def void_invoice(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  class << self
    def finalize_invoice(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end
    def list_upcoming_line_items(params, opts = T.unsafe(nil)); end
    def mark_uncollectible(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end
    def pay(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end
    def send_invoice(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end
    def upcoming(params, opts = T.unsafe(nil)); end
    def void_invoice(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end
  end
end

Stripe::Invoice::OBJECT_NAME = T.let(T.unsafe(nil), String)

class Stripe::InvoiceItem < ::Stripe::APIResource
  include ::Stripe::APIOperations::Delete
  include ::Stripe::APIOperations::Save
  extend ::Stripe::APIOperations::Create
  extend ::Stripe::APIOperations::Delete::ClassMethods
  extend ::Stripe::APIOperations::List
  extend ::Stripe::APIOperations::Save::ClassMethods
end

Stripe::InvoiceItem::OBJECT_NAME = T.let(T.unsafe(nil), String)
class Stripe::InvoiceLineItem < ::Stripe::StripeObject; end
Stripe::InvoiceLineItem::OBJECT_NAME = T.let(T.unsafe(nil), String)
module Stripe::Issuing; end

class Stripe::Issuing::Authorization < ::Stripe::APIResource
  include ::Stripe::APIOperations::Save
  extend ::Stripe::APIOperations::List
  extend ::Stripe::APIOperations::Save::ClassMethods

  def approve(params = T.unsafe(nil), opts = T.unsafe(nil)); end
  def decline(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  class << self
    def approve(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end
    def decline(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end
  end
end

Stripe::Issuing::Authorization::OBJECT_NAME = T.let(T.unsafe(nil), String)

class Stripe::Issuing::Card < ::Stripe::APIResource
  include ::Stripe::APIOperations::Save
  extend ::Stripe::APIOperations::Create
  extend ::Stripe::APIOperations::List
  extend ::Stripe::APIOperations::Save::ClassMethods

  def details(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  class << self
    def details(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end
  end
end

Stripe::Issuing::Card::OBJECT_NAME = T.let(T.unsafe(nil), String)
class Stripe::Issuing::CardDetails < ::Stripe::StripeObject; end
Stripe::Issuing::CardDetails::OBJECT_NAME = T.let(T.unsafe(nil), String)

class Stripe::Issuing::Cardholder < ::Stripe::APIResource
  include ::Stripe::APIOperations::Save
  extend ::Stripe::APIOperations::Create
  extend ::Stripe::APIOperations::List
  extend ::Stripe::APIOperations::Save::ClassMethods
end

Stripe::Issuing::Cardholder::OBJECT_NAME = T.let(T.unsafe(nil), String)

class Stripe::Issuing::Dispute < ::Stripe::APIResource
  include ::Stripe::APIOperations::Save
  extend ::Stripe::APIOperations::Create
  extend ::Stripe::APIOperations::List
  extend ::Stripe::APIOperations::Save::ClassMethods

  def submit(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  class << self
    def submit(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end
  end
end

Stripe::Issuing::Dispute::OBJECT_NAME = T.let(T.unsafe(nil), String)

class Stripe::Issuing::Transaction < ::Stripe::APIResource
  include ::Stripe::APIOperations::Save
  extend ::Stripe::APIOperations::List
  extend ::Stripe::APIOperations::Save::ClassMethods
end

Stripe::Issuing::Transaction::OBJECT_NAME = T.let(T.unsafe(nil), String)
Stripe::LEVEL_DEBUG = T.let(T.unsafe(nil), Integer)
Stripe::LEVEL_ERROR = T.let(T.unsafe(nil), Integer)
Stripe::LEVEL_INFO = T.let(T.unsafe(nil), Integer)
class Stripe::LineItem < ::Stripe::APIResource; end
Stripe::LineItem::OBJECT_NAME = T.let(T.unsafe(nil), String)

class Stripe::ListObject < ::Stripe::StripeObject
  include ::Stripe::APIOperations::List
  include ::Stripe::APIOperations::Request
  include ::Stripe::APIOperations::Create
  extend ::Stripe::APIOperations::Request::ClassMethods

  def initialize(*args); end

  def [](key); end
  def auto_paging_each(&blk); end
  def each(&blk); end
  def empty?; end
  def filters; end
  def filters=(_arg0); end
  def next_page(params = T.unsafe(nil), opts = T.unsafe(nil)); end
  def previous_page(params = T.unsafe(nil), opts = T.unsafe(nil)); end
  def resource_url; end
  def retrieve(id, opts = T.unsafe(nil)); end
  def reverse_each(&blk); end

  class << self
    def empty_list(opts = T.unsafe(nil)); end
  end
end

Stripe::ListObject::OBJECT_NAME = T.let(T.unsafe(nil), String)

class Stripe::LoginLink < ::Stripe::APIResource
  class << self
    def retrieve(_id, _opts = T.unsafe(nil)); end
  end
end

Stripe::LoginLink::OBJECT_NAME = T.let(T.unsafe(nil), String)
class Stripe::Mandate < ::Stripe::APIResource; end
Stripe::Mandate::OBJECT_NAME = T.let(T.unsafe(nil), String)

class Stripe::MultipartEncoder
  def initialize; end

  def body; end
  def boundary; end
  def close; end
  def content_type; end
  def encode(params); end

  private

  def escape(str); end
  def write_field(name, data, filename:); end

  class << self
    def encode(params); end
  end
end

Stripe::MultipartEncoder::MULTIPART_FORM_DATA = T.let(T.unsafe(nil), String)

module Stripe::OAuth
  class << self
    def authorize_url(params = T.unsafe(nil), opts = T.unsafe(nil)); end
    def deauthorize(params = T.unsafe(nil), opts = T.unsafe(nil)); end
    def get_client_id(params = T.unsafe(nil)); end
    def token(params = T.unsafe(nil), opts = T.unsafe(nil)); end
  end
end

class Stripe::OAuth::InvalidClientError < ::Stripe::OAuth::OAuthError; end
class Stripe::OAuth::InvalidGrantError < ::Stripe::OAuth::OAuthError; end
class Stripe::OAuth::InvalidRequestError < ::Stripe::OAuth::OAuthError; end
class Stripe::OAuth::InvalidScopeError < ::Stripe::OAuth::OAuthError; end

class Stripe::OAuth::OAuthError < ::Stripe::StripeError
  def initialize(code, description, http_status: T.unsafe(nil), http_body: T.unsafe(nil), json_body: T.unsafe(nil), http_headers: T.unsafe(nil)); end

  def construct_error_object; end
end

module Stripe::OAuth::OAuthOperations
  extend ::Stripe::APIOperations::Request::ClassMethods

  class << self
    def execute_resource_request(method, url, params, opts); end
  end
end

class Stripe::OAuth::UnsupportedGrantTypeError < ::Stripe::OAuth::OAuthError; end
class Stripe::OAuth::UnsupportedResponseTypeError < ::Stripe::OAuth::OAuthError; end

class Stripe::OAuthErrorObject < ::Stripe::StripeObject
  def error; end
  def error_description; end
end

module Stripe::ObjectTypes
  class << self
    def object_names_to_classes; end
  end
end

class Stripe::Order < ::Stripe::APIResource
  include ::Stripe::APIOperations::Save
  extend ::Stripe::APIOperations::Create
  extend ::Stripe::APIOperations::List
  extend ::Stripe::APIOperations::Save::ClassMethods

  def pay(params = T.unsafe(nil), opts = T.unsafe(nil)); end
  def return_order(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  class << self
    def pay(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end
    def return_order(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end
  end
end

Stripe::Order::OBJECT_NAME = T.let(T.unsafe(nil), String)

class Stripe::OrderReturn < ::Stripe::APIResource
  extend ::Stripe::APIOperations::List
end

Stripe::OrderReturn::OBJECT_NAME = T.let(T.unsafe(nil), String)

class Stripe::PaymentIntent < ::Stripe::APIResource
  include ::Stripe::APIOperations::Save
  extend ::Stripe::APIOperations::Create
  extend ::Stripe::APIOperations::List
  extend ::Stripe::APIOperations::Save::ClassMethods

  def cancel(params = T.unsafe(nil), opts = T.unsafe(nil)); end
  def capture(params = T.unsafe(nil), opts = T.unsafe(nil)); end
  def confirm(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  class << self
    def cancel(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end
    def capture(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end
    def confirm(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end
  end
end

Stripe::PaymentIntent::OBJECT_NAME = T.let(T.unsafe(nil), String)

class Stripe::PaymentMethod < ::Stripe::APIResource
  include ::Stripe::APIOperations::Save
  extend ::Stripe::APIOperations::Create
  extend ::Stripe::APIOperations::List
  extend ::Stripe::APIOperations::Save::ClassMethods

  def attach(params = T.unsafe(nil), opts = T.unsafe(nil)); end
  def detach(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  class << self
    def attach(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end
    def detach(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end
  end
end

Stripe::PaymentMethod::OBJECT_NAME = T.let(T.unsafe(nil), String)

class Stripe::Payout < ::Stripe::APIResource
  include ::Stripe::APIOperations::Save
  extend ::Stripe::APIOperations::Create
  extend ::Stripe::APIOperations::List
  extend ::Stripe::APIOperations::Save::ClassMethods

  def cancel(params = T.unsafe(nil), opts = T.unsafe(nil)); end
  def reverse(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  class << self
    def cancel(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end
    def reverse(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end
  end
end

Stripe::Payout::OBJECT_NAME = T.let(T.unsafe(nil), String)
class Stripe::PermissionError < ::Stripe::StripeError; end

class Stripe::Person < ::Stripe::APIResource
  include ::Stripe::APIOperations::Save
  extend ::Stripe::APIOperations::List
  extend ::Stripe::APIOperations::Save::ClassMethods

  def resource_url; end

  class << self
    def retrieve(_id, _opts = T.unsafe(nil)); end
    def update(_id, _params = T.unsafe(nil), _opts = T.unsafe(nil)); end
  end
end

Stripe::Person::OBJECT_NAME = T.let(T.unsafe(nil), String)

class Stripe::Plan < ::Stripe::APIResource
  include ::Stripe::APIOperations::Delete
  include ::Stripe::APIOperations::Save
  extend ::Stripe::APIOperations::Create
  extend ::Stripe::APIOperations::Delete::ClassMethods
  extend ::Stripe::APIOperations::List
  extend ::Stripe::APIOperations::Save::ClassMethods
end

Stripe::Plan::OBJECT_NAME = T.let(T.unsafe(nil), String)

class Stripe::Price < ::Stripe::APIResource
  include ::Stripe::APIOperations::Save
  extend ::Stripe::APIOperations::Create
  extend ::Stripe::APIOperations::List
  extend ::Stripe::APIOperations::Save::ClassMethods
end

Stripe::Price::OBJECT_NAME = T.let(T.unsafe(nil), String)

class Stripe::Product < ::Stripe::APIResource
  include ::Stripe::APIOperations::Delete
  include ::Stripe::APIOperations::Save
  extend ::Stripe::APIOperations::Create
  extend ::Stripe::APIOperations::Delete::ClassMethods
  extend ::Stripe::APIOperations::List
  extend ::Stripe::APIOperations::Save::ClassMethods
end

Stripe::Product::OBJECT_NAME = T.let(T.unsafe(nil), String)

class Stripe::PromotionCode < ::Stripe::APIResource
  include ::Stripe::APIOperations::Save
  extend ::Stripe::APIOperations::Create
  extend ::Stripe::APIOperations::List
  extend ::Stripe::APIOperations::Save::ClassMethods
end

Stripe::PromotionCode::OBJECT_NAME = T.let(T.unsafe(nil), String)

class Stripe::Quote < ::Stripe::APIResource
  include ::Stripe::APIOperations::Save
  extend ::Stripe::APIOperations::Create
  extend ::Stripe::APIOperations::List
  extend ::Stripe::APIOperations::Save::ClassMethods

  def accept(params = T.unsafe(nil), opts = T.unsafe(nil)); end
  def cancel(params = T.unsafe(nil), opts = T.unsafe(nil)); end
  def finalize_quote(params = T.unsafe(nil), opts = T.unsafe(nil)); end
  def list_computed_upfront_line_items(params = T.unsafe(nil), opts = T.unsafe(nil)); end
  def list_line_items(params = T.unsafe(nil), opts = T.unsafe(nil)); end
  def pdf(params = T.unsafe(nil), opts = T.unsafe(nil), &read_body_chunk_block); end

  class << self
    def accept(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end
    def cancel(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end
    def finalize_quote(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end
    def list_computed_upfront_line_items(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end
    def list_line_items(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end
    def pdf(id, params = T.unsafe(nil), opts = T.unsafe(nil), &read_body_chunk_block); end
  end
end

Stripe::Quote::OBJECT_NAME = T.let(T.unsafe(nil), String)
module Stripe::Radar; end

class Stripe::Radar::EarlyFraudWarning < ::Stripe::APIResource
  extend ::Stripe::APIOperations::List
end

Stripe::Radar::EarlyFraudWarning::OBJECT_NAME = T.let(T.unsafe(nil), String)

class Stripe::Radar::ValueList < ::Stripe::APIResource
  include ::Stripe::APIOperations::Delete
  include ::Stripe::APIOperations::Save
  extend ::Stripe::APIOperations::Create
  extend ::Stripe::APIOperations::Delete::ClassMethods
  extend ::Stripe::APIOperations::List
  extend ::Stripe::APIOperations::Save::ClassMethods
end

Stripe::Radar::ValueList::OBJECT_NAME = T.let(T.unsafe(nil), String)

class Stripe::Radar::ValueListItem < ::Stripe::APIResource
  include ::Stripe::APIOperations::Delete
  extend ::Stripe::APIOperations::Create
  extend ::Stripe::APIOperations::Delete::ClassMethods
  extend ::Stripe::APIOperations::List
end

Stripe::Radar::ValueListItem::OBJECT_NAME = T.let(T.unsafe(nil), String)
class Stripe::RateLimitError < ::Stripe::StripeError; end

class Stripe::Recipient < ::Stripe::APIResource
  include ::Stripe::APIOperations::Delete
  include ::Stripe::APIOperations::Save
  extend ::Stripe::APIOperations::Create
  extend ::Stripe::APIOperations::Delete::ClassMethods
  extend ::Stripe::APIOperations::List
  extend ::Stripe::APIOperations::Save::ClassMethods
end

Stripe::Recipient::OBJECT_NAME = T.let(T.unsafe(nil), String)
class Stripe::RecipientTransfer < ::Stripe::StripeObject; end
Stripe::RecipientTransfer::OBJECT_NAME = T.let(T.unsafe(nil), String)

class Stripe::Refund < ::Stripe::APIResource
  include ::Stripe::APIOperations::Save
  extend ::Stripe::APIOperations::Create
  extend ::Stripe::APIOperations::List
  extend ::Stripe::APIOperations::Save::ClassMethods
end

Stripe::Refund::OBJECT_NAME = T.let(T.unsafe(nil), String)
module Stripe::Reporting; end

class Stripe::Reporting::ReportRun < ::Stripe::APIResource
  extend ::Stripe::APIOperations::Create
  extend ::Stripe::APIOperations::List
end

Stripe::Reporting::ReportRun::OBJECT_NAME = T.let(T.unsafe(nil), String)

class Stripe::Reporting::ReportType < ::Stripe::APIResource
  extend ::Stripe::APIOperations::Create
  extend ::Stripe::APIOperations::List
end

Stripe::Reporting::ReportType::OBJECT_NAME = T.let(T.unsafe(nil), String)

class Stripe::Reversal < ::Stripe::APIResource
  include ::Stripe::APIOperations::Save
  extend ::Stripe::APIOperations::List
  extend ::Stripe::APIOperations::Save::ClassMethods

  def resource_url; end

  class << self
    def retrieve(_id, _opts = T.unsafe(nil)); end
    def update(_id, _params = T.unsafe(nil), _opts = T.unsafe(nil)); end
  end
end

Stripe::Reversal::OBJECT_NAME = T.let(T.unsafe(nil), String)

class Stripe::Review < ::Stripe::APIResource
  extend ::Stripe::APIOperations::List

  def approve(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  class << self
    def approve(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end
  end
end

Stripe::Review::OBJECT_NAME = T.let(T.unsafe(nil), String)

class Stripe::SKU < ::Stripe::APIResource
  include ::Stripe::APIOperations::Delete
  include ::Stripe::APIOperations::Save
  extend ::Stripe::APIOperations::Create
  extend ::Stripe::APIOperations::Delete::ClassMethods
  extend ::Stripe::APIOperations::List
  extend ::Stripe::APIOperations::Save::ClassMethods
end

Stripe::SKU::OBJECT_NAME = T.let(T.unsafe(nil), String)

class Stripe::SetupAttempt < ::Stripe::APIResource
  extend ::Stripe::APIOperations::List
end

Stripe::SetupAttempt::OBJECT_NAME = T.let(T.unsafe(nil), String)

class Stripe::SetupIntent < ::Stripe::APIResource
  include ::Stripe::APIOperations::Save
  extend ::Stripe::APIOperations::Create
  extend ::Stripe::APIOperations::List
  extend ::Stripe::APIOperations::Save::ClassMethods

  def cancel(params = T.unsafe(nil), opts = T.unsafe(nil)); end
  def confirm(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  class << self
    def cancel(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end
    def confirm(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end
  end
end

Stripe::SetupIntent::OBJECT_NAME = T.let(T.unsafe(nil), String)
module Stripe::Sigma; end

class Stripe::Sigma::ScheduledQueryRun < ::Stripe::APIResource
  extend ::Stripe::APIOperations::List

  class << self
    def resource_url; end
  end
end

Stripe::Sigma::ScheduledQueryRun::OBJECT_NAME = T.let(T.unsafe(nil), String)

class Stripe::SignatureVerificationError < ::Stripe::StripeError
  def initialize(message, sig_header, http_body: T.unsafe(nil)); end

  def sig_header; end
  def sig_header=(_arg0); end
end

class Stripe::SingletonAPIResource < ::Stripe::APIResource
  def resource_url; end

  class << self
    def resource_url; end
    def retrieve(opts = T.unsafe(nil)); end
  end
end

class Stripe::Source < ::Stripe::APIResource
  include ::Stripe::APIOperations::Save
  extend ::Stripe::APIOperations::Create
  extend ::Stripe::APIOperations::Save::ClassMethods
  extend ::Stripe::APIOperations::NestedResource
  extend ::Gem::Deprecate

  def _deprecated_source_transactions(params = T.unsafe(nil), opts = T.unsafe(nil)); end
  def detach(params = T.unsafe(nil), opts = T.unsafe(nil)); end
  def source_transactions(*args, &block); end
  def verify(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  class << self
    def list_source_transactions(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end
    def retrieve_source_transaction(id, nested_id, opts = T.unsafe(nil)); end
    def source_transactions_url(id, nested_id = T.unsafe(nil)); end
    def verify(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end
  end
end

Stripe::Source::OBJECT_NAME = T.let(T.unsafe(nil), String)
class Stripe::SourceTransaction < ::Stripe::StripeObject; end
Stripe::SourceTransaction::OBJECT_NAME = T.let(T.unsafe(nil), String)

class Stripe::StripeClient
  extend ::Gem::Deprecate

  def initialize(config_arg = T.unsafe(nil)); end

  def _deprecated_connection_manager; end
  def config; end
  def connection_manager(*args, &block); end
  def execute_request(method, path, api_base: T.unsafe(nil), api_key: T.unsafe(nil), headers: T.unsafe(nil), params: T.unsafe(nil)); end
  def execute_request_stream(method, path, api_base: T.unsafe(nil), api_key: T.unsafe(nil), headers: T.unsafe(nil), params: T.unsafe(nil), &read_body_chunk_block); end
  def last_response_has_key?(object_id); end
  def options; end
  def request; end
  def store_last_response(object_id, resp); end

  private

  def api_url(url = T.unsafe(nil), api_base = T.unsafe(nil)); end
  def check_api_key!(api_key); end
  def encode_body(body_params, headers); end
  def execute_request_internal(method, path, api_base, api_key, headers, params, &read_body_chunk_block); end
  def execute_request_with_rescues(method, api_base, context); end
  def format_app_info(info); end
  def general_api_error(status, body); end
  def handle_error_response(http_resp, context); end
  def handle_network_error(error, context, num_retries, api_base = T.unsafe(nil)); end
  def log_request(context, num_retries); end
  def log_response(context, request_start, status, body); end
  def log_response_error(context, request_start, error); end
  def merge_query_params(query_params, path); end
  def notify_request_begin(context); end
  def notify_request_end(context, duration, http_status, num_retries, user_data); end
  def request_headers(api_key, method); end
  def should_handle_as_error(http_status); end
  def specific_api_error(resp, error_data, context); end
  def specific_oauth_error(resp, error_code, context); end

  class << self
    def active_client; end
    def clear_all_connection_managers(config: T.unsafe(nil)); end
    def current_thread_context; end
    def default_client; end
    def default_connection_manager(config = T.unsafe(nil)); end
    def maybe_gc_connection_managers; end
    def should_retry?(error, method:, num_retries:, config: T.unsafe(nil)); end
    def sleep_time(num_retries, config: T.unsafe(nil)); end
  end
end

Stripe::StripeClient::CONNECTION_MANAGER_GC_LAST_USED_EXPIRY = T.let(T.unsafe(nil), Integer)
Stripe::StripeClient::CONNECTION_MANAGER_GC_PERIOD = T.let(T.unsafe(nil), Integer)
Stripe::StripeClient::ERROR_MESSAGE_CONNECTION = T.let(T.unsafe(nil), String)
Stripe::StripeClient::ERROR_MESSAGE_SSL = T.let(T.unsafe(nil), String)
Stripe::StripeClient::ERROR_MESSAGE_TIMEOUT_CONNECT = T.let(T.unsafe(nil), String)
Stripe::StripeClient::ERROR_MESSAGE_TIMEOUT_READ = T.let(T.unsafe(nil), String)
Stripe::StripeClient::ERROR_MESSAGE_TIMEOUT_SUFFIX = T.let(T.unsafe(nil), String)
Stripe::StripeClient::NETWORK_ERROR_MESSAGES_MAP = T.let(T.unsafe(nil), Hash)

class Stripe::StripeClient::RequestLogContext
  def account; end
  def account=(_arg0); end
  def api_key; end
  def api_key=(_arg0); end
  def api_version; end
  def api_version=(_arg0); end
  def body; end
  def body=(_arg0); end
  def dup_from_response_headers(headers); end
  def idempotency_key; end
  def idempotency_key=(_arg0); end
  def method; end
  def method=(_arg0); end
  def path; end
  def path=(_arg0); end
  def query; end
  def query=(_arg0); end
  def request_id; end
  def request_id=(_arg0); end
end

class Stripe::StripeClient::StripeRequestMetrics
  def initialize(request_id, request_duration_ms); end

  def payload; end
  def request_duration_ms; end
  def request_duration_ms=(_arg0); end
  def request_id; end
  def request_id=(_arg0); end
end

class Stripe::StripeClient::SystemProfiler
  def initialize; end

  def user_agent; end

  class << self
    def uname; end
    def uname_from_system; end
    def uname_from_system_ver; end
  end
end

class Stripe::StripeClient::ThreadContext
  def active_client; end
  def active_client=(_arg0); end
  def default_client; end
  def default_client=(_arg0); end
  def default_connection_managers; end
  def last_responses; end
  def last_responses=(_arg0); end
  def reset_connection_managers; end
end

class Stripe::StripeConfiguration
  def initialize; end

  def api_base; end
  def api_base=(api_base); end
  def api_key; end
  def api_key=(_arg0); end
  def api_version; end
  def api_version=(_arg0); end
  def ca_bundle_path; end
  def ca_bundle_path=(path); end
  def ca_store; end
  def client_id; end
  def client_id=(_arg0); end
  def connect_base; end
  def connect_base=(connect_base); end
  def enable_telemetry; end
  def enable_telemetry=(_arg0); end
  def enable_telemetry?; end
  def initial_network_retry_delay; end
  def initial_network_retry_delay=(val); end
  def key; end
  def log_level; end
  def log_level=(val); end
  def logger; end
  def logger=(_arg0); end
  def max_network_retries; end
  def max_network_retries=(val); end
  def max_network_retry_delay; end
  def max_network_retry_delay=(val); end
  def open_timeout; end
  def open_timeout=(open_timeout); end
  def proxy; end
  def proxy=(proxy); end
  def read_timeout; end
  def read_timeout=(read_timeout); end
  def reverse_duplicate_merge(hash); end
  def stripe_account; end
  def stripe_account=(_arg0); end
  def uploads_base; end
  def uploads_base=(uploads_base); end
  def verify_ssl_certs; end
  def verify_ssl_certs=(verify_ssl_certs); end
  def write_timeout; end
  def write_timeout=(write_timeout); end

  class << self
    def setup; end
  end
end

class Stripe::StripeError < ::StandardError
  def initialize(message = T.unsafe(nil), http_status: T.unsafe(nil), http_body: T.unsafe(nil), json_body: T.unsafe(nil), http_headers: T.unsafe(nil), code: T.unsafe(nil)); end

  def code; end
  def construct_error_object; end
  def error; end
  def http_body; end
  def http_headers; end
  def http_status; end
  def idempotent_replayed?; end
  def json_body; end
  def message; end
  def request_id; end
  def response; end
  def response=(_arg0); end
  def to_s; end
end

class Stripe::StripeHeadersOnlyResponse
  include ::Stripe::StripeResponseBase

  class << self
    def from_net_http(http_resp); end
  end
end

class Stripe::StripeObject
  include ::Enumerable

  def initialize(id = T.unsafe(nil), opts = T.unsafe(nil)); end

  def ==(other); end
  def [](key); end
  def []=(key, value); end
  def as_json(*opts); end
  def deleted?; end
  def dirty!; end
  def each(&blk); end
  def eql?(other); end
  def hash; end
  def inspect; end
  def keys; end
  def marshal_dump; end
  def marshal_load(data); end
  def serialize_params(options = T.unsafe(nil)); end
  def to_hash; end
  def to_json(*_opts); end
  def to_s(*_args); end
  def update_attributes(values, opts = T.unsafe(nil), dirty: T.unsafe(nil)); end
  def values; end

  protected

  def add_accessors(keys, values); end
  def initialize_from(values, opts, partial = T.unsafe(nil)); end
  def metaclass; end
  def method_missing(name, *args); end
  def remove_accessors(keys); end
  def respond_to_missing?(symbol, include_private = T.unsafe(nil)); end
  def serialize_params_value(value, original, unsaved, force, key: T.unsafe(nil)); end

  private

  def dirty_value!(value); end
  def empty_values(obj); end

  class << self
    def additive_object_param(name); end
    def additive_object_param?(name); end
    def construct_from(values, opts = T.unsafe(nil)); end
    def protected_fields; end

    private

    def deep_copy(obj); end
  end
end

Stripe::StripeObject::RESERVED_FIELD_NAMES = T.let(T.unsafe(nil), Array)

class Stripe::StripeResponse
  include ::Stripe::StripeResponseBase

  def data; end
  def data=(_arg0); end
  def http_body; end
  def http_body=(_arg0); end

  class << self
    def from_net_http(http_resp); end
  end
end

Stripe::StripeResponse::Headers = Stripe::StripeResponseHeaders

module Stripe::StripeResponseBase
  def http_headers; end
  def http_headers=(_arg0); end
  def http_status; end
  def http_status=(_arg0); end
  def request_id; end
  def request_id=(_arg0); end

  class << self
    def populate_for_net_http(resp, http_resp); end
  end
end

class Stripe::StripeResponseHeaders
  def initialize(hash); end

  def [](name); end

  class << self
    def from_net_http(resp); end
  end
end

class Stripe::Subscription < ::Stripe::APIResource
  include ::Stripe::APIOperations::Delete
  include ::Stripe::APIOperations::Save
  extend ::Stripe::APIOperations::Create
  extend ::Stripe::APIOperations::Delete::ClassMethods
  extend ::Stripe::APIOperations::List
  extend ::Stripe::APIOperations::Save::ClassMethods

  def delete_discount(params = T.unsafe(nil), opts = T.unsafe(nil)); end
  def source=(value); end

  class << self
    def delete_discount(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end
  end
end

Stripe::Subscription::OBJECT_NAME = T.let(T.unsafe(nil), String)

class Stripe::SubscriptionItem < ::Stripe::APIResource
  include ::Stripe::APIOperations::Delete
  include ::Stripe::APIOperations::Save
  extend ::Stripe::APIOperations::Create
  extend ::Stripe::APIOperations::Delete::ClassMethods
  extend ::Stripe::APIOperations::List
  extend ::Stripe::APIOperations::Save::ClassMethods
  extend ::Stripe::APIOperations::NestedResource
  extend ::Gem::Deprecate

  def _deprecated_usage_record_summaries(params = T.unsafe(nil), opts = T.unsafe(nil)); end
  def usage_record_summaries(*args, &block); end

  class << self
    def create_usage_record(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end
    def list_usage_record_summaries(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end
    def usage_record_summarys_url(id, nested_id = T.unsafe(nil)); end
    def usage_records_url(id, nested_id = T.unsafe(nil)); end
  end
end

Stripe::SubscriptionItem::OBJECT_NAME = T.let(T.unsafe(nil), String)

class Stripe::SubscriptionSchedule < ::Stripe::APIResource
  include ::Stripe::APIOperations::Save
  extend ::Stripe::APIOperations::Create
  extend ::Stripe::APIOperations::List
  extend ::Stripe::APIOperations::Save::ClassMethods

  def cancel(params = T.unsafe(nil), opts = T.unsafe(nil)); end
  def release(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  class << self
    def cancel(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end
    def release(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end
  end
end

Stripe::SubscriptionSchedule::OBJECT_NAME = T.let(T.unsafe(nil), String)

class Stripe::TaxCode < ::Stripe::APIResource
  extend ::Stripe::APIOperations::List
end

Stripe::TaxCode::OBJECT_NAME = T.let(T.unsafe(nil), String)

class Stripe::TaxId < ::Stripe::APIResource
  include ::Stripe::APIOperations::Delete
  extend ::Stripe::APIOperations::Delete::ClassMethods
  extend ::Stripe::APIOperations::List

  def resource_url; end

  class << self
    def retrieve(_id, _opts = T.unsafe(nil)); end
  end
end

Stripe::TaxId::OBJECT_NAME = T.let(T.unsafe(nil), String)

class Stripe::TaxRate < ::Stripe::APIResource
  include ::Stripe::APIOperations::Save
  extend ::Stripe::APIOperations::Create
  extend ::Stripe::APIOperations::List
  extend ::Stripe::APIOperations::Save::ClassMethods
end

Stripe::TaxRate::OBJECT_NAME = T.let(T.unsafe(nil), String)
module Stripe::Terminal; end

class Stripe::Terminal::ConnectionToken < ::Stripe::APIResource
  extend ::Stripe::APIOperations::Create
end

Stripe::Terminal::ConnectionToken::OBJECT_NAME = T.let(T.unsafe(nil), String)

class Stripe::Terminal::Location < ::Stripe::APIResource
  include ::Stripe::APIOperations::Delete
  include ::Stripe::APIOperations::Save
  extend ::Stripe::APIOperations::Create
  extend ::Stripe::APIOperations::Delete::ClassMethods
  extend ::Stripe::APIOperations::List
  extend ::Stripe::APIOperations::Save::ClassMethods
end

Stripe::Terminal::Location::OBJECT_NAME = T.let(T.unsafe(nil), String)

class Stripe::Terminal::Reader < ::Stripe::APIResource
  include ::Stripe::APIOperations::Delete
  include ::Stripe::APIOperations::Save
  extend ::Stripe::APIOperations::Create
  extend ::Stripe::APIOperations::Delete::ClassMethods
  extend ::Stripe::APIOperations::List
  extend ::Stripe::APIOperations::Save::ClassMethods
end

Stripe::Terminal::Reader::OBJECT_NAME = T.let(T.unsafe(nil), String)

class Stripe::ThreeDSecure < ::Stripe::APIResource
  extend ::Stripe::APIOperations::Create

  class << self
    def resource_url; end
  end
end

Stripe::ThreeDSecure::OBJECT_NAME = T.let(T.unsafe(nil), String)

class Stripe::Token < ::Stripe::APIResource
  extend ::Stripe::APIOperations::Create
end

Stripe::Token::OBJECT_NAME = T.let(T.unsafe(nil), String)

class Stripe::Topup < ::Stripe::APIResource
  include ::Stripe::APIOperations::Save
  extend ::Stripe::APIOperations::Create
  extend ::Stripe::APIOperations::List
  extend ::Stripe::APIOperations::Save::ClassMethods

  def cancel(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  class << self
    def cancel(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end
  end
end

Stripe::Topup::OBJECT_NAME = T.let(T.unsafe(nil), String)

class Stripe::Transfer < ::Stripe::APIResource
  include ::Stripe::APIOperations::Save
  extend ::Stripe::APIOperations::Create
  extend ::Stripe::APIOperations::List
  extend ::Stripe::APIOperations::Save::ClassMethods
  extend ::Stripe::APIOperations::NestedResource

  def cancel(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  class << self
    def cancel(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end
    def create_reversal(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end
    def list_reversals(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end
    def retrieve_reversal(id, nested_id, opts = T.unsafe(nil)); end
    def reversals_url(id, nested_id = T.unsafe(nil)); end
    def update_reversal(id, nested_id, params = T.unsafe(nil), opts = T.unsafe(nil)); end
  end
end

Stripe::Transfer::OBJECT_NAME = T.let(T.unsafe(nil), String)
class Stripe::UsageRecord < ::Stripe::APIResource; end
Stripe::UsageRecord::OBJECT_NAME = T.let(T.unsafe(nil), String)
class Stripe::UsageRecordSummary < ::Stripe::StripeObject; end
Stripe::UsageRecordSummary::OBJECT_NAME = T.let(T.unsafe(nil), String)

module Stripe::Util
  class << self
    def check_api_key!(key); end
    def check_string_argument!(key); end
    def convert_to_stripe_object(data, opts = T.unsafe(nil)); end
    def encode_parameters(params); end
    def flatten_params(params, parent_key = T.unsafe(nil)); end
    def flatten_params_array(value, calculated_key); end
    def log_debug(message, data = T.unsafe(nil)); end
    def log_error(message, data = T.unsafe(nil)); end
    def log_info(message, data = T.unsafe(nil)); end
    def monotonic_time; end
    def normalize_headers(headers); end
    def normalize_id(id); end
    def normalize_opts(opts); end
    def object_classes; end
    def object_name_matches_class?(object_name, klass); end
    def objects_to_ids(obj); end
    def request_id_dashboard_url(request_id, api_key); end
    def secure_compare(str_a, str_b); end
    def symbolize_names(object); end
    def url_encode(key); end

    private

    def colorize(val, color, isatty); end
    def level_name(level); end
    def log_internal(message, data = T.unsafe(nil), color:, level:, logger:, out:); end
    def wrap_logfmt_value(val); end
  end
end

Stripe::Util::COLOR_CODES = T.let(T.unsafe(nil), Hash)
Stripe::Util::OPTS_COPYABLE = T.let(T.unsafe(nil), Set)
Stripe::Util::OPTS_PERSISTABLE = T.let(T.unsafe(nil), Set)
Stripe::Util::OPTS_USER_SPECIFIED = T.let(T.unsafe(nil), Set)
Stripe::VERSION = T.let(T.unsafe(nil), String)

module Stripe::Webhook
  class << self
    def construct_event(payload, sig_header, secret, tolerance: T.unsafe(nil)); end
  end
end

Stripe::Webhook::DEFAULT_TOLERANCE = T.let(T.unsafe(nil), Integer)

module Stripe::Webhook::Signature
  class << self
    def compute_signature(timestamp, payload, secret); end
    def generate_header(timestamp, signature, scheme: T.unsafe(nil)); end
    def verify_header(payload, header, secret, tolerance: T.unsafe(nil)); end

    private

    def get_timestamp_and_signatures(header, scheme); end
  end
end

Stripe::Webhook::Signature::EXPECTED_SCHEME = T.let(T.unsafe(nil), String)

class Stripe::WebhookEndpoint < ::Stripe::APIResource
  include ::Stripe::APIOperations::Delete
  include ::Stripe::APIOperations::Save
  extend ::Stripe::APIOperations::Create
  extend ::Stripe::APIOperations::Delete::ClassMethods
  extend ::Stripe::APIOperations::List
  extend ::Stripe::APIOperations::Save::ClassMethods
end

Stripe::WebhookEndpoint::OBJECT_NAME = T.let(T.unsafe(nil), String)
