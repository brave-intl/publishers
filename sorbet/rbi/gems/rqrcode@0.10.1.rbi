# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `rqrcode` gem.
# Please instead update this file by running `bin/tapioca gem rqrcode`.

module RQRCode; end
RQRCode::ALPHANUMERIC = T.let(T.unsafe(nil), Array)
module RQRCode::CoreExtensions; end
module RQRCode::CoreExtensions::Array; end
module RQRCode::CoreExtensions::Array::Behavior; end
module RQRCode::CoreExtensions::Integer; end

module RQRCode::CoreExtensions::Integer::Bitwise
  def rszf(count); end
end

module RQRCode::Export; end

module RQRCode::Export::ANSI
  def as_ansi(options = T.unsafe(nil)); end
end

module RQRCode::Export::HTML
  def as_html; end

  private

  def rows; end
end

class RQRCode::Export::HTML::Cell < ::Struct
  def as_html; end
  def dark?; end
  def html_class; end
end

class RQRCode::Export::HTML::Row < ::Struct
  def as_html; end
  def cells; end
end

class RQRCode::Export::HTML::Rows < ::Struct
  def as_html; end
  def rows; end
end

module RQRCode::Export::PNG
  def as_png(options = T.unsafe(nil)); end
end

module RQRCode::Export::SVG
  def as_svg(options = T.unsafe(nil)); end
end

RQRCode::NUMERIC = T.let(T.unsafe(nil), Array)

class RQRCode::QR8bitByte
  def initialize(data); end

  def get_length; end
  def mode; end
  def write(buffer); end
end

class RQRCode::QRAlphanumeric
  def initialize(data); end

  def get_length; end
  def mode; end
  def write(buffer); end

  class << self
    def valid_data?(data); end
  end
end

class RQRCode::QRBitBuffer
  def initialize(version); end

  def alphanumeric_encoding_start(length); end
  def buffer; end
  def byte_encoding_start(length); end
  def end_of_message(max_data_bits); end
  def get(index); end
  def get_length_in_bits; end
  def numeric_encoding_start(length); end
  def pad_until(prefered_size); end
  def put(num, length); end
  def put_bit(bit); end
end

RQRCode::QRBitBuffer::PAD0 = T.let(T.unsafe(nil), Integer)
RQRCode::QRBitBuffer::PAD1 = T.let(T.unsafe(nil), Integer)

class RQRCode::QRCode
  include ::RQRCode::Export::PNG
  include ::RQRCode::Export::SVG
  include ::RQRCode::Export::HTML
  include ::RQRCode::Export::ANSI

  def initialize(string, *args); end

  def dark?(row, col); end
  def error_correction_level; end
  def is_dark(row, col); end
  def mode; end
  def module_count; end
  def modules; end
  def to_s(*args); end
  def version; end

  protected

  def make; end

  private

  def get_best_mask_pattern; end
  def make_impl(test, mask_pattern); end
  def map_data(data, mask_pattern); end
  def place_format_info(test, mask_pattern); end
  def place_position_adjust_pattern; end
  def place_position_probe_pattern(row, col); end
  def place_timing_pattern; end
  def place_version_info(test); end
  def prepare_common_patterns; end
  def smallest_size_for(string, max_size_array); end

  class << self
    def count_max_data_bits(rs_blocks); end
    def create_bytes(buffer, rs_blocks); end
    def create_data(version, error_correct_level, data_list); end
  end
end

class RQRCode::QRCodeArgumentError < ::ArgumentError; end
class RQRCode::QRCodeRunTimeError < ::RuntimeError; end
RQRCode::QRERRORCORRECTLEVEL = T.let(T.unsafe(nil), Hash)
RQRCode::QRFORMATINFOLENGTH = T.let(T.unsafe(nil), Integer)
RQRCode::QRMASKCOMPUTATIONS = T.let(T.unsafe(nil), Array)
RQRCode::QRMASKPATTERN = T.let(T.unsafe(nil), Hash)
RQRCode::QRMAXDIGITS = T.let(T.unsafe(nil), Hash)
RQRCode::QRMODE = T.let(T.unsafe(nil), Hash)
RQRCode::QRMODE_NAME = T.let(T.unsafe(nil), Hash)

class RQRCode::QRMath
  class << self
    def gexp(n); end
    def glog(n); end
  end
end

RQRCode::QRMath::EXP_TABLE = T.let(T.unsafe(nil), Array)
RQRCode::QRMath::LOG_TABLE = T.let(T.unsafe(nil), Array)

class RQRCode::QRNumeric
  def initialize(data); end

  def get_length; end
  def mode; end
  def write(buffer); end

  private

  def get_bit_length(length); end
  def get_code(chars); end

  class << self
    def valid_data?(data); end
  end
end

RQRCode::QRNumeric::NUMBER_LENGTH = T.let(T.unsafe(nil), Hash)
RQRCode::QRPOSITIONPATTERNLENGTH = T.let(T.unsafe(nil), Integer)

class RQRCode::QRPolynomial
  def initialize(num, shift); end

  def get(index); end
  def get_length; end
  def mod(e); end
  def multiply(e); end
end

class RQRCode::QRRSBlock
  def initialize(total_count, data_count); end

  def data_count; end
  def total_count; end

  class << self
    def get_rs_block_table(version, error_correct_level); end
    def get_rs_blocks(version, error_correct_level); end
  end
end

RQRCode::QRRSBlock::RS_BLOCK_TABLE = T.let(T.unsafe(nil), Array)

class RQRCode::QRUtil
  class << self
    def demerit_points_1_same_color(modules); end
    def demerit_points_2_full_blocks(modules); end
    def demerit_points_3_dangerous_patterns(modules); end
    def demerit_points_4_dark_ratio(modules); end
    def get_bch_digit(data); end
    def get_bch_format_info(data); end
    def get_bch_version(data); end
    def get_error_correct_polynomial(error_correct_length); end
    def get_length_in_bits(mode, version); end
    def get_lost_points(modules); end
    def get_mask(mask_pattern, i, j); end
    def get_pattern_positions(version); end
    def max_size; end
  end
end

RQRCode::QRUtil::BITS_FOR_MODE = T.let(T.unsafe(nil), Hash)
RQRCode::QRUtil::DEMERIT_POINTS_1 = T.let(T.unsafe(nil), Integer)
RQRCode::QRUtil::DEMERIT_POINTS_2 = T.let(T.unsafe(nil), Integer)
RQRCode::QRUtil::DEMERIT_POINTS_3 = T.let(T.unsafe(nil), Integer)
RQRCode::QRUtil::DEMERIT_POINTS_4 = T.let(T.unsafe(nil), Integer)
RQRCode::QRUtil::G15 = T.let(T.unsafe(nil), Integer)
RQRCode::QRUtil::G15_MASK = T.let(T.unsafe(nil), Integer)
RQRCode::QRUtil::G18 = T.let(T.unsafe(nil), Integer)
RQRCode::QRUtil::PATTERN_POSITION_TABLE = T.let(T.unsafe(nil), Array)
