# typed: strict

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `hashdiff` gem.
# Please instead update this file by running `bin/tapioca gem hashdiff`.

module Hashdiff
  class << self
    def best_diff(obj1, obj2, options = T.unsafe(nil), &block); end
    def comparable?(obj1, obj2, strict = T.unsafe(nil)); end
    def compare_values(obj1, obj2, options = T.unsafe(nil)); end
    def count_diff(diffs); end
    def count_nodes(obj); end
    def custom_compare(method, key, obj1, obj2); end
    def decode_property_path(path, delimiter = T.unsafe(nil)); end
    def diff(obj1, obj2, options = T.unsafe(nil), &block); end
    def diff_array_lcs(arraya, arrayb, options = T.unsafe(nil)); end
    def lcs(arraya, arrayb, options = T.unsafe(nil)); end
    def node(hash, parts); end
    def patch!(obj, changes, options = T.unsafe(nil)); end
    def prefix_append_array_index(prefix, array_index, opts); end
    def prefix_append_key(prefix, key, opts); end
    def similar?(obja, objb, options = T.unsafe(nil)); end
    def unpatch!(obj, changes, options = T.unsafe(nil)); end

    private

    def any_hash_or_array?(obja, objb); end
  end
end

class Hashdiff::CompareHashes
  class << self
    def call(obj1, obj2, opts = T.unsafe(nil)); end
  end
end

class Hashdiff::LcsCompareArrays
  class << self
    def call(obj1, obj2, opts = T.unsafe(nil)); end
  end
end

class Hashdiff::LinearCompareArray
  def initialize(old_array, new_array, options); end

  def call; end

  private

  def additions; end
  def append_addition(item, index); end
  def append_addititions_before_match(match_index); end
  def append_deletion(item, index); end
  def append_deletions_before_match(match_index); end
  def append_differences(difference); end
  def changes; end
  def compare_at_index; end
  def deletions; end
  def differences; end
  def expected_additions; end
  def expected_additions=(_arg0); end
  def extra_items_in_new_array?; end
  def extra_items_in_old_array?; end
  def index_of_match_after_additions; end
  def index_of_match_after_deletions; end
  def item_difference(old_item, new_item, item_index); end
  def iterated_through_both_arrays?; end
  def new_array; end
  def new_index; end
  def new_index=(_arg0); end
  def old_array; end
  def old_index; end
  def old_index=(_arg0); end
  def options; end

  class << self
    def call(old_array, new_array, options = T.unsafe(nil)); end
  end
end

Hashdiff::VERSION = T.let(T.unsafe(nil), String)
