# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `zendesk_api` gem.
# Please instead update this file by running `bin/tapioca gem zendesk_api`.

module ZendeskAPI; end
class ZendeskAPI::Ability < ::ZendeskAPI::DataResource; end

module ZendeskAPI::Actions
  def add_action(field, value); end
end

class ZendeskAPI::Activity < ::ZendeskAPI::Resource
  def actor(*args); end
  def actor=(resource); end
  def actor_used?; end
  def user(*args); end
  def user=(resource); end
  def user_used?; end
end

class ZendeskAPI::AnonymousRequest < ::ZendeskAPI::CreateResource
  class << self
    def singular_resource_name; end
  end
end

class ZendeskAPI::App < ::ZendeskAPI::Resource
  def initialize(client, attributes = T.unsafe(nil)); end

  def attributes_for_save; end
  def handle_response(response); end
  def plans(*args); end
  def plans=(resources); end
  def plans_used?; end
  def upload(*args); end
  def upload=(resource); end
  def upload_used?; end

  class << self
    def create!(client, attributes = T.unsafe(nil), &block); end
    def installations(client, *args, &block); end
    def uploads(client, *args, &block); end
  end
end

class ZendeskAPI::App::Plan < ::ZendeskAPI::Resource; end

class ZendeskAPI::App::Upload < ::ZendeskAPI::Data
  include ::ZendeskAPI::ResponseHandler
  include ::ZendeskAPI::Save
  include ::ZendeskAPI::Create
  extend ::ZendeskAPI::Create::ClassMethods

  def initialize(client, attributes); end

  def attributes_for_save; end
  def changed?; end
  def save!(*_arg0); end

  class << self
    def resource_path; end
  end
end

class ZendeskAPI::AppInstallation < ::ZendeskAPI::Resource
  def attributes_for_save; end
  def handle_response(response); end

  class << self
    def singular_resource_name; end
  end
end

class ZendeskAPI::AppNotification < ::ZendeskAPI::CreateResource
  def attributes_for_save; end
  def handle_response(response); end

  class << self
    def resource_path; end
  end
end

class ZendeskAPI::Association
  def initialize(options = T.unsafe(nil)); end

  def generate_path(*args); end
  def options; end
  def side_load(resources, side_loads); end

  private

  def _side_load(resource, side_loads); end
  def build_parent_namespace(parent_class, instance, options, original_options); end
  def extract_id(instance, options, original_options); end
  def extract_parent_id(parent_class, instance, options, original_options); end
  def ignorable_namespace_strings; end
  def side_load_from_child_ids(resource, side_loads, plural_key); end
  def side_load_from_child_or_parent_id(resource, side_loads, key); end
  def side_load_from_parent_id(resource, side_loads, key); end

  class << self
    def class_from_namespace(klass_as_string); end
    def module_defines_class?(mod, klass_as_string); end
    def namespaces; end
  end
end

module ZendeskAPI::Associations
  mixes_in_class_methods ::ZendeskAPI::Associations::ClassMethods
  mixes_in_class_methods ::ZendeskAPI::Associations::ClassMethods::Has
  mixes_in_class_methods ::ZendeskAPI::Associations::ClassMethods::HasMany

  def wrap_resource(resource, class_level_association, options = T.unsafe(nil)); end

  class << self
    def included(base); end
  end
end

module ZendeskAPI::Associations::ClassMethods
  def associated_with(name); end
  def associations; end

  private

  def build_association(klass, resource_name, options); end
  def define_used(association); end

  class << self
    def extended(klass); end
  end
end

module ZendeskAPI::Associations::ClassMethods::Has
  def has(resource_name_or_class, class_level_options = T.unsafe(nil)); end

  private

  def define_has_getter(association); end
  def define_has_setter(association); end
end

module ZendeskAPI::Associations::ClassMethods::HasMany
  def has_many(resource_name_or_class, class_level_options = T.unsafe(nil)); end

  private

  def define_has_many_getter(association); end
  def define_has_many_setter(association); end
end

class ZendeskAPI::Attachment < ::ZendeskAPI::ReadResource
  def initialize(client, attributes = T.unsafe(nil)); end

  def save; end
  def to_param; end
end

class ZendeskAPI::Automation < ::ZendeskAPI::Rule
  include ::ZendeskAPI::Conditions
  include ::ZendeskAPI::Actions

  def execution(*args); end
  def execution=(resource); end
  def execution_used?; end
end

class ZendeskAPI::Bookmark < ::ZendeskAPI::Resource; end

class ZendeskAPI::Brand < ::ZendeskAPI::Resource
  def destroy!; end
end

class ZendeskAPI::Category < ::ZendeskAPI::Resource
  class << self
    def resource_path; end
  end
end

class ZendeskAPI::Client
  def initialize; end

  def callbacks; end
  def config; end
  def connection; end
  def current_account(reload = T.unsafe(nil)); end
  def current_locale(reload = T.unsafe(nil)); end
  def current_user(reload = T.unsafe(nil)); end
  def dynamic_content(*_arg0); end
  def insert_callback(&block); end
  def method_missing(method, *args, &block); end
  def respond_to?(method, *args); end
  def voice(*_arg0); end

  protected

  def build_connection; end

  private

  def add_warning_callback; end
  def check_url; end
  def method_as_class(method); end
  def set_default_logger; end
  def set_raise_error_when_rated_limited; end
  def set_token_auth; end

  class << self
    def check_deprecated_namespace_usage(attributes, name); end
  end
end

ZendeskAPI::Client::GZIP_EXCEPTIONS = T.let(T.unsafe(nil), Array)

class ZendeskAPI::Collection
  include ::ZendeskAPI::Sideloading

  def initialize(client, resource, options = T.unsafe(nil)); end

  def <<(item); end
  def all(start_page = T.unsafe(nil), &block); end
  def all!(start_page = T.unsafe(nil), &block); end
  def association; end
  def build(opts = T.unsafe(nil)); end
  def build!(opts = T.unsafe(nil)); end
  def clear_cache; end
  def count; end
  def count!; end
  def create(*args); end
  def create!(*args); end
  def create_many!(*args); end
  def destroy(*args); end
  def destroy!(*args); end
  def destroy_many!(*args); end
  def each_page(*args, &block); end
  def each_page!(*args, &block); end
  def error; end
  def fetch(*args); end
  def fetch!(reload = T.unsafe(nil)); end
  def find(*args); end
  def find!(*args); end
  def first_page?; end
  def include(*sideloads); end
  def included; end
  def last_page?; end
  def method_missing(name, *args, &block); end
  def next; end
  def options; end
  def page(number); end
  def path; end
  def per_page(count); end
  def prev; end
  def replace(collection); end
  def response; end
  def save; end
  def save!; end
  def to_a; end
  def to_a!; end
  def to_ary; end
  def to_param; end
  def to_s; end
  def to_str; end
  def update(*args); end
  def update!(*args); end
  def update_many(*args); end
  def update_many!(*args); end

  private

  def _all(start_page = T.unsafe(nil), bang = T.unsafe(nil), &block); end
  def _save(method = T.unsafe(nil)); end
  def array_method(name, *args, &block); end
  def collection_method(name, *args, &block); end
  def get_response(path); end
  def handle_response(response_body); end
  def join_special_params; end
  def next_collection(name, *args, &block); end
  def resource_methods; end
  def respond_to_missing?(name, include_all); end
  def set_association_from_options; end
  def set_page_and_count(body); end
  def with_association?; end
  def wrap_resource(res, with_association = T.unsafe(nil)); end
end

ZendeskAPI::Collection::SPECIALLY_JOINED_PARAMS = T.let(T.unsafe(nil), Array)

module ZendeskAPI::Conditions
  def add_all_condition(field, operator, value); end
  def add_any_condition(field, operator, value); end
  def all_conditions=(all_conditions); end
  def any_conditions=(any_conditions); end
end

class ZendeskAPI::Configuration
  def initialize; end

  def access_token; end
  def access_token=(_arg0); end
  def adapter; end
  def adapter=(_arg0); end
  def allow_http; end
  def allow_http=(_arg0); end
  def cache; end
  def cache=(_arg0); end
  def client_options; end
  def client_options=(_arg0); end
  def logger; end
  def logger=(_arg0); end
  def options; end
  def password; end
  def password=(_arg0); end
  def raise_error_when_rate_limited; end
  def raise_error_when_rate_limited=(_arg0); end
  def retry; end
  def retry=(_arg0); end
  def token; end
  def token=(_arg0); end
  def url; end
  def url=(_arg0); end
  def url_based_access_token; end
  def url_based_access_token=(_arg0); end
  def username; end
  def username=(_arg0); end
end

module ZendeskAPI::Create
  include ::ZendeskAPI::ResponseHandler
  include ::ZendeskAPI::Save

  mixes_in_class_methods ::ZendeskAPI::Create::ClassMethods

  class << self
    def included(base); end
  end
end

module ZendeskAPI::Create::ClassMethods
  def create(client, attributes = T.unsafe(nil), &block); end
  def create!(client, attributes = T.unsafe(nil), &block); end
end

module ZendeskAPI::CreateMany
  def create_many!(client, attributes_array, association = T.unsafe(nil)); end
end

module ZendeskAPI::CreateOrUpdate
  def create_or_update!(client, attributes, association = T.unsafe(nil)); end
end

module ZendeskAPI::CreateOrUpdateMany
  def create_or_update_many!(client, attributes); end
end

class ZendeskAPI::CreateResource < ::ZendeskAPI::DataResource
  include ::ZendeskAPI::ResponseHandler
  include ::ZendeskAPI::Save
  include ::ZendeskAPI::Create
  extend ::ZendeskAPI::Create::ClassMethods
end

class ZendeskAPI::CustomRole < ::ZendeskAPI::DataResource; end

class ZendeskAPI::Data
  include ::ZendeskAPI::Associations
  extend ::ZendeskAPI::Associations::ClassMethods
  extend ::ZendeskAPI::Associations::ClassMethods::Has
  extend ::ZendeskAPI::Associations::ClassMethods::HasMany

  def initialize(client, attributes = T.unsafe(nil)); end

  def ==(other); end
  def association; end
  def association=(_arg0); end
  def attributes; end
  def eql(other); end
  def errors; end
  def errors=(_arg0); end
  def id; end
  def inspect; end
  def loaded_associations; end
  def method_missing(*args, &block); end
  def new_record?; end
  def path(options = T.unsafe(nil)); end
  def response; end
  def response=(_arg0); end
  def to_json(*args); end
  def to_param; end
  def to_s; end

  private

  def attributes_for_save; end
  def respond_to_missing?(method, include_private = T.unsafe(nil)); end

  class << self
    def inherited(klass); end
    def model_key; end
    def namespace(namespace); end
    def new_from_response(client, response, includes = T.unsafe(nil)); end
    def resource_name; end
    def resource_path; end
    def singular_resource_name; end
    def subclasses; end
  end
end

module ZendeskAPI::DataNamespace
  class << self
    def descendants; end
    def included(base); end
  end
end

class ZendeskAPI::DataResource < ::ZendeskAPI::Data
  extend ::ZendeskAPI::Verbs

  def error; end
  def error=(_arg0); end
  def error_message; end
  def error_message=(_arg0); end
end

class ZendeskAPI::Delegator < ::SimpleDelegator; end

class ZendeskAPI::DeleteResource < ::ZendeskAPI::DataResource
  include ::ZendeskAPI::Destroy
  extend ::ZendeskAPI::Destroy::ClassMethod
end

module ZendeskAPI::Destroy
  mixes_in_class_methods ::ZendeskAPI::Destroy::ClassMethod

  def destroy(&block); end
  def destroy!; end
  def destroyed?; end

  class << self
    def included(klass); end
  end
end

module ZendeskAPI::Destroy::ClassMethod
  def destroy(client, attributes = T.unsafe(nil), &block); end
  def destroy!(client, opts = T.unsafe(nil), &block); end
end

module ZendeskAPI::DestroyMany
  def destroy_many!(client, ids, association = T.unsafe(nil)); end
end

module ZendeskAPI::DynamicContent
  include ::ZendeskAPI::DataNamespace
end

class ZendeskAPI::DynamicContent::Item < ::ZendeskAPI::Resource
  def variants(*args); end
  def variants=(resources); end
  def variants_used?; end
end

class ZendeskAPI::DynamicContent::Item::Variant < ::ZendeskAPI::Resource; end
module ZendeskAPI::Error; end

class ZendeskAPI::Error::ClientError < ::Faraday::ClientError
  def to_s; end
  def wrapped_exception; end
end

class ZendeskAPI::Error::NetworkError < ::ZendeskAPI::Error::ClientError; end
class ZendeskAPI::Error::RateLimited < ::ZendeskAPI::Error::ClientError; end

class ZendeskAPI::Error::RecordInvalid < ::ZendeskAPI::Error::ClientError
  def initialize(*_arg0); end

  def errors; end
  def errors=(_arg0); end
  def to_s; end
end

class ZendeskAPI::Error::RecordNotFound < ::ZendeskAPI::Error::ClientError; end
class ZendeskAPI::Group < ::ZendeskAPI::Resource; end

class ZendeskAPI::GroupMembership < ::ZendeskAPI::Resource
  extend ::ZendeskAPI::CreateMany
  extend ::ZendeskAPI::DestroyMany

  def group(*args); end
  def group=(resource); end
  def group_used?; end
  def user(*args); end
  def user=(resource); end
  def user_used?; end
end

module ZendeskAPI::Helpers
  class << self
    def modulize_string(string); end
    def snakecase_string(string); end
  end
end

class ZendeskAPI::JobStatus < ::ZendeskAPI::ReadResource; end

class ZendeskAPI::LRUCache
  def initialize(size = T.unsafe(nil)); end

  def fetch(key); end
  def read(key); end
  def size; end
  def size=(_arg0); end
  def write(key, value); end

  private

  def set_lru(key); end
end

class ZendeskAPI::Locale < ::ZendeskAPI::ReadResource; end

class ZendeskAPI::Macro < ::ZendeskAPI::Rule
  include ::ZendeskAPI::Actions

  def apply(ticket = T.unsafe(nil)); end
  def apply!(ticket = T.unsafe(nil)); end
  def execution(*args); end
  def execution=(resource); end
  def execution_used?; end
end

module ZendeskAPI::Middleware; end
module ZendeskAPI::Middleware::Request; end

class ZendeskAPI::Middleware::Request::EncodeJson < ::Faraday::Middleware
  def call(env); end
end

ZendeskAPI::Middleware::Request::EncodeJson::CONTENT_TYPE = T.let(T.unsafe(nil), String)
ZendeskAPI::Middleware::Request::EncodeJson::MIME_TYPE = T.let(T.unsafe(nil), String)

class ZendeskAPI::Middleware::Request::EtagCache < ::Faraday::Middleware
  def initialize(app, options = T.unsafe(nil)); end

  def cache_key(env); end
  def call(environment); end
end

class ZendeskAPI::Middleware::Request::RaiseRateLimited < ::Faraday::Middleware
  def initialize(app, options = T.unsafe(nil)); end

  def call(env); end
end

ZendeskAPI::Middleware::Request::RaiseRateLimited::ERROR_CODES = T.let(T.unsafe(nil), Array)

class ZendeskAPI::Middleware::Request::Retry < ::Faraday::Middleware
  def initialize(app, options = T.unsafe(nil)); end

  def call(env); end
end

ZendeskAPI::Middleware::Request::Retry::DEFAULT_RETRY_AFTER = T.let(T.unsafe(nil), Integer)
ZendeskAPI::Middleware::Request::Retry::ERROR_CODES = T.let(T.unsafe(nil), Array)

class ZendeskAPI::Middleware::Request::Upload < ::Faraday::Middleware
  def call(env); end

  private

  def set_file(hash, key, top_level); end
  def traverse_hash(hash); end
end

class ZendeskAPI::Middleware::Request::UrlBasedAccessToken < ::Faraday::Middleware
  def initialize(app, token); end

  def call(env); end
end

module ZendeskAPI::Middleware::Response; end

class ZendeskAPI::Middleware::Response::Callback < ::Faraday::Response::Middleware
  def initialize(app, client); end

  def call(env); end
end

class ZendeskAPI::Middleware::Response::Deflate < ::Faraday::Response::Middleware
  def on_complete(env); end
end

class ZendeskAPI::Middleware::Response::Gzip < ::Faraday::Response::Middleware
  def on_complete(env); end
end

class ZendeskAPI::Middleware::Response::Logger < ::Faraday::Middleware
  def initialize(app, logger = T.unsafe(nil)); end

  def call(env); end

  private

  def dump_debug(env, headers_key); end
end

ZendeskAPI::Middleware::Response::Logger::LOG_LENGTH = T.let(T.unsafe(nil), Integer)

class ZendeskAPI::Middleware::Response::ParseIsoDates < ::Faraday::Response::Middleware
  def call(env); end

  private

  def parse_dates!(value); end
end

class ZendeskAPI::Middleware::Response::ParseJson < ::Faraday::Response::Middleware
  def on_complete(env); end
end

ZendeskAPI::Middleware::Response::ParseJson::CONTENT_TYPE = T.let(T.unsafe(nil), String)

class ZendeskAPI::Middleware::Response::RaiseError < ::Faraday::Response::RaiseError
  def call(env); end
  def on_complete(env); end
end

class ZendeskAPI::Middleware::Response::SanitizeResponse < ::Faraday::Response::Middleware
  def on_complete(env); end
end

class ZendeskAPI::MobileDevice < ::ZendeskAPI::Resource
  def clear_badge(*method_args); end
  def clear_badge!(*method_args); end
end

class ZendeskAPI::OauthClient < ::ZendeskAPI::Resource
  class << self
    def singular_resource_name; end
  end
end

class ZendeskAPI::OauthToken < ::ZendeskAPI::ReadResource
  include ::ZendeskAPI::Destroy
  extend ::ZendeskAPI::Destroy::ClassMethod

  class << self
    def singular_resource_name; end
  end
end

class ZendeskAPI::Organization < ::ZendeskAPI::Resource
  extend ::ZendeskAPI::CreateMany
  extend ::ZendeskAPI::CreateOrUpdate
  extend ::ZendeskAPI::DestroyMany

  def ability(*args); end
  def ability=(resource); end
  def ability_used?; end
  def group(*args); end
  def group=(resource); end
  def group_used?; end
  def organization_memberships(*args); end
  def organization_memberships=(resources); end
  def organization_memberships_used?; end
  def subscriptions(*args); end
  def subscriptions=(resources); end
  def subscriptions_used?; end
  def tags(*args); end
  def tags=(resources); end
  def tags_used?; end
  def tickets(*args); end
  def tickets=(resources); end
  def tickets_used?; end
  def users(*args); end
  def users=(resources); end
  def users_used?; end

  class << self
    def incremental_export(client, start_time); end
  end
end

class ZendeskAPI::OrganizationField < ::ZendeskAPI::Resource; end

class ZendeskAPI::OrganizationMembership < ::ZendeskAPI::ReadResource
  include ::ZendeskAPI::Save
  include ::ZendeskAPI::Create
  include ::ZendeskAPI::Destroy
  extend ::ZendeskAPI::Create::ClassMethods
  extend ::ZendeskAPI::Destroy::ClassMethod
  extend ::ZendeskAPI::CreateMany
  extend ::ZendeskAPI::DestroyMany

  def organization(*args); end
  def organization=(resource); end
  def organization_used?; end
  def user(*args); end
  def user=(resource); end
  def user_used?; end
end

class ZendeskAPI::OrganizationSubscription < ::ZendeskAPI::ReadResource
  include ::ZendeskAPI::Save
  include ::ZendeskAPI::Create
  include ::ZendeskAPI::Destroy
  extend ::ZendeskAPI::Create::ClassMethods
  extend ::ZendeskAPI::Destroy::ClassMethod

  def organization(*args); end
  def organization=(resource); end
  def organization_used?; end
  def user(*args); end
  def user=(resource); end
  def user_used?; end
end

class ZendeskAPI::PushNotificationDevice < ::ZendeskAPI::DataResource
  class << self
    def destroy_many(client, tokens); end
  end
end

module ZendeskAPI::Read
  include ::ZendeskAPI::ResponseHandler
  include ::ZendeskAPI::Sideloading

  mixes_in_class_methods ::ZendeskAPI::Read::ClassMethods

  def included; end
  def reload!; end

  class << self
    def included(base); end
  end
end

module ZendeskAPI::Read::ClassMethods
  def find(client, options = T.unsafe(nil), &block); end
  def find!(client, options = T.unsafe(nil)); end
end

class ZendeskAPI::ReadResource < ::ZendeskAPI::DataResource
  include ::ZendeskAPI::ResponseHandler
  include ::ZendeskAPI::Sideloading
  include ::ZendeskAPI::Read
  extend ::ZendeskAPI::Read::ClassMethods
end

class ZendeskAPI::Request < ::ZendeskAPI::Resource
  def comment(*args); end
  def comment=(resource); end
  def comment_used?; end
  def comments(*args); end
  def comments=(resources); end
  def comments_used?; end
  def group(*args); end
  def group=(resource); end
  def group_used?; end
  def organization(*args); end
  def organization=(resource); end
  def organization_used?; end
  def requester(*args); end
  def requester=(resource); end
  def requester_used?; end
end

class ZendeskAPI::Request::Comment < ::ZendeskAPI::DataResource
  include ::ZendeskAPI::ResponseHandler
  include ::ZendeskAPI::Save

  def author(*args); end
  def author=(resource); end
  def author_used?; end
  def save; end
  def save!; end
  def uploads(*args); end
  def uploads=(resources); end
  def uploads_used?; end
end

class ZendeskAPI::Resource < ::ZendeskAPI::DataResource
  include ::ZendeskAPI::ResponseHandler
  include ::ZendeskAPI::Sideloading
  include ::ZendeskAPI::Read
  include ::ZendeskAPI::Save
  include ::ZendeskAPI::Create
  include ::ZendeskAPI::Update
  include ::ZendeskAPI::Destroy
  extend ::ZendeskAPI::Read::ClassMethods
  extend ::ZendeskAPI::Create::ClassMethods
  extend ::ZendeskAPI::Update::ClassMethod
  extend ::ZendeskAPI::Destroy::ClassMethod
end

module ZendeskAPI::ResponseHandler
  def handle_response(response); end
end

class ZendeskAPI::Role < ::ZendeskAPI::DataResource
  def to_param; end
end

class ZendeskAPI::Rule < ::ZendeskAPI::Resource
  private

  def attributes_for_save; end
end

class ZendeskAPI::RuleExecution < ::ZendeskAPI::Data
  def custom_fields(*args); end
  def custom_fields=(resources); end
  def custom_fields_used?; end
end

class ZendeskAPI::SatisfactionRating < ::ZendeskAPI::ReadResource
  def assignee(*args); end
  def assignee=(resource); end
  def assignee_used?; end
  def group(*args); end
  def group=(resource); end
  def group_used?; end
  def requester(*args); end
  def requester=(resource); end
  def requester_used?; end
  def ticket(*args); end
  def ticket=(resource); end
  def ticket_used?; end
end

module ZendeskAPI::Save
  include ::ZendeskAPI::ResponseHandler

  def clear_associations; end
  def save(options = T.unsafe(nil), &block); end
  def save!(options = T.unsafe(nil)); end
  def save_associations; end
end

class ZendeskAPI::Search
  class << self
    def model_key; end
    def new(client, attributes); end
    def resource_name; end
    def resource_path; end
    def search(client, options = T.unsafe(nil)); end
  end
end

class ZendeskAPI::Search::Result < ::ZendeskAPI::Data; end

class ZendeskAPI::Session < ::ZendeskAPI::ReadResource
  include ::ZendeskAPI::Destroy
  extend ::ZendeskAPI::Destroy::ClassMethod
end

class ZendeskAPI::Setting < ::ZendeskAPI::UpdateResource
  def initialize(client, attributes = T.unsafe(nil)); end

  def attributes_for_save; end
  def new_record?; end
  def on; end
  def path(options = T.unsafe(nil)); end
end

class ZendeskAPI::SharingAgreement < ::ZendeskAPI::ReadResource; end

module ZendeskAPI::Sideloading
  def set_includes(resource_or_resources, includes, body); end

  private

  def _side_load(name, klass, resources); end
  def to_array(item); end

  class << self
    def included(klass); end
  end
end

class ZendeskAPI::SilentMash < ::Hashie::Mash; end

class ZendeskAPI::SingularResource < ::ZendeskAPI::Resource
  def attributes_for_save; end
end

class ZendeskAPI::SuspendedTicket < ::ZendeskAPI::ReadResource
  include ::ZendeskAPI::Destroy
  extend ::ZendeskAPI::Destroy::ClassMethod

  def recover(*method_args); end
  def recover!(*method_args); end
end

class ZendeskAPI::Tag < ::ZendeskAPI::DataResource
  include ::ZendeskAPI::ResponseHandler
  include ::ZendeskAPI::Save
  include ::ZendeskAPI::Update
  include ::ZendeskAPI::Destroy
  extend ::ZendeskAPI::Update::ClassMethod
  extend ::ZendeskAPI::Destroy::ClassMethod

  def attributes_for_save; end
  def changed?; end
  def destroy!; end
  def name; end
  def path(opts = T.unsafe(nil)); end
  def to_param; end
end

module ZendeskAPI::Tag::Update
  def _save(method = T.unsafe(nil)); end
end

class ZendeskAPI::Target < ::ZendeskAPI::Resource; end

class ZendeskAPI::Ticket < ::ZendeskAPI::Resource
  extend ::ZendeskAPI::CreateMany
  extend ::ZendeskAPI::UpdateMany
  extend ::ZendeskAPI::DestroyMany

  def assignee(*args); end
  def assignee=(resource); end
  def assignee_used?; end
  def audits(*args); end
  def audits=(resources); end
  def audits_used?; end
  def brand(*args); end
  def brand=(resource); end
  def brand_used?; end
  def collaborators(*args); end
  def collaborators=(resources); end
  def collaborators_used?; end
  def comment(*args); end
  def comment=(resource); end
  def comment_used?; end
  def comments(*args); end
  def comments=(resources); end
  def comments_used?; end
  def group(*args); end
  def group=(resource); end
  def group_used?; end
  def incidents(*args); end
  def incidents=(resources); end
  def incidents_used?; end
  def last_comment(*args); end
  def last_comment=(resource); end
  def last_comment_used?; end
  def last_comments(*args); end
  def last_comments=(resources); end
  def last_comments_used?; end
  def mark_as_spam(*method_args); end
  def mark_as_spam!(*method_args); end
  def merge(*method_args); end
  def merge!(*method_args); end
  def metrics(*args); end
  def metrics=(resource); end
  def metrics_used?; end
  def organization(*args); end
  def organization=(resource); end
  def organization_used?; end
  def related(*args); end
  def related=(resource); end
  def related_used?; end
  def requester(*args); end
  def requester=(resource); end
  def requester_used?; end
  def submitter(*args); end
  def submitter=(resource); end
  def submitter_used?; end
  def tags(*args); end
  def tags=(resources); end
  def tags_used?; end

  class << self
    def import(client, attributes); end
    def import!(client, attributes); end
    def incremental_export(client, start_time); end
  end
end

class ZendeskAPI::Ticket::Audit < ::ZendeskAPI::DataResource
  def author(*args); end
  def author=(resource); end
  def author_used?; end
  def events(*args); end
  def events=(resources); end
  def events_used?; end
  def trust(*method_args); end
  def trust!(*method_args); end
end

class ZendeskAPI::Ticket::Audit::Event < ::ZendeskAPI::Data
  def author(*args); end
  def author=(resource); end
  def author_used?; end
end

class ZendeskAPI::Ticket::Comment < ::ZendeskAPI::DataResource
  include ::ZendeskAPI::ResponseHandler
  include ::ZendeskAPI::Save

  def author(*args); end
  def author=(resource); end
  def author_used?; end
  def save; end
  def save!; end
  def uploads(*args); end
  def uploads=(resources); end
  def uploads_used?; end
end

class ZendeskAPI::Ticket::SatisfactionRating < ::ZendeskAPI::CreateResource
  class << self
    def resource_name; end
  end
end

class ZendeskAPI::TicketEvent < ::ZendeskAPI::DataResource
  def child_events(*args); end
  def child_events=(resources); end
  def child_events_used?; end
  def ticket(*args); end
  def ticket=(resource); end
  def ticket_used?; end
  def updater(*args); end
  def updater=(resource); end
  def updater_used?; end

  class << self
    def incremental_export(client, start_time); end
  end
end

class ZendeskAPI::TicketEvent::Event < ::ZendeskAPI::Data; end
class ZendeskAPI::TicketField < ::ZendeskAPI::Resource; end
class ZendeskAPI::TicketForm < ::ZendeskAPI::Resource; end

class ZendeskAPI::TicketMetric < ::ZendeskAPI::DataResource
  include ::ZendeskAPI::ResponseHandler
  include ::ZendeskAPI::Sideloading
  include ::ZendeskAPI::Read
  extend ::ZendeskAPI::Read::ClassMethods
end

class ZendeskAPI::TicketRelated < ::ZendeskAPI::DataResource; end

class ZendeskAPI::Topic < ::ZendeskAPI::Resource
  def attachments(*args); end
  def attachments=(resources); end
  def attachments_used?; end
  def subscriptions(*args); end
  def subscriptions=(resources); end
  def subscriptions_used?; end
  def tags(*args); end
  def tags=(resources); end
  def tags_used?; end
  def uploads(*args); end
  def uploads=(resources); end
  def uploads_used?; end

  class << self
    def resource_path; end
  end
end

class ZendeskAPI::TopicSubscription < ::ZendeskAPI::Resource
  def path(options = T.unsafe(nil)); end
  def topic(*args); end
  def topic=(resource); end
  def topic_used?; end
  def user(*args); end
  def user=(resource); end
  def user_used?; end

  class << self
    def model_key; end
  end
end

module ZendeskAPI::TrackChanges
  include ::ZendeskAPI::TrackChanges::InstanceMethods

  class << self
    def included(base); end
  end
end

module ZendeskAPI::TrackChanges::InstanceMethods
  def changed?(key = T.unsafe(nil)); end
  def changes; end
  def clear; end
  def clear_changes; end
  def delete(key); end
  def dirty?(key = T.unsafe(nil)); end
  def regular_writer(key, value); end
  def replace(other); end
end

class ZendeskAPI::Trackie < ::ZendeskAPI::SilentMash
  include ::ZendeskAPI::TrackChanges
  include ::ZendeskAPI::TrackChanges::InstanceMethods

  def size; end
end

class ZendeskAPI::Trigger < ::ZendeskAPI::Rule
  include ::ZendeskAPI::Conditions
  include ::ZendeskAPI::Actions

  def execution(*args); end
  def execution=(resource); end
  def execution_used?; end
end

module ZendeskAPI::Update
  include ::ZendeskAPI::ResponseHandler
  include ::ZendeskAPI::Save

  mixes_in_class_methods ::ZendeskAPI::Update::ClassMethod

  class << self
    def included(klass); end
  end
end

module ZendeskAPI::Update::ClassMethod
  def update(client, attributes = T.unsafe(nil), &block); end
  def update!(client, attributes = T.unsafe(nil), &block); end
end

module ZendeskAPI::UpdateMany
  def update_many!(client, ids_or_attributes, attributes = T.unsafe(nil)); end
end

class ZendeskAPI::UpdateResource < ::ZendeskAPI::DataResource
  include ::ZendeskAPI::ResponseHandler
  include ::ZendeskAPI::Save
  include ::ZendeskAPI::Update
  extend ::ZendeskAPI::Update::ClassMethod
end

class ZendeskAPI::Upload < ::ZendeskAPI::Data
  include ::ZendeskAPI::ResponseHandler
  include ::ZendeskAPI::Save
  include ::ZendeskAPI::Create
  include ::ZendeskAPI::Destroy
  extend ::ZendeskAPI::Create::ClassMethods
  extend ::ZendeskAPI::Destroy::ClassMethod

  def attachments(*args); end
  def attachments=(resources); end
  def attachments_used?; end
  def id; end

  private

  def attributes_for_save; end
end

class ZendeskAPI::User < ::ZendeskAPI::Resource
  extend ::ZendeskAPI::CreateMany
  extend ::ZendeskAPI::UpdateMany
  extend ::ZendeskAPI::CreateOrUpdate
  extend ::ZendeskAPI::CreateOrUpdateMany
  extend ::ZendeskAPI::DestroyMany

  def ability(*args); end
  def ability=(resource); end
  def ability_used?; end
  def assigned_tickets(*args); end
  def assigned_tickets=(resources); end
  def assigned_tickets_used?; end
  def attributes_for_save; end
  def ccd_tickets(*args); end
  def ccd_tickets=(resources); end
  def ccd_tickets_used?; end
  def change_password(opts = T.unsafe(nil)); end
  def change_password!(opts = T.unsafe(nil)); end
  def clear_sessions; end
  def clear_sessions!; end
  def current_session; end
  def custom_role(*args); end
  def custom_role=(resource); end
  def custom_role_used?; end
  def group_memberships(*args); end
  def group_memberships=(resources); end
  def group_memberships_used?; end
  def groups(*args); end
  def groups=(resources); end
  def groups_used?; end
  def handle_response(*_arg0); end
  def identities(*args); end
  def identities=(resources); end
  def identities_used?; end
  def logout(*method_args); end
  def logout!(*method_args); end
  def merge(*method_args); end
  def merge!(*method_args); end
  def organization(*args); end
  def organization=(resource); end
  def organization_memberships(*args); end
  def organization_memberships=(resources); end
  def organization_memberships_used?; end
  def organization_subscriptions(*args); end
  def organization_subscriptions=(resources); end
  def organization_subscriptions_used?; end
  def organization_used?; end
  def password(*method_args); end
  def password!(*method_args); end
  def related(*args); end
  def related=(resource); end
  def related_used?; end
  def requested_tickets(*args); end
  def requested_tickets=(resources); end
  def requested_tickets_used?; end
  def requests(*args); end
  def requests=(resources); end
  def requests_used?; end
  def role(*args); end
  def role=(resource); end
  def role_used?; end
  def sessions(*args); end
  def sessions=(resources); end
  def sessions_used?; end
  def set_password(opts = T.unsafe(nil)); end
  def set_password!(opts = T.unsafe(nil)); end
  def settings(*args); end
  def settings=(resources); end
  def settings_used?; end
  def tags(*args); end
  def tags=(resources); end
  def tags_used?; end

  class << self
    def incremental_export(client, start_time); end
  end
end

class ZendeskAPI::User::CurrentSession < ::ZendeskAPI::SingularResource
  class << self
    def resource_name; end
    def singular_resource_name; end
  end
end

class ZendeskAPI::User::GroupMembership < ::ZendeskAPI::Resource
  def make_default(*method_args); end
  def make_default!(*method_args); end
end

class ZendeskAPI::User::Identity < ::ZendeskAPI::Resource
  def make_primary(*method_args); end
  def make_primary!(*method_args); end
  def request_verification(*method_args); end
  def request_verification!(*method_args); end
  def verify(*method_args); end
  def verify!(*method_args); end
end

class ZendeskAPI::User::Session < ::ZendeskAPI::Resource; end
class ZendeskAPI::UserField < ::ZendeskAPI::Resource; end
class ZendeskAPI::UserRelated < ::ZendeskAPI::DataResource; end

class ZendeskAPI::UserView < ::ZendeskAPI::Rule
  class << self
    def preview(client, options = T.unsafe(nil)); end
  end
end

class ZendeskAPI::UserViewRow < ::ZendeskAPI::DataResource
  def user(*args); end
  def user=(resource); end
  def user_used?; end

  class << self
    def model_key; end
  end
end

ZendeskAPI::VERSION = T.let(T.unsafe(nil), String)

module ZendeskAPI::Verbs
  def any(method); end
  def delete(method); end
  def post(method); end
  def put(method); end

  class << self
    private

    def create_verb(method_verb); end
  end
end

class ZendeskAPI::View < ::ZendeskAPI::Rule
  include ::ZendeskAPI::Conditions

  def add_column(column); end
  def columns=(columns); end
  def execution(*args); end
  def execution=(resource); end
  def execution_used?; end
  def feed(*args); end
  def feed=(resources); end
  def feed_used?; end
  def rows(*args); end
  def rows=(resources); end
  def rows_used?; end
  def tickets(*args); end
  def tickets=(resources); end
  def tickets_used?; end
  def view_count(*args); end
  def view_count=(resource); end
  def view_count_used?; end

  class << self
    def preview(client, options = T.unsafe(nil)); end
  end
end

class ZendeskAPI::ViewCount < ::ZendeskAPI::DataResource; end

class ZendeskAPI::ViewRow < ::ZendeskAPI::DataResource
  def assignee(*args); end
  def assignee=(resource); end
  def assignee_used?; end
  def group(*args); end
  def group=(resource); end
  def group_used?; end
  def organization(*args); end
  def organization=(resource); end
  def organization_used?; end
  def requester(*args); end
  def requester=(resource); end
  def requester_used?; end
  def submitter(*args); end
  def submitter=(resource); end
  def submitter_used?; end
  def ticket(*args); end
  def ticket=(resource); end
  def ticket_used?; end

  class << self
    def model_key; end
  end
end

module ZendeskAPI::Voice
  include ::ZendeskAPI::DataNamespace
end

class ZendeskAPI::Voice::Address < ::ZendeskAPI::Resource; end

class ZendeskAPI::Voice::Agent < ::ZendeskAPI::ReadResource
  def tickets(*args); end
  def tickets=(resources); end
  def tickets_used?; end
end

class ZendeskAPI::Voice::Agent::Ticket < ::ZendeskAPI::CreateResource
  def new_record?; end

  class << self
    def display!(client, options); end
  end
end

class ZendeskAPI::Voice::Greeting < ::ZendeskAPI::Resource; end
class ZendeskAPI::Voice::GreetingCategory < ::ZendeskAPI::Resource; end
class ZendeskAPI::Voice::PhoneNumber < ::ZendeskAPI::Resource; end
class ZendeskAPI::Voice::Ticket < ::ZendeskAPI::CreateResource; end
