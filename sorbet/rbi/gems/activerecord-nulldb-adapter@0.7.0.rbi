# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `activerecord-nulldb-adapter` gem.
# Please instead update this file by running `bin/tapioca gem activerecord-nulldb-adapter`.

class ActiveRecord::Base
  include ::ActiveRecord::Core
  include ::ActiveRecord::Persistence
  include ::ActiveRecord::ReadonlyAttributes
  include ::ActiveRecord::ModelSchema
  include ::ActiveRecord::Inheritance
  include ::ActiveRecord::Scoping
  include ::ActiveRecord::Scoping::Default
  include ::ActiveRecord::Scoping::Named
  include ::ActiveRecord::Sanitization
  include ::ActiveModel::ForbiddenAttributesProtection
  include ::ActiveModel::AttributeAssignment
  include ::ActiveRecord::AttributeAssignment
  include ::ActiveModel::Conversion
  include ::ActiveRecord::Integration
  include ::ActiveModel::Validations
  include ::ActiveSupport::Callbacks
  include ::ActiveModel::Validations::HelperMethods
  include ::ActiveRecord::Validations
  include ::ActiveRecord::CounterCache
  include ::ActiveRecord::Attributes
  include ::ActiveRecord::Locking::Optimistic
  include ::ActiveRecord::Locking::Pessimistic
  include ::ActiveModel::AttributeMethods
  include ::ActiveRecord::AttributeMethods
  include ::ActiveRecord::Base::GeneratedAttributeMethods
  include ::ActiveRecord::Base::GeneratedAssociationMethods
  include ::ActiveRecord::AttributeMethods::Read
  include ::ActiveRecord::AttributeMethods::Write
  include ::ActiveRecord::AttributeMethods::BeforeTypeCast
  include ::ActiveRecord::AttributeMethods::Query
  include ::ActiveRecord::AttributeMethods::PrimaryKey
  include ::ActiveRecord::AttributeMethods::TimeZoneConversion
  include ::ActiveModel::Dirty
  include ::ActiveRecord::AttributeMethods::Dirty
  include ::ActiveRecord::AttributeMethods::Serialization
  include ::ActiveRecord::Callbacks
  include ::ActiveModel::Validations::Callbacks
  include ::ActiveRecord::Timestamp
  include ::ActiveRecord::Associations
  include ::ActiveModel::SecurePassword
  include ::ActiveRecord::AutosaveAssociation
  include ::ActiveRecord::NestedAttributes
  include ::ActiveRecord::Transactions
  include ::ActiveRecord::TouchLater
  include ::ActiveRecord::NoTouching
  include ::ActiveRecord::Reflection
  include ::ActiveModel::Serialization
  include ::ActiveModel::Serializers::JSON
  include ::ActiveRecord::Serialization
  include ::ActiveRecord::Store
  include ::ActiveRecord::SecureToken
  include ::ActiveRecord::SignedId
  include ::ActiveRecord::Suppressor
  include ::AttrEncrypted::InstanceMethods
  include ::CanCan::ModelAdditions
  include ::PaperTrail::Model
  extend ::ActiveModel::Naming
  extend ::ActiveSupport::Benchmarkable
  extend ::ActiveSupport::DescendantsTracker
  extend ::ActiveRecord::ConnectionHandling
  extend ::ActiveRecord::QueryCache::ClassMethods
  extend ::ActiveRecord::Querying
  extend ::ActiveModel::Translation
  extend ::ActiveRecord::Translation
  extend ::ActiveRecord::DynamicMatchers
  extend ::ActiveRecord::DelegatedType
  extend ::ActiveRecord::Explain
  extend ::ActiveRecord::Enum
  extend ::ActiveRecord::Delegation::DelegateCache
  extend ::ActiveRecord::Aggregations::ClassMethods
  extend ::ActiveRecord::Core::ClassMethods
  extend ::ActiveRecord::Persistence::ClassMethods
  extend ::ActiveRecord::ReadonlyAttributes::ClassMethods
  extend ::ActiveRecord::ModelSchema::ClassMethods
  extend ::ActiveRecord::Inheritance::ClassMethods
  extend ::ActiveRecord::Scoping::ClassMethods
  extend ::ActiveRecord::Scoping::Default::ClassMethods
  extend ::ActiveRecord::Scoping::Named::ClassMethods
  extend ::ActiveRecord::Sanitization::ClassMethods
  extend ::ActiveModel::Conversion::ClassMethods
  extend ::ActiveRecord::Integration::ClassMethods
  extend ::ActiveModel::Validations::ClassMethods
  extend ::ActiveModel::Callbacks
  extend ::ActiveSupport::Callbacks::ClassMethods
  extend ::ActiveModel::Validations::HelperMethods
  extend ::ActiveRecord::Validations::ClassMethods
  extend ::ActiveRecord::CounterCache::ClassMethods
  extend ::ActiveRecord::Attributes::ClassMethods
  extend ::ActiveRecord::Locking::Optimistic::ClassMethods
  extend ::ActiveModel::AttributeMethods::ClassMethods
  extend ::ActiveRecord::AttributeMethods::ClassMethods
  extend ::ActiveRecord::AttributeMethods::Read::ClassMethods
  extend ::ActiveRecord::AttributeMethods::Write::ClassMethods
  extend ::ActiveRecord::AttributeMethods::PrimaryKey::ClassMethods
  extend ::ActiveRecord::AttributeMethods::TimeZoneConversion::ClassMethods
  extend ::ActiveRecord::AttributeMethods::Serialization::ClassMethods
  extend ::ActiveRecord::Callbacks::ClassMethods
  extend ::ActiveModel::Validations::Callbacks::ClassMethods
  extend ::ActiveRecord::Timestamp::ClassMethods
  extend ::ActiveRecord::Associations::ClassMethods
  extend ::ActiveModel::SecurePassword::ClassMethods
  extend ::ActiveRecord::AutosaveAssociation::ClassMethods
  extend ::ActiveRecord::NestedAttributes::ClassMethods
  extend ::ActiveRecord::Transactions::ClassMethods
  extend ::ActiveRecord::NoTouching::ClassMethods
  extend ::ActiveRecord::Reflection::ClassMethods
  extend ::ActiveRecord::Store::ClassMethods
  extend ::ActiveRecord::SecureToken::ClassMethods
  extend ::ActiveRecord::SignedId::ClassMethods
  extend ::ActiveRecord::Suppressor::ClassMethods
  extend ::AttrEncrypted
  extend ::AttrEncrypted::Adapters::ActiveRecord
  extend ::CanCan::ModelAdditions::ClassMethods
  extend ::OrmAdapter::ToAdapter
  extend ::PaperTrail::Model::ClassMethods
  extend ::ActiveRecord::Import::Connection

  def __callbacks; end
  def __callbacks?; end
  def _before_commit_callbacks; end
  def _commit_callbacks; end
  def _create_callbacks; end
  def _destroy_callbacks; end
  def _find_callbacks; end
  def _initialize_callbacks; end
  def _reflections; end
  def _reflections?; end
  def _rollback_callbacks; end
  def _run_before_commit_callbacks(&block); end
  def _run_commit_callbacks(&block); end
  def _run_create_callbacks(&block); end
  def _run_destroy_callbacks(&block); end
  def _run_find_callbacks(&block); end
  def _run_initialize_callbacks(&block); end
  def _run_rollback_callbacks(&block); end
  def _run_save_callbacks(&block); end
  def _run_touch_callbacks(&block); end
  def _run_update_callbacks(&block); end
  def _run_validate_callbacks(&block); end
  def _run_validation_callbacks(&block); end
  def _save_callbacks; end
  def _touch_callbacks; end
  def _update_callbacks; end
  def _validate_callbacks; end
  def _validation_callbacks; end
  def _validators; end
  def _validators?; end
  def aggregate_reflections; end
  def aggregate_reflections?; end
  def assign_attributes(*args); end
  def assign_attributes_without_attr_encrypted(new_attributes); end
  def attr_encrypted_options=(_arg0); end
  def attribute_aliases; end
  def attribute_aliases?; end
  def attribute_method_matchers; end
  def attribute_method_matchers?; end
  def attributes=(*args); end
  def attributes_without_attr_encrypted=(new_attributes); end
  def cache_timestamp_format; end
  def cache_timestamp_format?; end
  def cache_versioning; end
  def cache_versioning?; end
  def collection_cache_versioning; end
  def collection_cache_versioning?; end
  def column_for_attribute(*_arg0, &_arg1); end
  def default_connection_handler; end
  def default_connection_handler?; end
  def default_role; end
  def default_role?; end
  def default_scope_override; end
  def default_scopes; end
  def default_shard; end
  def default_shard?; end
  def default_timezone; end
  def defined_enums; end
  def defined_enums?; end
  def destroy_association_async_job; end
  def dump_schema_after_migration; end
  def dump_schemas; end
  def error_on_ignored_order; end
  def include_root_in_json; end
  def include_root_in_json?; end
  def index_nested_attribute_errors; end
  def legacy_connection_handling; end
  def lock_optimistically; end
  def lock_optimistically?; end
  def logger; end
  def model_name(*_arg0, &_arg1); end
  def nested_attributes_options; end
  def nested_attributes_options?; end
  def partial_writes; end
  def partial_writes?; end
  def pluralize_table_names; end
  def pluralize_table_names?; end
  def primary_key_prefix_type; end
  def record_timestamps; end
  def record_timestamps=(_arg0); end
  def record_timestamps?; end
  def reload(*args, &block); end
  def reload_without_attr_encrypted(options = T.unsafe(nil)); end
  def schema_format; end
  def signed_id_verifier_secret; end
  def skip_time_zone_conversion_for_attributes; end
  def skip_time_zone_conversion_for_attributes?; end
  def store_full_class_name; end
  def store_full_class_name?; end
  def store_full_sti_class; end
  def store_full_sti_class?; end
  def suppress_multiple_database_warning; end
  def synchronize(instances, key = T.unsafe(nil)); end
  def table_name_prefix; end
  def table_name_prefix?; end
  def table_name_suffix; end
  def table_name_suffix?; end
  def time_zone_aware_attributes; end
  def time_zone_aware_types; end
  def time_zone_aware_types?; end
  def timestamped_migrations; end
  def type_for_attribute(*_arg0, &_arg1); end
  def validation_context; end
  def verbose_query_logs; end
  def warn_on_records_fetched_greater_than; end

  private

  def perform_attribute_assignment(method, new_attributes, *args); end
  def validation_context=(_arg0); end

  class << self
    def __callbacks; end
    def __callbacks=(value); end
    def __callbacks?; end
    def _attr_readonly; end
    def _attr_readonly=(value); end
    def _attr_readonly?; end
    def _before_commit_callbacks; end
    def _before_commit_callbacks=(value); end
    def _commit_callbacks; end
    def _commit_callbacks=(value); end
    def _create_callbacks; end
    def _create_callbacks=(value); end
    def _destroy_callbacks; end
    def _destroy_callbacks=(value); end
    def _find_callbacks; end
    def _find_callbacks=(value); end
    def _initialize_callbacks; end
    def _initialize_callbacks=(value); end
    def _reflections; end
    def _reflections=(value); end
    def _reflections?; end
    def _rollback_callbacks; end
    def _rollback_callbacks=(value); end
    def _save_callbacks; end
    def _save_callbacks=(value); end
    def _touch_callbacks; end
    def _touch_callbacks=(value); end
    def _update_callbacks; end
    def _update_callbacks=(value); end
    def _validate_callbacks; end
    def _validate_callbacks=(value); end
    def _validation_callbacks; end
    def _validation_callbacks=(value); end
    def _validators; end
    def _validators=(value); end
    def _validators?; end
    def action_on_strict_loading_violation; end
    def action_on_strict_loading_violation=(val); end
    def after_create(*args, **options, &block); end
    def after_destroy(*args, **options, &block); end
    def after_find(*args, **options, &block); end
    def after_initialize(*args, **options, &block); end
    def after_save(*args, **options, &block); end
    def after_touch(*args, **options, &block); end
    def after_update(*args, **options, &block); end
    def aggregate_reflections; end
    def aggregate_reflections=(value); end
    def aggregate_reflections?; end
    def allow_unsafe_raw_sql; end
    def allow_unsafe_raw_sql=(value); end
    def around_create(*args, **options, &block); end
    def around_destroy(*args, **options, &block); end
    def around_save(*args, **options, &block); end
    def around_update(*args, **options, &block); end
    def attribute_aliases; end
    def attribute_aliases=(value); end
    def attribute_aliases?; end
    def attribute_method_matchers; end
    def attribute_method_matchers=(value); end
    def attribute_method_matchers?; end
    def attributes_to_define_after_schema_loads; end
    def attributes_to_define_after_schema_loads=(value); end
    def attributes_to_define_after_schema_loads?; end
    def before_create(*args, **options, &block); end
    def before_destroy(*args, **options, &block); end
    def before_save(*args, **options, &block); end
    def before_update(*args, **options, &block); end
    def belongs_to_required_by_default; end
    def belongs_to_required_by_default=(value); end
    def belongs_to_required_by_default?; end
    def bulk_import(*args); end
    def bulk_import!(*args); end
    def cache_timestamp_format; end
    def cache_timestamp_format=(value); end
    def cache_timestamp_format?; end
    def cache_versioning; end
    def cache_versioning=(value); end
    def cache_versioning?; end
    def collection_cache_versioning; end
    def collection_cache_versioning=(value); end
    def collection_cache_versioning?; end
    def configurations; end
    def configurations=(config); end
    def connected_to_stack; end
    def connection_class; end
    def connection_class=(b); end
    def connection_class?; end
    def connection_classes; end
    def connection_handler; end
    def connection_handler=(handler); end
    def connection_handlers; end
    def connection_handlers=(handlers); end
    def current_preventing_writes; end
    def current_role; end
    def current_shard; end
    def default_connection_handler; end
    def default_connection_handler=(value); end
    def default_connection_handler?; end
    def default_role; end
    def default_role=(value); end
    def default_role?; end
    def default_scope_override; end
    def default_scope_override=(value); end
    def default_scopes; end
    def default_scopes=(value); end
    def default_shard; end
    def default_shard=(value); end
    def default_shard?; end
    def default_timezone; end
    def default_timezone=(val); end
    def defined_enums; end
    def defined_enums=(value); end
    def defined_enums?; end
    def destroy_association_async_job; end
    def destroy_association_async_job=(value); end
    def dump_schema_after_migration; end
    def dump_schema_after_migration=(val); end
    def dump_schemas; end
    def dump_schemas=(val); end
    def error_on_ignored_order; end
    def error_on_ignored_order=(val); end
    def has_many_inversing; end
    def has_many_inversing=(val); end
    def immutable_strings_by_default; end
    def immutable_strings_by_default=(value); end
    def immutable_strings_by_default?; end
    def implicit_order_column; end
    def implicit_order_column=(value); end
    def implicit_order_column?; end
    def import(*args); end
    def import!(*args); end
    def import_helper(*args); end
    def import_with_validations(column_names, array_of_attributes, options = T.unsafe(nil)); end
    def import_without_validations_or_callbacks(column_names, array_of_attributes, options = T.unsafe(nil)); end
    def include_root_in_json; end
    def include_root_in_json=(value); end
    def include_root_in_json?; end
    def index_nested_attribute_errors; end
    def index_nested_attribute_errors=(val); end
    def internal_metadata_table_name; end
    def internal_metadata_table_name=(value); end
    def internal_metadata_table_name?; end
    def legacy_connection_handling; end
    def legacy_connection_handling=(val); end
    def local_stored_attributes; end
    def local_stored_attributes=(_arg0); end
    def lock_optimistically; end
    def lock_optimistically=(value); end
    def lock_optimistically?; end
    def logger; end
    def logger=(val); end
    def maintain_test_schema; end
    def maintain_test_schema=(val); end
    def method_missing_without_attr_encrypted(method, *arguments, &block); end
    def nested_attributes_options; end
    def nested_attributes_options=(value); end
    def nested_attributes_options?; end
    def nulldb_connection(config); end
    def partial_writes; end
    def partial_writes=(value); end
    def partial_writes?; end
    def pluralize_table_names; end
    def pluralize_table_names=(value); end
    def pluralize_table_names?; end
    def primary_key_prefix_type; end
    def primary_key_prefix_type=(val); end
    def queues; end
    def queues=(val); end
    def reading_role; end
    def reading_role=(val); end
    def record_timestamps; end
    def record_timestamps=(value); end
    def record_timestamps?; end
    def schema_format; end
    def schema_format=(val); end
    def schema_migrations_table_name; end
    def schema_migrations_table_name=(value); end
    def schema_migrations_table_name?; end
    def signed_id_verifier_secret; end
    def signed_id_verifier_secret=(val); end
    def skip_time_zone_conversion_for_attributes; end
    def skip_time_zone_conversion_for_attributes=(value); end
    def skip_time_zone_conversion_for_attributes?; end
    def store_full_class_name; end
    def store_full_class_name=(value); end
    def store_full_class_name?; end
    def store_full_sti_class; end
    def store_full_sti_class=(value); end
    def store_full_sti_class?; end
    def strict_loading_by_default; end
    def strict_loading_by_default=(value); end
    def strict_loading_by_default?; end
    def strict_loading_violation!(owner:, reflection:); end
    def supports_import?(*args); end
    def supports_on_duplicate_key_update?; end
    def supports_setting_primary_key_of_imported_objects?; end
    def suppress_multiple_database_warning; end
    def suppress_multiple_database_warning=(val); end
    def synchronize(instances, keys = T.unsafe(nil)); end
    def table_name_prefix; end
    def table_name_prefix=(value); end
    def table_name_prefix?; end
    def table_name_suffix; end
    def table_name_suffix=(value); end
    def table_name_suffix?; end
    def time_zone_aware_attributes; end
    def time_zone_aware_attributes=(val); end
    def time_zone_aware_types; end
    def time_zone_aware_types=(value); end
    def time_zone_aware_types?; end
    def timestamped_migrations; end
    def timestamped_migrations=(val); end
    def verbose_query_logs; end
    def verbose_query_logs=(val); end
    def warn_on_records_fetched_greater_than; end
    def warn_on_records_fetched_greater_than=(val); end
    def writing_role; end
    def writing_role=(val); end

    protected

    def method_missing(method, *args, &block); end

    private

    def add_special_rails_stamps(column_names, array_of_attributes, options); end
    def find_associated_objects_for_import(associated_objects_by_class, model); end
    def import_associations(models, options); end
    def load_association_ids(model); end
    def set_attributes_and_mark_clean(models, import_result, timestamps, options); end
    def validate_hash_import(hash, required_keys, allow_extra_keys); end
    def validations_array_for_column_names_and_attributes(column_names, array_of_attributes); end
    def values_sql_for_columns_and_attributes(columns, array_of_attributes); end
  end
end

module ActiveRecord::Base::GeneratedAssociationMethods; end
module ActiveRecord::Base::GeneratedAttributeMethods; end
ActiveRecord::Base::OrmAdapter = OrmAdapter::ActiveRecord

class ActiveRecord::ConnectionAdapters::NullDBAdapter < ::ActiveRecord::ConnectionAdapters::AbstractAdapter
  def initialize(config = T.unsafe(nil)); end

  def adapter_name; end
  def add_column(table_name, column_name, type, **options); end
  def add_fk_constraint(*args); end
  def add_index(table_name, column_names, **options); end
  def add_pk_constraint(*args); end
  def change_column(table_name, column_name, type, options = T.unsafe(nil)); end
  def change_column_default(table_name, column_name, default_or_changes); end
  def checkpoint!; end
  def columns(table_name, name = T.unsafe(nil)); end
  def create(statement, name = T.unsafe(nil), primary_key = T.unsafe(nil), object_id = T.unsafe(nil), sequence_name = T.unsafe(nil), binds = T.unsafe(nil)); end
  def create_table(table_name, options = T.unsafe(nil)); end
  def delete(statement, name = T.unsafe(nil), binds = T.unsafe(nil)); end
  def enable_extension(*_arg0); end
  def exec_query(statement, name = T.unsafe(nil), binds = T.unsafe(nil), options = T.unsafe(nil)); end
  def execute(statement, name = T.unsafe(nil)); end
  def execution_log; end
  def execution_log_since_checkpoint; end
  def indexes(table_name, name = T.unsafe(nil)); end
  def insert(statement, name = T.unsafe(nil), primary_key = T.unsafe(nil), object_id = T.unsafe(nil), sequence_name = T.unsafe(nil), binds = T.unsafe(nil)); end
  def primary_key(table_name); end
  def remove_index(table_name, column_name = T.unsafe(nil), **options); end
  def rename_column(table_name, column_name, new_column_name); end
  def rename_table(table_name, new_name); end
  def select_all(statement, name = T.unsafe(nil), binds = T.unsafe(nil), options = T.unsafe(nil)); end
  def select_one(statement, name = T.unsafe(nil), binds = T.unsafe(nil)); end
  def select_rows(statement, name = T.unsafe(nil), binds = T.unsafe(nil)); end
  def select_value(statement, name = T.unsafe(nil), binds = T.unsafe(nil)); end
  def select_values(statement, name = T.unsafe(nil)); end
  def supports_migrations?; end
  def tables; end
  def update(statement, name = T.unsafe(nil), binds = T.unsafe(nil)); end
  def views; end

  protected

  def select(statement, name = T.unsafe(nil), binds = T.unsafe(nil)); end

  private

  def columns_for(table_name); end
  def default_column_arguments(col_def); end
  def entry_point; end
  def includes_column?; end
  def initialize_args; end
  def new_table_definition(adapter = T.unsafe(nil), table_name = T.unsafe(nil), is_temporary = T.unsafe(nil), options = T.unsafe(nil)); end
  def next_unique_id; end
  def register_types; end
  def sql_type_definition(col_def); end
  def with_entry_point(method); end
  def with_thread_local_variable(name, value); end

  class << self
    def insinuate_into_spec(config); end
  end
end

class ActiveRecord::ConnectionAdapters::NullDBAdapter::Checkpoint < ::ActiveRecord::ConnectionAdapters::NullDBAdapter::Statement
  def initialize; end

  def ==(other); end
end

class ActiveRecord::ConnectionAdapters::NullDBAdapter::Column < ::ActiveRecord::ConnectionAdapters::Column; end
class ActiveRecord::ConnectionAdapters::NullDBAdapter::Configuration < ::Struct; end

class ActiveRecord::ConnectionAdapters::NullDBAdapter::EmptyResult < ::Array
  def >(num); end
  def bind_column_meta(columns); end
  def cast_values(type_overrides = T.unsafe(nil)); end
  def column_types; end
  def columns; end
  def includes_column?(name); end
  def rows; end
end

class ActiveRecord::ConnectionAdapters::NullDBAdapter::IndexDefinition < ::Struct; end

class ActiveRecord::ConnectionAdapters::NullDBAdapter::NullObject
  def method_missing(*args, &block); end
  def to_a; end
end

class ActiveRecord::ConnectionAdapters::NullDBAdapter::Statement
  def initialize(entry_point, content = T.unsafe(nil)); end

  def ==(other); end
  def content; end
  def entry_point; end
end

class ActiveRecord::ConnectionAdapters::NullDBAdapter::TableDefinition < ::ActiveRecord::ConnectionAdapters::TableDefinition
  def citext(*names, **options); end
  def geometry(*names, **options); end
  def interval(*names, **options); end
  def jsonb(*names, **options); end
  def name; end
  def name=(_arg0); end
  def uuid(*names, **options); end
end

class ActiveRecord::Tasks::NullDBDatabaseTasks
  def initialize(configuration); end

  def clear_active_connections!; end
  def create(master_established = T.unsafe(nil)); end
  def drop; end
  def purge; end
  def structure_dump(filename, extra_flags); end
  def structure_load(filename, extra_flags); end
end

module NullDB
  class << self
    def checkpoint; end
    def configuration; end
    def configure; end
    def nullify(options = T.unsafe(nil)); end
    def restore; end
  end
end

class NullDB::Configuration < ::Struct; end
