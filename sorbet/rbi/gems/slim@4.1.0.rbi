# typed: strict

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `slim` gem.
# Please instead update this file by running `bin/tapioca gem slim`.

module Slim; end

class Slim::CodeAttributes < ::Slim::Filter
  def on_html_attr(name, value); end
  def on_html_attrs(*attrs); end
  def on_slim_attrvalue(escape, code); end
end

class Slim::Controls < ::Slim::Filter
  def on_slim_control(code, content); end
  def on_slim_output(escape, code, content); end
  def on_slim_text(type, content); end
end

Slim::Controls::IF_RE = T.let(T.unsafe(nil), Regexp)

class Slim::DoInserter < ::Slim::Filter
  def on_slim_control(code, content); end
  def on_slim_output(escape, code, content); end
end

Slim::DoInserter::BLOCK_REGEX = T.let(T.unsafe(nil), Regexp)

class Slim::Embedded < ::Slim::Filter
  def initialize(opts = T.unsafe(nil)); end

  def enabled?(name); end
  def on_slim_embedded(name, body, attrs); end

  protected

  def normalize_engine_list(list); end

  class << self
    def create(name, options); end
    def engines; end
    def register(name, klass, *option_filter); end
  end
end

class Slim::Embedded::Engine < ::Slim::Filter
  protected

  def collect_newlines(body); end
  def collect_text(body); end
end

class Slim::Embedded::InterpolateTiltEngine < ::Slim::Embedded::TiltEngine
  def collect_text(body); end
  def tilt_render(tilt_engine, tilt_options, text); end

  private

  def interpolation; end
  def output_protector; end
end

class Slim::Embedded::JavaScriptEngine < ::Slim::Embedded::TagEngine
  def on_slim_embedded(engine, body, attrs); end
end

class Slim::Embedded::RubyEngine < ::Slim::Embedded::Engine
  def on_slim_embedded(engine, body, attrs); end
end

class Slim::Embedded::SassEngine < ::Slim::Embedded::TiltEngine
  protected

  def tilt_render(tilt_engine, tilt_options, text); end
end

class Slim::Embedded::TagEngine < ::Slim::Embedded::Engine
  def on_slim_embedded(engine, body, attrs); end
end

class Slim::Embedded::TiltEngine < ::Slim::Embedded::Engine
  def on_slim_embedded(engine, body, attrs); end

  protected

  def tilt_render(tilt_engine, tilt_options, text); end
end

class Slim::EndInserter < ::Slim::Filter
  def on_multi(*exps); end

  private

  def append_end(result); end
  def control?(exp); end
end

Slim::EndInserter::ELSE_RE = T.let(T.unsafe(nil), Regexp)
Slim::EndInserter::END_RE = T.let(T.unsafe(nil), Regexp)
Slim::EndInserter::IF_RE = T.let(T.unsafe(nil), Regexp)
class Slim::Engine < ::Temple::Engine; end

class Slim::Filter < ::Temple::HTML::Filter
  def on_slim_control(code, content); end
  def on_slim_embedded(type, content, attrs); end
  def on_slim_output(escape, code, content); end
  def on_slim_text(type, content); end
end

class Slim::Interpolation < ::Slim::Filter
  def on_slim_interpolate(string); end
end

class Slim::InvalidAttributeNameError < ::StandardError; end

class Slim::NewlineCollector < ::Slim::Filter
  def call(exp); end
  def on_newline; end
end

class Slim::OutputProtector < ::Slim::Filter
  def call(exp); end
  def on_slim_output(escape, text, content); end
  def on_static(text); end
  def unprotect(text); end
end

class Slim::Parser < ::Temple::Parser
  def initialize(opts = T.unsafe(nil)); end

  def call(str); end

  protected

  def deprecated_syntax(message); end
  def expect_next_line; end
  def get_indent(line); end
  def next_line; end
  def parse_attributes(attributes = T.unsafe(nil)); end
  def parse_broken_line; end
  def parse_comment_block; end
  def parse_line; end
  def parse_line_indicators; end
  def parse_quoted_attribute(quote); end
  def parse_ruby_code(outer_delimiter); end
  def parse_tag(tag); end
  def parse_text_block(first_line = T.unsafe(nil), text_indent = T.unsafe(nil)); end
  def reset(lines = T.unsafe(nil), stacks = T.unsafe(nil)); end
  def syntax_error!(message); end
  def unknown_line_indicator; end
end

class Slim::Parser::SyntaxError < ::StandardError
  def initialize(error, file, line, lineno, column); end

  def column; end
  def error; end
  def file; end
  def line; end
  def lineno; end
  def to_s; end
end

class Slim::RailsTemplate < ::Temple::Templates::Rails; end
module Slim::Splat; end

class Slim::Splat::Builder
  def initialize(options); end

  def attr(name, value); end
  def build_attrs; end
  def build_tag(&block); end
  def code_attr(name, escape, value); end
  def splat_attrs(splat); end

  private

  def escape_html(escape, value); end
  def hyphen_attr(name, escape, value); end
end

Slim::Splat::Builder::INVALID_ATTRIBUTE_NAME_REGEX = T.let(T.unsafe(nil), Regexp)

class Slim::Splat::Filter < ::Slim::Filter
  def call(exp); end
  def on_html_attrs(*attrs); end
  def on_html_tag(name, attrs, content = T.unsafe(nil)); end

  protected

  def make_builder(attrs); end
  def splat?(attr); end
end

class Slim::Template < ::Temple::Templates::Tilt; end

class Slim::TextCollector < ::Slim::Filter
  def call(exp); end
  def on_slim_interpolate(text); end
end

Slim::VERSION = T.let(T.unsafe(nil), String)
