# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `ssrf_filter` gem.
# Please instead update this file by running `bin/tapioca gem ssrf_filter`.

class SsrfFilter
  class << self
    def delete(url, options = T.unsafe(nil), &block); end
    def get(url, options = T.unsafe(nil), &block); end
    def post(url, options = T.unsafe(nil), &block); end
    def put(url, options = T.unsafe(nil), &block); end

    private

    def fetch_once(uri, ip, verb, options, &block); end
    def host_header(hostname, uri); end
    def ipaddr_has_mask?(ipaddr); end
    def prefixlen_from_ipaddr(ipaddr); end
    def unsafe_ip_address?(ip_address); end
    def validate_request(request); end
    def with_forced_hostname(hostname, &_block); end
  end
end

class SsrfFilter::CRLFInjection < ::SsrfFilter::Error; end
SsrfFilter::DEFAULT_MAX_REDIRECTS = T.let(T.unsafe(nil), Integer)
SsrfFilter::DEFAULT_RESOLVER = T.let(T.unsafe(nil), Proc)
SsrfFilter::DEFAULT_SCHEME_WHITELIST = T.let(T.unsafe(nil), Array)
class SsrfFilter::Error < ::StandardError; end
SsrfFilter::FIBER_LOCAL_KEY = T.let(T.unsafe(nil), Symbol)
SsrfFilter::IPV4_BLACKLIST = T.let(T.unsafe(nil), Array)
SsrfFilter::IPV6_BLACKLIST = T.let(T.unsafe(nil), Array)
class SsrfFilter::InvalidUriScheme < ::SsrfFilter::Error; end
module SsrfFilter::Patch; end

module SsrfFilter::Patch::HTTPGenericRequest
  class << self
    def apply!; end
    def should_apply?; end
  end
end

module SsrfFilter::Patch::SSLSocket
  class << self
    def apply!; end
  end
end

class SsrfFilter::PrivateIPAddress < ::SsrfFilter::Error; end
class SsrfFilter::TooManyRedirects < ::SsrfFilter::Error; end
class SsrfFilter::UnresolvedHostname < ::SsrfFilter::Error; end
SsrfFilter::VERB_MAP = T.let(T.unsafe(nil), Hash)
SsrfFilter::VERSION = T.let(T.unsafe(nil), String)
