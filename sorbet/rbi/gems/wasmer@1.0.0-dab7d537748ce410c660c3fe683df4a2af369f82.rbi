# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `wasmer` gem.
# Please instead update this file by running `bin/tapioca gem wasmer`.

module Wasmer
  private

  def wasm2wat(*_arg0); end
  def wat2wasm(*_arg0); end

  class << self
    def wasm2wat(*_arg0); end
    def wat2wasm(*_arg0); end
  end
end

class Wasmer::ExportType
  def name(*_arg0); end
  def type(*_arg0); end

  class << self
    def new(*_arg0); end
  end
end

class Wasmer::Exports
  def length(*_arg0); end
  def method_missing(*_arg0); end

  private

  def respond_to_missing?(*_arg0); end
end

class Wasmer::Function
  def call(*_arg0); end
  def type(*_arg0); end

  class << self
    def new(*_arg0); end
  end
end

class Wasmer::FunctionType
  def params(*_arg0); end
  def results(*_arg0); end

  class << self
    def new(*_arg0); end
  end
end

class Wasmer::Global
  def mutable?(*_arg0); end
  def type(*_arg0); end
  def value(*_arg0); end
  def value=(*_arg0); end

  class << self
    def new(*_arg0); end
  end
end

class Wasmer::GlobalType
  def mutable?(*_arg0); end
  def type(*_arg0); end

  class << self
    def new(*_arg0); end
  end
end

class Wasmer::ImportObject
  def contains_namespace?(*_arg0); end
  def register(*_arg0); end

  class << self
    def new(*_arg0); end
  end
end

class Wasmer::ImportType
  def module(*_arg0); end
  def name(*_arg0); end
  def type(*_arg0); end

  class << self
    def new(*_arg0); end
  end
end

class Wasmer::Instance
  def exports(*_arg0); end

  class << self
    def new(*_arg0); end
  end
end

class Wasmer::Int16Array
  include ::Enumerable

  def [](*_arg0); end
  def []=(*_arg0); end
  def each(*_arg0); end
  def length(*_arg0); end
end

Wasmer::Int16Array::BYTES_PER_ELEMENT = T.let(T.unsafe(nil), Integer)

class Wasmer::Int32Array
  include ::Enumerable

  def [](*_arg0); end
  def []=(*_arg0); end
  def each(*_arg0); end
  def length(*_arg0); end
end

Wasmer::Int32Array::BYTES_PER_ELEMENT = T.let(T.unsafe(nil), Integer)

class Wasmer::Int8Array
  include ::Enumerable

  def [](*_arg0); end
  def []=(*_arg0); end
  def each(*_arg0); end
  def length(*_arg0); end
end

Wasmer::Int8Array::BYTES_PER_ELEMENT = T.let(T.unsafe(nil), Integer)

class Wasmer::Memory
  def data_size(*_arg0); end
  def grow(*_arg0); end
  def int16_view(*_arg0); end
  def int32_view(*_arg0); end
  def int8_view(*_arg0); end
  def size(*_arg0); end
  def type(*_arg0); end
  def uint16_view(*_arg0); end
  def uint32_view(*_arg0); end
  def uint8_view(*_arg0); end

  class << self
    def new(*_arg0); end
  end
end

class Wasmer::MemoryType
  def maximum(*_arg0); end
  def minimum(*_arg0); end
  def shared?(*_arg0); end

  class << self
    def new(*_arg0); end
  end
end

class Wasmer::Module
  def custom_sections(*_arg0); end
  def exports(*_arg0); end
  def imports(*_arg0); end
  def name(*_arg0); end
  def name=(*_arg0); end
  def serialize(*_arg0); end

  class << self
    def deserialize(*_arg0); end
    def new(*_arg0); end
    def validate(*_arg0); end
  end
end

class Wasmer::Store
  class << self
    def new(*_arg0); end
  end
end

class Wasmer::Table
  class << self
    def new(*_arg0); end
  end
end

class Wasmer::TableType
  def maximum(*_arg0); end
  def minimum(*_arg0); end
  def type(*_arg0); end

  class << self
    def new(*_arg0); end
  end
end

class Wasmer::Type; end
Wasmer::Type::EXTERN_REF = T.let(T.unsafe(nil), Integer)
Wasmer::Type::F32 = T.let(T.unsafe(nil), Integer)
Wasmer::Type::F64 = T.let(T.unsafe(nil), Integer)
Wasmer::Type::FUNC_REF = T.let(T.unsafe(nil), Integer)
Wasmer::Type::I32 = T.let(T.unsafe(nil), Integer)
Wasmer::Type::I64 = T.let(T.unsafe(nil), Integer)
Wasmer::Type::V128 = T.let(T.unsafe(nil), Integer)

class Wasmer::Uint16Array
  include ::Enumerable

  def [](*_arg0); end
  def []=(*_arg0); end
  def each(*_arg0); end
  def length(*_arg0); end
end

Wasmer::Uint16Array::BYTES_PER_ELEMENT = T.let(T.unsafe(nil), Integer)

class Wasmer::Uint32Array
  include ::Enumerable

  def [](*_arg0); end
  def []=(*_arg0); end
  def each(*_arg0); end
  def length(*_arg0); end
end

Wasmer::Uint32Array::BYTES_PER_ELEMENT = T.let(T.unsafe(nil), Integer)

class Wasmer::Uint8Array
  include ::Enumerable

  def [](*_arg0); end
  def []=(*_arg0); end
  def each(*_arg0); end
  def length(*_arg0); end
end

Wasmer::Uint8Array::BYTES_PER_ELEMENT = T.let(T.unsafe(nil), Integer)
Wasmer::VERSION = T.let(T.unsafe(nil), String)

class Wasmer::Value
  class << self
    def f32(*_arg0); end
    def f64(*_arg0); end
    def i32(*_arg0); end
    def i64(*_arg0); end
  end
end

module Wasmer::Wasi
  private

  def get_version(*_arg0); end

  class << self
    def get_version(*_arg0); end
  end
end

class Wasmer::Wasi::Environment
  def generate_import_object(*_arg0); end
end

class Wasmer::Wasi::StateBuilder
  def argument(*_arg0); end
  def arguments(*_arg0); end
  def environment(*_arg0); end
  def environments(*_arg0); end
  def finalize(*_arg0); end
  def map_directories(*_arg0); end
  def map_directory(*_arg0); end
  def preopen_directories(*_arg0); end
  def preopen_directory(*_arg0); end

  class << self
    def new(*_arg0); end
  end
end

class Wasmer::Wasi::Version; end
Wasmer::Wasi::Version::LATEST = T.let(T.unsafe(nil), Integer)
Wasmer::Wasi::Version::SNAPSHOT0 = T.let(T.unsafe(nil), Integer)
Wasmer::Wasi::Version::SNAPSHOT1 = T.let(T.unsafe(nil), Integer)
