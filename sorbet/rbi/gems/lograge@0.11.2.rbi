# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `lograge` gem.
# Please instead update this file by running `bin/tapioca gem lograge`.

module Lograge
  def application; end
  def application=(val); end
  def before_format=(val); end
  def custom_options=(val); end
  def formatter; end
  def formatter=(val); end
  def ignore_tests=(val); end
  def log_level; end
  def log_level=(val); end
  def logger; end
  def logger=(val); end

  private

  def attach_to_action_cable; end
  def attach_to_action_controller; end
  def before_format(data, payload); end
  def controller_field(params); end
  def custom_options(event); end
  def disable_rack_cache_verbose_output; end
  def extend_base_class(klass); end
  def ignore(test); end
  def ignore?(event); end
  def ignore_actions(actions); end
  def ignore_nothing; end
  def ignore_tests; end
  def keep_original_rails_log; end
  def lograge_config; end
  def rack_cache_hashlike?(app); end
  def remove_existing_log_subscriptions; end
  def set_formatter; end
  def set_ignores; end
  def set_lograge_log_options; end
  def setup(app); end
  def setup_custom_payload; end
  def support_deprecated_config; end
  def unsubscribe(component, subscriber); end

  class << self
    def application; end
    def application=(val); end
    def attach_to_action_cable; end
    def attach_to_action_controller; end
    def before_format(data, payload); end
    def before_format=(val); end
    def controller_field(params); end
    def custom_options(event); end
    def custom_options=(val); end
    def disable_rack_cache_verbose_output; end
    def extend_base_class(klass); end
    def formatter; end
    def formatter=(val); end
    def ignore(test); end
    def ignore?(event); end
    def ignore_actions(actions); end
    def ignore_nothing; end
    def ignore_tests; end
    def ignore_tests=(val); end
    def keep_original_rails_log; end
    def log_level; end
    def log_level=(val); end
    def logger; end
    def logger=(val); end
    def lograge_config; end
    def remove_existing_log_subscriptions; end
    def set_formatter; end
    def set_ignores; end
    def set_lograge_log_options; end
    def setup(app); end
    def setup_custom_payload; end
    def support_deprecated_config; end
    def unsubscribe(component, subscriber); end

    private

    def rack_cache_hashlike?(app); end
  end
end

module Lograge::Formatters; end

class Lograge::Formatters::Cee
  def call(data); end
end

class Lograge::Formatters::Graylog2
  include ::Lograge::Formatters::Helpers::MethodAndPath

  def call(data); end
  def short_message(data); end
  def underscore_prefix(key); end
end

module Lograge::Formatters::Helpers; end

module Lograge::Formatters::Helpers::MethodAndPath
  def method_and_path_string(data); end
end

class Lograge::Formatters::Json
  def call(data); end
end

class Lograge::Formatters::KeyValue
  def call(data); end

  protected

  def fields_to_display(data); end
  def format(key, value); end
  def parse_value(key, value); end
end

class Lograge::Formatters::L2met < ::Lograge::Formatters::KeyValue
  def call(data); end

  protected

  def additional_fields(data); end
  def fields_to_display(data); end
  def format(key, value); end
  def modify_payload(data); end
  def source_field(data); end
end

Lograge::Formatters::L2met::L2MET_FIELDS = T.let(T.unsafe(nil), Array)
Lograge::Formatters::L2met::UNWANTED_FIELDS = T.let(T.unsafe(nil), Array)

class Lograge::Formatters::LTSV
  def call(data); end
  def fields_to_display(data); end
  def format(key, value); end

  private

  def escape(string); end
end

class Lograge::Formatters::Lines
  def call(data); end
  def load_dependencies; end
end

class Lograge::Formatters::Logstash
  include ::Lograge::Formatters::Helpers::MethodAndPath

  def call(data); end
  def load_dependencies; end
end

class Lograge::Formatters::Raw
  def call(data); end
end

module Lograge::LogSubscribers; end

class Lograge::LogSubscribers::ActionCable < ::Lograge::LogSubscribers::Base
  def connect(event); end
  def disconnect(event); end
  def perform_action(event); end
  def subscribe(event); end
  def unsubscribe(event); end

  private

  def default_status; end
  def extract_runtimes(event, _payload); end
  def initial_data(payload); end
end

class Lograge::LogSubscribers::ActionController < ::Lograge::LogSubscribers::Base
  def process_action(event); end
  def redirect_to(event); end
  def unpermitted_parameters(event); end

  private

  def extract_format(payload); end
  def extract_location; end
  def extract_path(payload); end
  def extract_runtimes(event, payload); end
  def extract_unpermitted_params; end
  def initial_data(payload); end
  def strip_query_string(path); end
end

class Lograge::LogSubscribers::Base < ::ActiveSupport::LogSubscriber
  def logger; end

  private

  def before_format(data, payload); end
  def custom_options(event); end
  def default_status; end
  def extract_location(*_arg); end
  def extract_request(event, payload); end
  def extract_runtimes(*_arg); end
  def extract_status(payload); end
  def extract_unpermitted_params(*_arg); end
  def get_error_status_code(exception); end
  def initial_data(*_arg); end
  def process_main_event(event); end
end

class Lograge::OrderedOptions < ::ActiveSupport::OrderedOptions
  def custom_payload(&block); end
end

class Lograge::Railtie < ::Rails::Railtie; end

class Lograge::SilentLogger < ::SimpleDelegator
  def initialize(logger); end

  def debug(*_args); end
  def error(*_args); end
  def fatal(*_args); end
  def info(*_args); end
  def unknown(*_args); end
  def warn(*_args); end
end

Lograge::VERSION = T.let(T.unsafe(nil), String)
