# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `aws-sdk-s3` gem.
# Please instead update this file by running `bin/tapioca gem aws-sdk-s3`.

module Aws
  class << self
    def config; end
    def config=(config); end
    def eager_autoload!(*args); end
    def empty_connection_pools!; end
    def partition(partition_name); end
    def partitions; end
    def shared_config; end
    def use_bundled_cert!; end
  end
end

Aws::CORE_GEM_VERSION = T.let(T.unsafe(nil), String)
module Aws::S3; end
Aws::S3::AES_GCM_TAG_LEN_BYTES = T.let(T.unsafe(nil), Integer)

class Aws::S3::AccessPointARN < ::Aws::ARN
  def initialize(options); end

  def access_point_name; end
  def host_url(region, dualstack = T.unsafe(nil), custom_endpoint = T.unsafe(nil)); end
  def support_dualstack?; end
  def support_fips?; end
  def validate_arn!; end
end

Aws::S3::BUCKET_REGIONS = T.let(T.unsafe(nil), Aws::S3::BucketRegionCache)

class Aws::S3::Bucket
  extend ::Aws::Deprecations

  def initialize(*args); end

  def acl; end
  def clear!; end
  def client; end
  def cors; end
  def create(options = T.unsafe(nil)); end
  def creation_date; end
  def data; end
  def data_loaded?; end
  def delete(options = T.unsafe(nil)); end
  def delete!(options = T.unsafe(nil)); end
  def delete_objects(options = T.unsafe(nil)); end
  def deprecated_identifiers; end
  def exists?(options = T.unsafe(nil)); end
  def identifiers(*args, &block); end
  def lifecycle; end
  def lifecycle_configuration; end
  def load; end
  def logging; end
  def multipart_uploads(options = T.unsafe(nil)); end
  def name; end
  def notification; end
  def object(key); end
  def object_versions(options = T.unsafe(nil)); end
  def objects(options = T.unsafe(nil)); end
  def policy; end
  def presigned_post(options = T.unsafe(nil)); end
  def put_object(options = T.unsafe(nil)); end
  def reload; end
  def request_payment; end
  def tagging; end
  def url(options = T.unsafe(nil)); end
  def versioning; end
  def wait_until(options = T.unsafe(nil), &block); end
  def wait_until_exists(options = T.unsafe(nil), &block); end
  def wait_until_not_exists(options = T.unsafe(nil), &block); end
  def website; end

  private

  def bucket_as_hostname?(https); end
  def extract_name(args, options); end
  def s3_bucket_url; end
  def separate_params_and_options(options); end
  def yield_waiter_and_warn(waiter, &block); end
end

class Aws::S3::Bucket::Collection < ::Aws::Resources::Collection; end

class Aws::S3::BucketAcl
  extend ::Aws::Deprecations

  def initialize(*args); end

  def bucket; end
  def bucket_name; end
  def client; end
  def data; end
  def data_loaded?; end
  def deprecated_identifiers; end
  def grants; end
  def identifiers(*args, &block); end
  def load; end
  def owner; end
  def put(options = T.unsafe(nil)); end
  def reload; end
  def wait_until(options = T.unsafe(nil), &block); end

  private

  def extract_bucket_name(args, options); end
end

class Aws::S3::BucketAcl::Collection < ::Aws::Resources::Collection; end

class Aws::S3::BucketCors
  extend ::Aws::Deprecations

  def initialize(*args); end

  def bucket; end
  def bucket_name; end
  def client; end
  def cors_rules; end
  def data; end
  def data_loaded?; end
  def delete(options = T.unsafe(nil)); end
  def deprecated_identifiers; end
  def identifiers(*args, &block); end
  def load; end
  def put(options = T.unsafe(nil)); end
  def reload; end
  def wait_until(options = T.unsafe(nil), &block); end

  private

  def extract_bucket_name(args, options); end
end

class Aws::S3::BucketCors::Collection < ::Aws::Resources::Collection; end

class Aws::S3::BucketLifecycle
  extend ::Aws::Deprecations

  def initialize(*args); end

  def bucket; end
  def bucket_name; end
  def client; end
  def data; end
  def data_loaded?; end
  def delete(options = T.unsafe(nil)); end
  def deprecated_identifiers; end
  def identifiers(*args, &block); end
  def load; end
  def put(options = T.unsafe(nil)); end
  def reload; end
  def rules; end
  def wait_until(options = T.unsafe(nil), &block); end

  private

  def extract_bucket_name(args, options); end
end

class Aws::S3::BucketLifecycle::Collection < ::Aws::Resources::Collection; end

class Aws::S3::BucketLifecycleConfiguration
  extend ::Aws::Deprecations

  def initialize(*args); end

  def bucket; end
  def bucket_name; end
  def client; end
  def data; end
  def data_loaded?; end
  def delete(options = T.unsafe(nil)); end
  def deprecated_identifiers; end
  def identifiers(*args, &block); end
  def load; end
  def put(options = T.unsafe(nil)); end
  def reload; end
  def rules; end
  def wait_until(options = T.unsafe(nil), &block); end

  private

  def extract_bucket_name(args, options); end
end

class Aws::S3::BucketLifecycleConfiguration::Collection < ::Aws::Resources::Collection; end

class Aws::S3::BucketLogging
  extend ::Aws::Deprecations

  def initialize(*args); end

  def bucket; end
  def bucket_name; end
  def client; end
  def data; end
  def data_loaded?; end
  def deprecated_identifiers; end
  def identifiers(*args, &block); end
  def load; end
  def logging_enabled; end
  def put(options = T.unsafe(nil)); end
  def reload; end
  def wait_until(options = T.unsafe(nil), &block); end

  private

  def extract_bucket_name(args, options); end
end

class Aws::S3::BucketLogging::Collection < ::Aws::Resources::Collection; end

class Aws::S3::BucketNotification
  extend ::Aws::Deprecations

  def initialize(*args); end

  def bucket; end
  def bucket_name; end
  def client; end
  def data; end
  def data_loaded?; end
  def deprecated_identifiers; end
  def identifiers(*args, &block); end
  def lambda_function_configurations; end
  def load; end
  def put(options = T.unsafe(nil)); end
  def queue_configurations; end
  def reload; end
  def topic_configurations; end
  def wait_until(options = T.unsafe(nil), &block); end

  private

  def extract_bucket_name(args, options); end
end

class Aws::S3::BucketNotification::Collection < ::Aws::Resources::Collection; end

class Aws::S3::BucketPolicy
  extend ::Aws::Deprecations

  def initialize(*args); end

  def bucket; end
  def bucket_name; end
  def client; end
  def data; end
  def data_loaded?; end
  def delete(options = T.unsafe(nil)); end
  def deprecated_identifiers; end
  def identifiers(*args, &block); end
  def load; end
  def policy; end
  def put(options = T.unsafe(nil)); end
  def reload; end
  def wait_until(options = T.unsafe(nil), &block); end

  private

  def extract_bucket_name(args, options); end
end

class Aws::S3::BucketPolicy::Collection < ::Aws::Resources::Collection; end

class Aws::S3::BucketRegionCache
  def initialize; end

  def [](bucket_name); end
  def []=(bucket_name, region_name); end
  def bucket_added(&block); end
  def clear; end
  def to_h; end
  def to_hash; end
end

class Aws::S3::BucketRequestPayment
  extend ::Aws::Deprecations

  def initialize(*args); end

  def bucket; end
  def bucket_name; end
  def client; end
  def data; end
  def data_loaded?; end
  def deprecated_identifiers; end
  def identifiers(*args, &block); end
  def load; end
  def payer; end
  def put(options = T.unsafe(nil)); end
  def reload; end
  def wait_until(options = T.unsafe(nil), &block); end

  private

  def extract_bucket_name(args, options); end
end

class Aws::S3::BucketRequestPayment::Collection < ::Aws::Resources::Collection; end

class Aws::S3::BucketTagging
  extend ::Aws::Deprecations

  def initialize(*args); end

  def bucket; end
  def bucket_name; end
  def client; end
  def data; end
  def data_loaded?; end
  def delete(options = T.unsafe(nil)); end
  def deprecated_identifiers; end
  def identifiers(*args, &block); end
  def load; end
  def put(options = T.unsafe(nil)); end
  def reload; end
  def tag_set; end
  def wait_until(options = T.unsafe(nil), &block); end

  private

  def extract_bucket_name(args, options); end
end

class Aws::S3::BucketTagging::Collection < ::Aws::Resources::Collection; end

class Aws::S3::BucketVersioning
  extend ::Aws::Deprecations

  def initialize(*args); end

  def bucket; end
  def bucket_name; end
  def client; end
  def data; end
  def data_loaded?; end
  def deprecated_identifiers; end
  def enable(options = T.unsafe(nil)); end
  def identifiers(*args, &block); end
  def load; end
  def mfa_delete; end
  def put(options = T.unsafe(nil)); end
  def reload; end
  def status; end
  def suspend(options = T.unsafe(nil)); end
  def wait_until(options = T.unsafe(nil), &block); end

  private

  def extract_bucket_name(args, options); end
end

class Aws::S3::BucketVersioning::Collection < ::Aws::Resources::Collection; end

class Aws::S3::BucketWebsite
  extend ::Aws::Deprecations

  def initialize(*args); end

  def bucket; end
  def bucket_name; end
  def client; end
  def data; end
  def data_loaded?; end
  def delete(options = T.unsafe(nil)); end
  def deprecated_identifiers; end
  def error_document; end
  def identifiers(*args, &block); end
  def index_document; end
  def load; end
  def put(options = T.unsafe(nil)); end
  def redirect_all_requests_to; end
  def reload; end
  def routing_rules; end
  def wait_until(options = T.unsafe(nil), &block); end

  private

  def extract_bucket_name(args, options); end
end

class Aws::S3::BucketWebsite::Collection < ::Aws::Resources::Collection; end

class Aws::S3::Client < ::Seahorse::Client::Base
  include ::Aws::ClientStubs

  def initialize(*args); end

  def abort_multipart_upload(params = T.unsafe(nil), options = T.unsafe(nil)); end
  def build_request(operation_name, params = T.unsafe(nil)); end
  def complete_multipart_upload(params = T.unsafe(nil), options = T.unsafe(nil)); end
  def copy_object(params = T.unsafe(nil), options = T.unsafe(nil)); end
  def create_bucket(params = T.unsafe(nil), options = T.unsafe(nil)); end
  def create_multipart_upload(params = T.unsafe(nil), options = T.unsafe(nil)); end
  def delete_bucket(params = T.unsafe(nil), options = T.unsafe(nil)); end
  def delete_bucket_analytics_configuration(params = T.unsafe(nil), options = T.unsafe(nil)); end
  def delete_bucket_cors(params = T.unsafe(nil), options = T.unsafe(nil)); end
  def delete_bucket_encryption(params = T.unsafe(nil), options = T.unsafe(nil)); end
  def delete_bucket_intelligent_tiering_configuration(params = T.unsafe(nil), options = T.unsafe(nil)); end
  def delete_bucket_inventory_configuration(params = T.unsafe(nil), options = T.unsafe(nil)); end
  def delete_bucket_lifecycle(params = T.unsafe(nil), options = T.unsafe(nil)); end
  def delete_bucket_metrics_configuration(params = T.unsafe(nil), options = T.unsafe(nil)); end
  def delete_bucket_ownership_controls(params = T.unsafe(nil), options = T.unsafe(nil)); end
  def delete_bucket_policy(params = T.unsafe(nil), options = T.unsafe(nil)); end
  def delete_bucket_replication(params = T.unsafe(nil), options = T.unsafe(nil)); end
  def delete_bucket_tagging(params = T.unsafe(nil), options = T.unsafe(nil)); end
  def delete_bucket_website(params = T.unsafe(nil), options = T.unsafe(nil)); end
  def delete_object(params = T.unsafe(nil), options = T.unsafe(nil)); end
  def delete_object_tagging(params = T.unsafe(nil), options = T.unsafe(nil)); end
  def delete_objects(params = T.unsafe(nil), options = T.unsafe(nil)); end
  def delete_public_access_block(params = T.unsafe(nil), options = T.unsafe(nil)); end
  def get_bucket_accelerate_configuration(params = T.unsafe(nil), options = T.unsafe(nil)); end
  def get_bucket_acl(params = T.unsafe(nil), options = T.unsafe(nil)); end
  def get_bucket_analytics_configuration(params = T.unsafe(nil), options = T.unsafe(nil)); end
  def get_bucket_cors(params = T.unsafe(nil), options = T.unsafe(nil)); end
  def get_bucket_encryption(params = T.unsafe(nil), options = T.unsafe(nil)); end
  def get_bucket_intelligent_tiering_configuration(params = T.unsafe(nil), options = T.unsafe(nil)); end
  def get_bucket_inventory_configuration(params = T.unsafe(nil), options = T.unsafe(nil)); end
  def get_bucket_lifecycle(params = T.unsafe(nil), options = T.unsafe(nil)); end
  def get_bucket_lifecycle_configuration(params = T.unsafe(nil), options = T.unsafe(nil)); end
  def get_bucket_location(params = T.unsafe(nil), options = T.unsafe(nil)); end
  def get_bucket_logging(params = T.unsafe(nil), options = T.unsafe(nil)); end
  def get_bucket_metrics_configuration(params = T.unsafe(nil), options = T.unsafe(nil)); end
  def get_bucket_notification(params = T.unsafe(nil), options = T.unsafe(nil)); end
  def get_bucket_notification_configuration(params = T.unsafe(nil), options = T.unsafe(nil)); end
  def get_bucket_ownership_controls(params = T.unsafe(nil), options = T.unsafe(nil)); end
  def get_bucket_policy(params = T.unsafe(nil), options = T.unsafe(nil), &block); end
  def get_bucket_policy_status(params = T.unsafe(nil), options = T.unsafe(nil)); end
  def get_bucket_replication(params = T.unsafe(nil), options = T.unsafe(nil)); end
  def get_bucket_request_payment(params = T.unsafe(nil), options = T.unsafe(nil)); end
  def get_bucket_tagging(params = T.unsafe(nil), options = T.unsafe(nil)); end
  def get_bucket_versioning(params = T.unsafe(nil), options = T.unsafe(nil)); end
  def get_bucket_website(params = T.unsafe(nil), options = T.unsafe(nil)); end
  def get_object(params = T.unsafe(nil), options = T.unsafe(nil), &block); end
  def get_object_acl(params = T.unsafe(nil), options = T.unsafe(nil)); end
  def get_object_legal_hold(params = T.unsafe(nil), options = T.unsafe(nil)); end
  def get_object_lock_configuration(params = T.unsafe(nil), options = T.unsafe(nil)); end
  def get_object_retention(params = T.unsafe(nil), options = T.unsafe(nil)); end
  def get_object_tagging(params = T.unsafe(nil), options = T.unsafe(nil)); end
  def get_object_torrent(params = T.unsafe(nil), options = T.unsafe(nil), &block); end
  def get_public_access_block(params = T.unsafe(nil), options = T.unsafe(nil)); end
  def head_bucket(params = T.unsafe(nil), options = T.unsafe(nil)); end
  def head_object(params = T.unsafe(nil), options = T.unsafe(nil)); end
  def list_bucket_analytics_configurations(params = T.unsafe(nil), options = T.unsafe(nil)); end
  def list_bucket_intelligent_tiering_configurations(params = T.unsafe(nil), options = T.unsafe(nil)); end
  def list_bucket_inventory_configurations(params = T.unsafe(nil), options = T.unsafe(nil)); end
  def list_bucket_metrics_configurations(params = T.unsafe(nil), options = T.unsafe(nil)); end
  def list_buckets(params = T.unsafe(nil), options = T.unsafe(nil)); end
  def list_multipart_uploads(params = T.unsafe(nil), options = T.unsafe(nil)); end
  def list_object_versions(params = T.unsafe(nil), options = T.unsafe(nil)); end
  def list_objects(params = T.unsafe(nil), options = T.unsafe(nil)); end
  def list_objects_v2(params = T.unsafe(nil), options = T.unsafe(nil)); end
  def list_parts(params = T.unsafe(nil), options = T.unsafe(nil)); end
  def put_bucket_accelerate_configuration(params = T.unsafe(nil), options = T.unsafe(nil)); end
  def put_bucket_acl(params = T.unsafe(nil), options = T.unsafe(nil)); end
  def put_bucket_analytics_configuration(params = T.unsafe(nil), options = T.unsafe(nil)); end
  def put_bucket_cors(params = T.unsafe(nil), options = T.unsafe(nil)); end
  def put_bucket_encryption(params = T.unsafe(nil), options = T.unsafe(nil)); end
  def put_bucket_intelligent_tiering_configuration(params = T.unsafe(nil), options = T.unsafe(nil)); end
  def put_bucket_inventory_configuration(params = T.unsafe(nil), options = T.unsafe(nil)); end
  def put_bucket_lifecycle(params = T.unsafe(nil), options = T.unsafe(nil)); end
  def put_bucket_lifecycle_configuration(params = T.unsafe(nil), options = T.unsafe(nil)); end
  def put_bucket_logging(params = T.unsafe(nil), options = T.unsafe(nil)); end
  def put_bucket_metrics_configuration(params = T.unsafe(nil), options = T.unsafe(nil)); end
  def put_bucket_notification(params = T.unsafe(nil), options = T.unsafe(nil)); end
  def put_bucket_notification_configuration(params = T.unsafe(nil), options = T.unsafe(nil)); end
  def put_bucket_ownership_controls(params = T.unsafe(nil), options = T.unsafe(nil)); end
  def put_bucket_policy(params = T.unsafe(nil), options = T.unsafe(nil)); end
  def put_bucket_replication(params = T.unsafe(nil), options = T.unsafe(nil)); end
  def put_bucket_request_payment(params = T.unsafe(nil), options = T.unsafe(nil)); end
  def put_bucket_tagging(params = T.unsafe(nil), options = T.unsafe(nil)); end
  def put_bucket_versioning(params = T.unsafe(nil), options = T.unsafe(nil)); end
  def put_bucket_website(params = T.unsafe(nil), options = T.unsafe(nil)); end
  def put_object(params = T.unsafe(nil), options = T.unsafe(nil)); end
  def put_object_acl(params = T.unsafe(nil), options = T.unsafe(nil)); end
  def put_object_legal_hold(params = T.unsafe(nil), options = T.unsafe(nil)); end
  def put_object_lock_configuration(params = T.unsafe(nil), options = T.unsafe(nil)); end
  def put_object_retention(params = T.unsafe(nil), options = T.unsafe(nil)); end
  def put_object_tagging(params = T.unsafe(nil), options = T.unsafe(nil)); end
  def put_public_access_block(params = T.unsafe(nil), options = T.unsafe(nil)); end
  def restore_object(params = T.unsafe(nil), options = T.unsafe(nil)); end
  def select_object_content(params = T.unsafe(nil), options = T.unsafe(nil), &block); end
  def upload_part(params = T.unsafe(nil), options = T.unsafe(nil)); end
  def upload_part_copy(params = T.unsafe(nil), options = T.unsafe(nil)); end
  def wait_until(waiter_name, params = T.unsafe(nil), options = T.unsafe(nil)); end
  def waiter_names; end

  private

  def waiter(waiter_name, options = T.unsafe(nil)); end
  def waiters; end

  class << self
    def errors_module; end
    def identifier; end
  end
end

module Aws::S3::ClientApi
  include ::Seahorse::Model
end

Aws::S3::ClientApi::API = T.let(T.unsafe(nil), Seahorse::Model::Api)
Aws::S3::ClientApi::AbortDate = T.let(T.unsafe(nil), Seahorse::Model::Shapes::TimestampShape)
Aws::S3::ClientApi::AbortIncompleteMultipartUpload = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::AbortMultipartUploadOutput = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::AbortMultipartUploadRequest = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::AbortRuleId = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::AccelerateConfiguration = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::AcceptRanges = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::AccessControlPolicy = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::AccessControlTranslation = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::AccountId = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::AllowQuotedRecordDelimiter = T.let(T.unsafe(nil), Seahorse::Model::Shapes::BooleanShape)
Aws::S3::ClientApi::AllowedHeader = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::AllowedHeaders = T.let(T.unsafe(nil), Seahorse::Model::Shapes::ListShape)
Aws::S3::ClientApi::AllowedMethod = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::AllowedMethods = T.let(T.unsafe(nil), Seahorse::Model::Shapes::ListShape)
Aws::S3::ClientApi::AllowedOrigin = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::AllowedOrigins = T.let(T.unsafe(nil), Seahorse::Model::Shapes::ListShape)
Aws::S3::ClientApi::AnalyticsAndOperator = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::AnalyticsConfiguration = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::AnalyticsConfigurationList = T.let(T.unsafe(nil), Seahorse::Model::Shapes::ListShape)
Aws::S3::ClientApi::AnalyticsExportDestination = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::AnalyticsFilter = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::AnalyticsId = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::AnalyticsS3BucketDestination = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::AnalyticsS3ExportFileFormat = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::ArchiveStatus = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::Body = T.let(T.unsafe(nil), Seahorse::Model::Shapes::BlobShape)
Aws::S3::ClientApi::Bucket = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::BucketAccelerateStatus = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::BucketAlreadyExists = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::BucketAlreadyOwnedByYou = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::BucketCannedACL = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::BucketKeyEnabled = T.let(T.unsafe(nil), Seahorse::Model::Shapes::BooleanShape)
Aws::S3::ClientApi::BucketLifecycleConfiguration = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::BucketLocationConstraint = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::BucketLoggingStatus = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::BucketLogsPermission = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::BucketName = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::BucketVersioningStatus = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::Buckets = T.let(T.unsafe(nil), Seahorse::Model::Shapes::ListShape)
Aws::S3::ClientApi::BypassGovernanceRetention = T.let(T.unsafe(nil), Seahorse::Model::Shapes::BooleanShape)
Aws::S3::ClientApi::BytesProcessed = T.let(T.unsafe(nil), Seahorse::Model::Shapes::IntegerShape)
Aws::S3::ClientApi::BytesReturned = T.let(T.unsafe(nil), Seahorse::Model::Shapes::IntegerShape)
Aws::S3::ClientApi::BytesScanned = T.let(T.unsafe(nil), Seahorse::Model::Shapes::IntegerShape)
Aws::S3::ClientApi::CORSConfiguration = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::CORSRule = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::CORSRules = T.let(T.unsafe(nil), Seahorse::Model::Shapes::ListShape)
Aws::S3::ClientApi::CSVInput = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::CSVOutput = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::CacheControl = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::CloudFunction = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::CloudFunctionConfiguration = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::CloudFunctionInvocationRole = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::Code = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::Comments = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::CommonPrefix = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::CommonPrefixList = T.let(T.unsafe(nil), Seahorse::Model::Shapes::ListShape)
Aws::S3::ClientApi::CompleteMultipartUploadOutput = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::CompleteMultipartUploadRequest = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::CompletedMultipartUpload = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::CompletedPart = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::CompletedPartList = T.let(T.unsafe(nil), Seahorse::Model::Shapes::ListShape)
Aws::S3::ClientApi::CompressionType = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::Condition = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::ConfirmRemoveSelfBucketAccess = T.let(T.unsafe(nil), Seahorse::Model::Shapes::BooleanShape)
Aws::S3::ClientApi::ContentDisposition = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::ContentEncoding = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::ContentLanguage = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::ContentLength = T.let(T.unsafe(nil), Seahorse::Model::Shapes::IntegerShape)
Aws::S3::ClientApi::ContentMD5 = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::ContentRange = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::ContentType = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::ContinuationEvent = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::CopyObjectOutput = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::CopyObjectRequest = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::CopyObjectResult = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::CopyPartResult = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::CopySource = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::CopySourceIfMatch = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::CopySourceIfModifiedSince = T.let(T.unsafe(nil), Seahorse::Model::Shapes::TimestampShape)
Aws::S3::ClientApi::CopySourceIfNoneMatch = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::CopySourceIfUnmodifiedSince = T.let(T.unsafe(nil), Seahorse::Model::Shapes::TimestampShape)
Aws::S3::ClientApi::CopySourceRange = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::CopySourceSSECustomerAlgorithm = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::CopySourceSSECustomerKey = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::CopySourceSSECustomerKeyMD5 = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::CopySourceVersionId = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::CreateBucketConfiguration = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::CreateBucketOutput = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::CreateBucketRequest = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::CreateMultipartUploadOutput = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::CreateMultipartUploadRequest = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::CreationDate = T.let(T.unsafe(nil), Seahorse::Model::Shapes::TimestampShape)
Aws::S3::ClientApi::Date = T.let(T.unsafe(nil), Seahorse::Model::Shapes::TimestampShape)
Aws::S3::ClientApi::Days = T.let(T.unsafe(nil), Seahorse::Model::Shapes::IntegerShape)
Aws::S3::ClientApi::DaysAfterInitiation = T.let(T.unsafe(nil), Seahorse::Model::Shapes::IntegerShape)
Aws::S3::ClientApi::DefaultRetention = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::Delete = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::DeleteBucketAnalyticsConfigurationRequest = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::DeleteBucketCorsRequest = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::DeleteBucketEncryptionRequest = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::DeleteBucketIntelligentTieringConfigurationRequest = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::DeleteBucketInventoryConfigurationRequest = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::DeleteBucketLifecycleRequest = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::DeleteBucketMetricsConfigurationRequest = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::DeleteBucketOwnershipControlsRequest = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::DeleteBucketPolicyRequest = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::DeleteBucketReplicationRequest = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::DeleteBucketRequest = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::DeleteBucketTaggingRequest = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::DeleteBucketWebsiteRequest = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::DeleteMarker = T.let(T.unsafe(nil), Seahorse::Model::Shapes::BooleanShape)
Aws::S3::ClientApi::DeleteMarkerEntry = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::DeleteMarkerReplication = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::DeleteMarkerReplicationStatus = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::DeleteMarkerVersionId = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::DeleteMarkers = T.let(T.unsafe(nil), Seahorse::Model::Shapes::ListShape)
Aws::S3::ClientApi::DeleteObjectOutput = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::DeleteObjectRequest = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::DeleteObjectTaggingOutput = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::DeleteObjectTaggingRequest = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::DeleteObjectsOutput = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::DeleteObjectsRequest = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::DeletePublicAccessBlockRequest = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::DeletedObject = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::DeletedObjects = T.let(T.unsafe(nil), Seahorse::Model::Shapes::ListShape)
Aws::S3::ClientApi::Delimiter = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::Description = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::Destination = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::DisplayName = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::ETag = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::EmailAddress = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::EnableRequestProgress = T.let(T.unsafe(nil), Seahorse::Model::Shapes::BooleanShape)
Aws::S3::ClientApi::EncodingType = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::Encryption = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::EncryptionConfiguration = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::End = T.let(T.unsafe(nil), Seahorse::Model::Shapes::IntegerShape)
Aws::S3::ClientApi::EndEvent = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::Error = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::ErrorDocument = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::Errors = T.let(T.unsafe(nil), Seahorse::Model::Shapes::ListShape)
Aws::S3::ClientApi::Event = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::EventList = T.let(T.unsafe(nil), Seahorse::Model::Shapes::ListShape)
Aws::S3::ClientApi::ExistingObjectReplication = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::ExistingObjectReplicationStatus = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::Expiration = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::ExpirationStatus = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::ExpiredObjectDeleteMarker = T.let(T.unsafe(nil), Seahorse::Model::Shapes::BooleanShape)
Aws::S3::ClientApi::Expires = T.let(T.unsafe(nil), Seahorse::Model::Shapes::TimestampShape)
Aws::S3::ClientApi::ExpiresString = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::ExposeHeader = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::ExposeHeaders = T.let(T.unsafe(nil), Seahorse::Model::Shapes::ListShape)
Aws::S3::ClientApi::Expression = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::ExpressionType = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::FetchOwner = T.let(T.unsafe(nil), Seahorse::Model::Shapes::BooleanShape)
Aws::S3::ClientApi::FieldDelimiter = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::FileHeaderInfo = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::FilterRule = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::FilterRuleList = T.let(T.unsafe(nil), Seahorse::Model::Shapes::ListShape)
Aws::S3::ClientApi::FilterRuleName = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::FilterRuleValue = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::GetBucketAccelerateConfigurationOutput = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::GetBucketAccelerateConfigurationRequest = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::GetBucketAclOutput = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::GetBucketAclRequest = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::GetBucketAnalyticsConfigurationOutput = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::GetBucketAnalyticsConfigurationRequest = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::GetBucketCorsOutput = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::GetBucketCorsRequest = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::GetBucketEncryptionOutput = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::GetBucketEncryptionRequest = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::GetBucketIntelligentTieringConfigurationOutput = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::GetBucketIntelligentTieringConfigurationRequest = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::GetBucketInventoryConfigurationOutput = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::GetBucketInventoryConfigurationRequest = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::GetBucketLifecycleConfigurationOutput = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::GetBucketLifecycleConfigurationRequest = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::GetBucketLifecycleOutput = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::GetBucketLifecycleRequest = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::GetBucketLocationOutput = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::GetBucketLocationRequest = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::GetBucketLoggingOutput = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::GetBucketLoggingRequest = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::GetBucketMetricsConfigurationOutput = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::GetBucketMetricsConfigurationRequest = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::GetBucketNotificationConfigurationRequest = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::GetBucketOwnershipControlsOutput = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::GetBucketOwnershipControlsRequest = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::GetBucketPolicyOutput = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::GetBucketPolicyRequest = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::GetBucketPolicyStatusOutput = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::GetBucketPolicyStatusRequest = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::GetBucketReplicationOutput = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::GetBucketReplicationRequest = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::GetBucketRequestPaymentOutput = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::GetBucketRequestPaymentRequest = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::GetBucketTaggingOutput = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::GetBucketTaggingRequest = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::GetBucketVersioningOutput = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::GetBucketVersioningRequest = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::GetBucketWebsiteOutput = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::GetBucketWebsiteRequest = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::GetObjectAclOutput = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::GetObjectAclRequest = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::GetObjectLegalHoldOutput = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::GetObjectLegalHoldRequest = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::GetObjectLockConfigurationOutput = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::GetObjectLockConfigurationRequest = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::GetObjectOutput = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::GetObjectRequest = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::GetObjectRetentionOutput = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::GetObjectRetentionRequest = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::GetObjectTaggingOutput = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::GetObjectTaggingRequest = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::GetObjectTorrentOutput = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::GetObjectTorrentRequest = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::GetPublicAccessBlockOutput = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::GetPublicAccessBlockRequest = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::GlacierJobParameters = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::Grant = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::GrantFullControl = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::GrantRead = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::GrantReadACP = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::GrantWrite = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::GrantWriteACP = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::Grantee = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::Grants = T.let(T.unsafe(nil), Seahorse::Model::Shapes::ListShape)
Aws::S3::ClientApi::HeadBucketRequest = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::HeadObjectOutput = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::HeadObjectRequest = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::HostName = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::HttpErrorCodeReturnedEquals = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::HttpRedirectCode = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::ID = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::IfMatch = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::IfModifiedSince = T.let(T.unsafe(nil), Seahorse::Model::Shapes::TimestampShape)
Aws::S3::ClientApi::IfNoneMatch = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::IfUnmodifiedSince = T.let(T.unsafe(nil), Seahorse::Model::Shapes::TimestampShape)
Aws::S3::ClientApi::IndexDocument = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::Initiated = T.let(T.unsafe(nil), Seahorse::Model::Shapes::TimestampShape)
Aws::S3::ClientApi::Initiator = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::InputSerialization = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::IntelligentTieringAccessTier = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::IntelligentTieringAndOperator = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::IntelligentTieringConfiguration = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::IntelligentTieringConfigurationList = T.let(T.unsafe(nil), Seahorse::Model::Shapes::ListShape)
Aws::S3::ClientApi::IntelligentTieringDays = T.let(T.unsafe(nil), Seahorse::Model::Shapes::IntegerShape)
Aws::S3::ClientApi::IntelligentTieringFilter = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::IntelligentTieringId = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::IntelligentTieringStatus = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::InvalidObjectState = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::InventoryConfiguration = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::InventoryConfigurationList = T.let(T.unsafe(nil), Seahorse::Model::Shapes::ListShape)
Aws::S3::ClientApi::InventoryDestination = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::InventoryEncryption = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::InventoryFilter = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::InventoryFormat = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::InventoryFrequency = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::InventoryId = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::InventoryIncludedObjectVersions = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::InventoryOptionalField = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::InventoryOptionalFields = T.let(T.unsafe(nil), Seahorse::Model::Shapes::ListShape)
Aws::S3::ClientApi::InventoryS3BucketDestination = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::InventorySchedule = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::IsEnabled = T.let(T.unsafe(nil), Seahorse::Model::Shapes::BooleanShape)
Aws::S3::ClientApi::IsLatest = T.let(T.unsafe(nil), Seahorse::Model::Shapes::BooleanShape)
Aws::S3::ClientApi::IsPublic = T.let(T.unsafe(nil), Seahorse::Model::Shapes::BooleanShape)
Aws::S3::ClientApi::IsTruncated = T.let(T.unsafe(nil), Seahorse::Model::Shapes::BooleanShape)
Aws::S3::ClientApi::JSONInput = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::JSONOutput = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::JSONType = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::KMSContext = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::KeyCount = T.let(T.unsafe(nil), Seahorse::Model::Shapes::IntegerShape)
Aws::S3::ClientApi::KeyMarker = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::KeyPrefixEquals = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::LambdaFunctionArn = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::LambdaFunctionConfiguration = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::LambdaFunctionConfigurationList = T.let(T.unsafe(nil), Seahorse::Model::Shapes::ListShape)
Aws::S3::ClientApi::LastModified = T.let(T.unsafe(nil), Seahorse::Model::Shapes::TimestampShape)
Aws::S3::ClientApi::LifecycleConfiguration = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::LifecycleExpiration = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::LifecycleRule = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::LifecycleRuleAndOperator = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::LifecycleRuleFilter = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::LifecycleRules = T.let(T.unsafe(nil), Seahorse::Model::Shapes::ListShape)
Aws::S3::ClientApi::ListBucketAnalyticsConfigurationsOutput = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::ListBucketAnalyticsConfigurationsRequest = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::ListBucketIntelligentTieringConfigurationsOutput = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::ListBucketIntelligentTieringConfigurationsRequest = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::ListBucketInventoryConfigurationsOutput = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::ListBucketInventoryConfigurationsRequest = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::ListBucketMetricsConfigurationsOutput = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::ListBucketMetricsConfigurationsRequest = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::ListBucketsOutput = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::ListMultipartUploadsOutput = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::ListMultipartUploadsRequest = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::ListObjectVersionsOutput = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::ListObjectVersionsRequest = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::ListObjectsOutput = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::ListObjectsRequest = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::ListObjectsV2Output = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::ListObjectsV2Request = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::ListPartsOutput = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::ListPartsRequest = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::Location = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::LocationPrefix = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::LoggingEnabled = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::MFA = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::MFADelete = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::MFADeleteStatus = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::Marker = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::MaxAgeSeconds = T.let(T.unsafe(nil), Seahorse::Model::Shapes::IntegerShape)
Aws::S3::ClientApi::MaxKeys = T.let(T.unsafe(nil), Seahorse::Model::Shapes::IntegerShape)
Aws::S3::ClientApi::MaxParts = T.let(T.unsafe(nil), Seahorse::Model::Shapes::IntegerShape)
Aws::S3::ClientApi::MaxUploads = T.let(T.unsafe(nil), Seahorse::Model::Shapes::IntegerShape)
Aws::S3::ClientApi::Message = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::Metadata = T.let(T.unsafe(nil), Seahorse::Model::Shapes::MapShape)
Aws::S3::ClientApi::MetadataDirective = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::MetadataEntry = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::MetadataKey = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::MetadataValue = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::Metrics = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::MetricsAndOperator = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::MetricsConfiguration = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::MetricsConfigurationList = T.let(T.unsafe(nil), Seahorse::Model::Shapes::ListShape)
Aws::S3::ClientApi::MetricsFilter = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::MetricsId = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::MetricsStatus = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::Minutes = T.let(T.unsafe(nil), Seahorse::Model::Shapes::IntegerShape)
Aws::S3::ClientApi::MissingMeta = T.let(T.unsafe(nil), Seahorse::Model::Shapes::IntegerShape)
Aws::S3::ClientApi::MultipartUpload = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::MultipartUploadId = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::MultipartUploadList = T.let(T.unsafe(nil), Seahorse::Model::Shapes::ListShape)
Aws::S3::ClientApi::NextKeyMarker = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::NextMarker = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::NextPartNumberMarker = T.let(T.unsafe(nil), Seahorse::Model::Shapes::IntegerShape)
Aws::S3::ClientApi::NextToken = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::NextUploadIdMarker = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::NextVersionIdMarker = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::NoSuchBucket = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::NoSuchKey = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::NoSuchUpload = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::NoncurrentVersionExpiration = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::NoncurrentVersionTransition = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::NoncurrentVersionTransitionList = T.let(T.unsafe(nil), Seahorse::Model::Shapes::ListShape)
Aws::S3::ClientApi::NotificationConfiguration = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::NotificationConfigurationDeprecated = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::NotificationConfigurationFilter = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::NotificationId = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::Object = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::ObjectAlreadyInActiveTierError = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::ObjectCannedACL = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::ObjectIdentifier = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::ObjectIdentifierList = T.let(T.unsafe(nil), Seahorse::Model::Shapes::ListShape)
Aws::S3::ClientApi::ObjectKey = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::ObjectList = T.let(T.unsafe(nil), Seahorse::Model::Shapes::ListShape)
Aws::S3::ClientApi::ObjectLockConfiguration = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::ObjectLockEnabled = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::ObjectLockEnabledForBucket = T.let(T.unsafe(nil), Seahorse::Model::Shapes::BooleanShape)
Aws::S3::ClientApi::ObjectLockLegalHold = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::ObjectLockLegalHoldStatus = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::ObjectLockMode = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::ObjectLockRetainUntilDate = T.let(T.unsafe(nil), Seahorse::Model::Shapes::TimestampShape)
Aws::S3::ClientApi::ObjectLockRetention = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::ObjectLockRetentionMode = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::ObjectLockRule = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::ObjectLockToken = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::ObjectNotInActiveTierError = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::ObjectOwnership = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::ObjectStorageClass = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::ObjectVersion = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::ObjectVersionId = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::ObjectVersionList = T.let(T.unsafe(nil), Seahorse::Model::Shapes::ListShape)
Aws::S3::ClientApi::ObjectVersionStorageClass = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::OutputLocation = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::OutputSerialization = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::Owner = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::OwnerOverride = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::OwnershipControls = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::OwnershipControlsRule = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::OwnershipControlsRules = T.let(T.unsafe(nil), Seahorse::Model::Shapes::ListShape)
Aws::S3::ClientApi::ParquetInput = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::Part = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::PartNumber = T.let(T.unsafe(nil), Seahorse::Model::Shapes::IntegerShape)
Aws::S3::ClientApi::PartNumberMarker = T.let(T.unsafe(nil), Seahorse::Model::Shapes::IntegerShape)
Aws::S3::ClientApi::Parts = T.let(T.unsafe(nil), Seahorse::Model::Shapes::ListShape)
Aws::S3::ClientApi::PartsCount = T.let(T.unsafe(nil), Seahorse::Model::Shapes::IntegerShape)
Aws::S3::ClientApi::Payer = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::Permission = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::Policy = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::PolicyStatus = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::Prefix = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::Priority = T.let(T.unsafe(nil), Seahorse::Model::Shapes::IntegerShape)
Aws::S3::ClientApi::Progress = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::ProgressEvent = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::Protocol = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::PublicAccessBlockConfiguration = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::PutBucketAccelerateConfigurationRequest = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::PutBucketAclRequest = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::PutBucketAnalyticsConfigurationRequest = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::PutBucketCorsRequest = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::PutBucketEncryptionRequest = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::PutBucketIntelligentTieringConfigurationRequest = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::PutBucketInventoryConfigurationRequest = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::PutBucketLifecycleConfigurationRequest = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::PutBucketLifecycleRequest = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::PutBucketLoggingRequest = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::PutBucketMetricsConfigurationRequest = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::PutBucketNotificationConfigurationRequest = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::PutBucketNotificationRequest = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::PutBucketOwnershipControlsRequest = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::PutBucketPolicyRequest = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::PutBucketReplicationRequest = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::PutBucketRequestPaymentRequest = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::PutBucketTaggingRequest = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::PutBucketVersioningRequest = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::PutBucketWebsiteRequest = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::PutObjectAclOutput = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::PutObjectAclRequest = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::PutObjectLegalHoldOutput = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::PutObjectLegalHoldRequest = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::PutObjectLockConfigurationOutput = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::PutObjectLockConfigurationRequest = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::PutObjectOutput = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::PutObjectRequest = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::PutObjectRetentionOutput = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::PutObjectRetentionRequest = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::PutObjectTaggingOutput = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::PutObjectTaggingRequest = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::PutPublicAccessBlockRequest = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::QueueArn = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::QueueConfiguration = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::QueueConfigurationDeprecated = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::QueueConfigurationList = T.let(T.unsafe(nil), Seahorse::Model::Shapes::ListShape)
Aws::S3::ClientApi::Quiet = T.let(T.unsafe(nil), Seahorse::Model::Shapes::BooleanShape)
Aws::S3::ClientApi::QuoteCharacter = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::QuoteEscapeCharacter = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::QuoteFields = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::Range = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::RecordDelimiter = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::RecordsEvent = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::Redirect = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::RedirectAllRequestsTo = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::ReplaceKeyPrefixWith = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::ReplaceKeyWith = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::ReplicaKmsKeyID = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::ReplicaModifications = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::ReplicaModificationsStatus = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::ReplicationConfiguration = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::ReplicationRule = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::ReplicationRuleAndOperator = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::ReplicationRuleFilter = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::ReplicationRuleStatus = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::ReplicationRules = T.let(T.unsafe(nil), Seahorse::Model::Shapes::ListShape)
Aws::S3::ClientApi::ReplicationStatus = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::ReplicationTime = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::ReplicationTimeStatus = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::ReplicationTimeValue = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::RequestCharged = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::RequestPayer = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::RequestPaymentConfiguration = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::RequestProgress = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::ResponseCacheControl = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::ResponseContentDisposition = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::ResponseContentEncoding = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::ResponseContentLanguage = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::ResponseContentType = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::ResponseExpires = T.let(T.unsafe(nil), Seahorse::Model::Shapes::TimestampShape)
Aws::S3::ClientApi::Restore = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::RestoreObjectOutput = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::RestoreObjectRequest = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::RestoreOutputPath = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::RestoreRequest = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::RestoreRequestType = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::Role = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::RoutingRule = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::RoutingRules = T.let(T.unsafe(nil), Seahorse::Model::Shapes::ListShape)
Aws::S3::ClientApi::Rule = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::Rules = T.let(T.unsafe(nil), Seahorse::Model::Shapes::ListShape)
Aws::S3::ClientApi::S3KeyFilter = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::S3Location = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::SSECustomerAlgorithm = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::SSECustomerKey = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::SSECustomerKeyMD5 = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::SSEKMS = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::SSEKMSEncryptionContext = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::SSEKMSKeyId = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::SSES3 = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::ScanRange = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::SelectObjectContentEventStream = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::SelectObjectContentOutput = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::SelectObjectContentRequest = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::SelectParameters = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::ServerSideEncryption = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::ServerSideEncryptionByDefault = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::ServerSideEncryptionConfiguration = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::ServerSideEncryptionRule = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::ServerSideEncryptionRules = T.let(T.unsafe(nil), Seahorse::Model::Shapes::ListShape)
Aws::S3::ClientApi::Setting = T.let(T.unsafe(nil), Seahorse::Model::Shapes::BooleanShape)
Aws::S3::ClientApi::Size = T.let(T.unsafe(nil), Seahorse::Model::Shapes::IntegerShape)
Aws::S3::ClientApi::SourceSelectionCriteria = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::SseKmsEncryptedObjects = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::SseKmsEncryptedObjectsStatus = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::Start = T.let(T.unsafe(nil), Seahorse::Model::Shapes::IntegerShape)
Aws::S3::ClientApi::StartAfter = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::Stats = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::StatsEvent = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::StorageClass = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::StorageClassAnalysis = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::StorageClassAnalysisDataExport = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::StorageClassAnalysisSchemaVersion = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::Suffix = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::Tag = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::TagCount = T.let(T.unsafe(nil), Seahorse::Model::Shapes::IntegerShape)
Aws::S3::ClientApi::TagSet = T.let(T.unsafe(nil), Seahorse::Model::Shapes::ListShape)
Aws::S3::ClientApi::Tagging = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::TaggingDirective = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::TaggingHeader = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::TargetBucket = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::TargetGrant = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::TargetGrants = T.let(T.unsafe(nil), Seahorse::Model::Shapes::ListShape)
Aws::S3::ClientApi::TargetPrefix = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::Tier = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::Tiering = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::TieringList = T.let(T.unsafe(nil), Seahorse::Model::Shapes::ListShape)
Aws::S3::ClientApi::Token = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::TopicArn = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::TopicConfiguration = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::TopicConfigurationDeprecated = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::TopicConfigurationList = T.let(T.unsafe(nil), Seahorse::Model::Shapes::ListShape)
Aws::S3::ClientApi::Transition = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::TransitionList = T.let(T.unsafe(nil), Seahorse::Model::Shapes::ListShape)
Aws::S3::ClientApi::TransitionStorageClass = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::Type = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::URI = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::UploadIdMarker = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::UploadPartCopyOutput = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::UploadPartCopyRequest = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::UploadPartOutput = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::UploadPartRequest = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::UserMetadata = T.let(T.unsafe(nil), Seahorse::Model::Shapes::ListShape)
Aws::S3::ClientApi::Value = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::VersionIdMarker = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::VersioningConfiguration = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::WebsiteConfiguration = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)
Aws::S3::ClientApi::WebsiteRedirectLocation = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)
Aws::S3::ClientApi::Years = T.let(T.unsafe(nil), Seahorse::Model::Shapes::IntegerShape)
Aws::S3::EC_USER_AGENT = T.let(T.unsafe(nil), String)
module Aws::S3::Encryption; end

class Aws::S3::Encryption::Client
  extend ::Aws::Deprecations
  extend ::Forwardable

  def initialize(*args, &block); end

  def build_request(*args, &block); end
  def client; end
  def config(*args, &block); end
  def delete_object(*args, &block); end
  def envelope_location; end
  def get_object(params = T.unsafe(nil), &block); end
  def head_object(*args, &block); end
  def instruction_file_suffix; end
  def key_provider; end
  def put_object(params = T.unsafe(nil)); end

  private

  def cipher_provider(options); end
  def deprecated_initialize(options = T.unsafe(nil)); end
  def envelope_options(params); end
  def extract_client(options); end
  def extract_key_provider(options); end
  def extract_location(options); end
  def extract_suffix(options); end
  def kms_client(options); end
end

class Aws::S3::Encryption::DecryptHandler < ::Seahorse::Client::Handler
  def call(context); end

  private

  def apply_cse_user_agent(context); end
  def attach_http_event_listeners(context); end
  def auth_tag_length(envelope); end
  def authenticated_decrypter(context, cipher, envelope); end
  def body_contains_auth_tag?(envelope); end
  def decryption_cipher(context); end
  def envelope_from_instr_file(context); end
  def envelope_from_metadata(context); end
  def extract_envelope(hash); end
  def get_encryption_envelope(context); end
  def v1_envelope(envelope); end
  def v2_envelope(envelope); end
end

Aws::S3::Encryption::DecryptHandler::AUTH_REQUIRED_CEK_ALGS = T.let(T.unsafe(nil), Array)
Aws::S3::Encryption::DecryptHandler::POSSIBLE_ENCRYPTION_FORMATS = T.let(T.unsafe(nil), Array)
Aws::S3::Encryption::DecryptHandler::POSSIBLE_ENVELOPE_KEYS = T.let(T.unsafe(nil), Array)
Aws::S3::Encryption::DecryptHandler::POSSIBLE_WRAPPING_FORMATS = T.let(T.unsafe(nil), Array)
Aws::S3::Encryption::DecryptHandler::V1_ENVELOPE_KEYS = T.let(T.unsafe(nil), Array)
Aws::S3::Encryption::DecryptHandler::V2_ENVELOPE_KEYS = T.let(T.unsafe(nil), Array)
Aws::S3::Encryption::DecryptHandler::V2_OPTIONAL_KEYS = T.let(T.unsafe(nil), Array)

class Aws::S3::Encryption::DefaultCipherProvider
  def initialize(options = T.unsafe(nil)); end

  def decryption_cipher(envelope, options = T.unsafe(nil)); end
  def encryption_cipher; end

  private

  def decode64(str); end
  def encode64(str); end
  def encrypt(data); end
  def envelope_iv(cipher); end
  def envelope_key(cipher); end
  def materials_description; end
end

class Aws::S3::Encryption::DefaultKeyProvider
  include ::Aws::S3::Encryption::KeyProvider

  def initialize(options = T.unsafe(nil)); end

  def encryption_materials; end
  def key_for(materials_description); end
end

class Aws::S3::Encryption::EncryptHandler < ::Seahorse::Client::Handler
  def call(context); end

  private

  def apply_cse_user_agent(context); end
  def apply_encryption_cipher(context, cipher); end
  def apply_encryption_envelope(context, envelope, cipher); end
end

module Aws::S3::Encryption::Errors; end
class Aws::S3::Encryption::Errors::DecryptionError < ::RuntimeError; end
class Aws::S3::Encryption::Errors::EncryptionError < ::RuntimeError; end

class Aws::S3::Encryption::IOAuthDecrypter
  def initialize(options = T.unsafe(nil)); end

  def finalize; end
  def io; end
  def write(chunk); end

  private

  def truncate_chunk(chunk); end
end

class Aws::S3::Encryption::IODecrypter
  def initialize(cipher, io); end

  def finalize; end
  def io; end
  def write(chunk); end
end

class Aws::S3::Encryption::IOEncrypter
  def initialize(cipher, io); end

  def close; end
  def read(bytes = T.unsafe(nil), output_buffer = T.unsafe(nil)); end
  def rewind; end
  def size; end

  private

  def encrypt_to_stringio(cipher, plain_text); end
  def encrypt_to_tempfile(cipher, io); end
end

Aws::S3::Encryption::IOEncrypter::ONE_MEGABYTE = T.let(T.unsafe(nil), Integer)

module Aws::S3::Encryption::KeyProvider
  def encryption_materials; end
  def key_for(materials_description); end
end

class Aws::S3::Encryption::KmsCipherProvider
  def initialize(options = T.unsafe(nil)); end

  def decryption_cipher(envelope, options = T.unsafe(nil)); end
  def encryption_cipher; end

  private

  def build_encryption_context(cek_alg, options = T.unsafe(nil)); end
  def decode64(str); end
  def encode64(str); end
end

class Aws::S3::Encryption::Materials
  def initialize(options = T.unsafe(nil)); end

  def description; end
  def key; end

  private

  def validate_desc(description); end
  def validate_key(key); end
end

module Aws::S3::Encryption::Utils
  class << self
    def aes_cipher(mode, block_mode, key, iv); end
    def aes_decryption_cipher(block_mode, key = T.unsafe(nil), iv = T.unsafe(nil)); end
    def aes_encryption_cipher(block_mode, key = T.unsafe(nil), iv = T.unsafe(nil)); end
    def cipher_size(key); end
    def decrypt(key, data); end
    def decrypt_aes_gcm(key, data, auth_data); end
    def decrypt_rsa(key, enc_data); end
    def encrypt(key, data); end
  end
end

Aws::S3::Encryption::Utils::UNSAFE_MSG = T.let(T.unsafe(nil), String)
module Aws::S3::EncryptionV2; end
Aws::S3::EncryptionV2::AES_GCM_TAG_LEN_BYTES = T.let(T.unsafe(nil), Integer)

class Aws::S3::EncryptionV2::Client
  extend ::Aws::Deprecations
  extend ::Forwardable

  def initialize(options = T.unsafe(nil)); end

  def build_request(*args, &block); end
  def client; end
  def config(*args, &block); end
  def delete_object(*args, &block); end
  def envelope_location; end
  def get_object(params = T.unsafe(nil), &block); end
  def head_object(*args, &block); end
  def instruction_file_suffix; end
  def key_provider; end
  def kms_allow_decrypt_with_any_cmk; end
  def put_object(params = T.unsafe(nil)); end
  def security_profile; end

  private

  def cipher_provider(options); end
  def envelope_options(params); end
  def extract_client(options); end
  def extract_key_provider(options); end
  def extract_location(options); end
  def extract_security_profile(options); end
  def extract_suffix(options); end
  def kms_any_cmk_mode(params); end
  def kms_client(options); end
  def security_profile_from_params(params); end
  def validate_params(options); end
  def validate_security_profile(security_profile); end
end

class Aws::S3::EncryptionV2::DecryptHandler < ::Seahorse::Client::Handler
  def call(context); end

  private

  def apply_cse_user_agent(context); end
  def attach_http_event_listeners(context); end
  def auth_tag_length(envelope); end
  def authenticated_decrypter(context, cipher, envelope); end
  def body_contains_auth_tag?(envelope); end
  def decryption_cipher(context); end
  def envelope_from_instr_file(context); end
  def envelope_from_metadata(context); end
  def extract_envelope(hash); end
  def get_encryption_envelope(context); end
  def v1_envelope(envelope); end
  def v2_envelope(envelope); end
end

Aws::S3::EncryptionV2::DecryptHandler::AUTH_REQUIRED_CEK_ALGS = T.let(T.unsafe(nil), Array)
Aws::S3::EncryptionV2::DecryptHandler::POSSIBLE_ENCRYPTION_FORMATS = T.let(T.unsafe(nil), Array)
Aws::S3::EncryptionV2::DecryptHandler::POSSIBLE_ENVELOPE_KEYS = T.let(T.unsafe(nil), Array)
Aws::S3::EncryptionV2::DecryptHandler::POSSIBLE_WRAPPING_FORMATS = T.let(T.unsafe(nil), Array)
Aws::S3::EncryptionV2::DecryptHandler::V1_ENVELOPE_KEYS = T.let(T.unsafe(nil), Array)
Aws::S3::EncryptionV2::DecryptHandler::V2_ENVELOPE_KEYS = T.let(T.unsafe(nil), Array)
Aws::S3::EncryptionV2::DecryptHandler::V2_OPTIONAL_KEYS = T.let(T.unsafe(nil), Array)

class Aws::S3::EncryptionV2::DefaultCipherProvider
  def initialize(options = T.unsafe(nil)); end

  def decryption_cipher(envelope, options = T.unsafe(nil)); end
  def encryption_cipher(options = T.unsafe(nil)); end

  private

  def decode64(str); end
  def encode64(str); end
  def encrypt_aes_gcm(data, auth_data); end
  def encrypt_rsa(data, auth_data); end
  def envelope_iv(cipher); end
  def envelope_key(cipher); end
  def materials_description; end
  def validate_cek(content_encryption_schema); end
  def validate_key_wrap(key_wrap_schema, key); end
  def validate_options(options); end
end

class Aws::S3::EncryptionV2::DefaultKeyProvider
  include ::Aws::S3::EncryptionV2::KeyProvider

  def initialize(options = T.unsafe(nil)); end

  def encryption_materials; end
  def key_for(materials_description); end
end

Aws::S3::EncryptionV2::EC_USER_AGENT = T.let(T.unsafe(nil), String)

class Aws::S3::EncryptionV2::EncryptHandler < ::Seahorse::Client::Handler
  def call(context); end

  private

  def apply_cse_user_agent(context); end
  def apply_encryption_cipher(context, cipher); end
  def apply_encryption_envelope(context, envelope); end
end

module Aws::S3::EncryptionV2::Errors; end

class Aws::S3::EncryptionV2::Errors::CEKAlgMismatchError < ::Aws::S3::EncryptionV2::Errors::DecryptionError
  def initialize(*args); end
end

class Aws::S3::EncryptionV2::Errors::DecryptionError < ::RuntimeError; end
class Aws::S3::EncryptionV2::Errors::EncryptionError < ::RuntimeError; end

class Aws::S3::EncryptionV2::Errors::LegacyDecryptionError < ::Aws::S3::EncryptionV2::Errors::DecryptionError
  def initialize(*args); end
end

class Aws::S3::EncryptionV2::IOAuthDecrypter
  def initialize(options = T.unsafe(nil)); end

  def finalize; end
  def io; end
  def write(chunk); end

  private

  def truncate_chunk(chunk); end
end

class Aws::S3::EncryptionV2::IODecrypter
  def initialize(cipher, io); end

  def finalize; end
  def io; end
  def write(chunk); end
end

class Aws::S3::EncryptionV2::IOEncrypter
  def initialize(cipher, io); end

  def close; end
  def read(bytes = T.unsafe(nil), output_buffer = T.unsafe(nil)); end
  def rewind; end
  def size; end

  private

  def encrypt_to_stringio(cipher, plain_text); end
  def encrypt_to_tempfile(cipher, io); end
end

Aws::S3::EncryptionV2::IOEncrypter::ONE_MEGABYTE = T.let(T.unsafe(nil), Integer)

module Aws::S3::EncryptionV2::KeyProvider
  def encryption_materials; end
  def key_for(materials_description); end
end

class Aws::S3::EncryptionV2::KmsCipherProvider
  def initialize(options = T.unsafe(nil)); end

  def decryption_cipher(envelope, options = T.unsafe(nil)); end
  def encryption_cipher(options = T.unsafe(nil)); end

  private

  def build_encryption_context(cek_alg, options = T.unsafe(nil)); end
  def decode64(str); end
  def encode64(str); end
  def validate_cek(content_encryption_schema); end
  def validate_key_for_encryption; end
  def validate_key_wrap(key_wrap_schema); end
  def validate_kms_key(kms_key_id); end
end

class Aws::S3::EncryptionV2::Materials
  def initialize(options = T.unsafe(nil)); end

  def description; end
  def key; end

  private

  def validate_desc(description); end
  def validate_key(key); end
end

module Aws::S3::EncryptionV2::Utils
  class << self
    def aes_cipher(mode, block_mode, key, iv); end
    def aes_decryption_cipher(block_mode, key = T.unsafe(nil), iv = T.unsafe(nil)); end
    def aes_encryption_cipher(block_mode, key = T.unsafe(nil), iv = T.unsafe(nil)); end
    def cipher_size(key); end
    def decrypt(key, data); end
    def decrypt_aes_gcm(key, data, auth_data); end
    def decrypt_rsa(key, enc_data); end
    def encrypt_aes_gcm(key, data, auth_data); end
    def encrypt_rsa(key, data, auth_data); end
  end
end

module Aws::S3::Errors
  extend ::Aws::Errors::DynamicErrors
end

class Aws::S3::Errors::BucketAlreadyExists < ::Aws::S3::Errors::ServiceError
  def initialize(context, message, data = T.unsafe(nil)); end
end

class Aws::S3::Errors::BucketAlreadyOwnedByYou < ::Aws::S3::Errors::ServiceError
  def initialize(context, message, data = T.unsafe(nil)); end
end

class Aws::S3::Errors::InvalidObjectState < ::Aws::S3::Errors::ServiceError
  def initialize(context, message, data = T.unsafe(nil)); end

  def access_tier; end
  def storage_class; end
end

class Aws::S3::Errors::NoSuchBucket < ::Aws::S3::Errors::ServiceError
  def initialize(context, message, data = T.unsafe(nil)); end
end

class Aws::S3::Errors::NoSuchKey < ::Aws::S3::Errors::ServiceError
  def initialize(context, message, data = T.unsafe(nil)); end
end

class Aws::S3::Errors::NoSuchUpload < ::Aws::S3::Errors::ServiceError
  def initialize(context, message, data = T.unsafe(nil)); end
end

class Aws::S3::Errors::ObjectAlreadyInActiveTierError < ::Aws::S3::Errors::ServiceError
  def initialize(context, message, data = T.unsafe(nil)); end
end

class Aws::S3::Errors::ObjectNotInActiveTierError < ::Aws::S3::Errors::ServiceError
  def initialize(context, message, data = T.unsafe(nil)); end
end

class Aws::S3::Errors::ServiceError < ::Aws::Errors::ServiceError; end
module Aws::S3::EventStreams; end

class Aws::S3::EventStreams::SelectObjectContentEventStream
  def initialize; end

  def event_emitter; end
  def on_cont_event(&block); end
  def on_end_event(&block); end
  def on_error_event(&block); end
  def on_event(&block); end
  def on_initial_response_event(&block); end
  def on_progress_event(&block); end
  def on_records_event(&block); end
  def on_stats_event(&block); end
  def on_unknown_event(&block); end
end

class Aws::S3::FileDownloader
  def initialize(options = T.unsafe(nil)); end

  def client; end
  def download(destination, options = T.unsafe(nil)); end

  private

  def batches(chunks, mode); end
  def compute_chunk(file_size); end
  def compute_mode(file_size, count); end
  def construct_chunks(file_size); end
  def multipart_download; end
  def multithreaded_get_by_parts(parts); end
  def multithreaded_get_by_ranges(chunks); end
  def single_request; end
  def thread_batches(chunks, param); end
  def write(resp); end
end

Aws::S3::FileDownloader::MAX_PARTS = T.let(T.unsafe(nil), Integer)
Aws::S3::FileDownloader::MIN_CHUNK_SIZE = T.let(T.unsafe(nil), Integer)
Aws::S3::FileDownloader::THREAD_COUNT = T.let(T.unsafe(nil), Integer)

class Aws::S3::FilePart
  def initialize(options = T.unsafe(nil)); end

  def close; end
  def first_byte; end
  def last_byte; end
  def read(bytes = T.unsafe(nil), output_buffer = T.unsafe(nil)); end
  def rewind; end
  def size; end
  def source; end

  private

  def open_file; end
  def read_from_file(bytes, output_buffer); end
  def remaining_bytes; end
end

class Aws::S3::FileUploader
  def initialize(options = T.unsafe(nil)); end

  def client; end
  def multipart_threshold; end
  def upload(source, options = T.unsafe(nil)); end

  private

  def open_file(source); end
  def put_object(source, options); end
  def single_part_progress(progress_callback); end
end

Aws::S3::FileUploader::FIFTEEN_MEGABYTES = T.let(T.unsafe(nil), Integer)
Aws::S3::GEM_VERSION = T.let(T.unsafe(nil), String)

class Aws::S3::LegacySigner
  def initialize(credentials, params, force_path_style); end

  def authorization(request); end
  def canonicalized_headers(request); end
  def canonicalized_resource(endpoint); end
  def credentials; end
  def digest(secret, string_to_sign); end
  def hmac(key, value); end
  def params; end
  def sign(request); end
  def signature(request); end
  def signed_querystring_params(endpoint); end
  def signing_string_date(request); end
  def string_to_sign(request); end
  def uri_escape(s); end

  class << self
    def sign(context); end
  end
end

Aws::S3::LegacySigner::SIGNED_QUERYSTRING_PARAMS = T.let(T.unsafe(nil), Set)

class Aws::S3::MultipartFileUploader
  def initialize(options = T.unsafe(nil)); end

  def client; end
  def upload(source, options = T.unsafe(nil)); end

  private

  def abort_upload(upload_id, options, errors); end
  def complete_upload(upload_id, parts, options); end
  def compute_default_part_size(source_size); end
  def compute_parts(upload_id, source, options); end
  def create_opts(options); end
  def initiate_upload(options); end
  def part_size(total_size, part_size, offset); end
  def upload_in_threads(pending, completed, options); end
  def upload_part_opts(options); end
  def upload_parts(upload_id, source, options); end
end

Aws::S3::MultipartFileUploader::CREATE_OPTIONS = T.let(T.unsafe(nil), Set)
Aws::S3::MultipartFileUploader::FILE_TOO_SMALL = T.let(T.unsafe(nil), String)
Aws::S3::MultipartFileUploader::MAX_PARTS = T.let(T.unsafe(nil), Integer)
Aws::S3::MultipartFileUploader::MIN_PART_SIZE = T.let(T.unsafe(nil), Integer)

class Aws::S3::MultipartFileUploader::MultipartProgress
  def initialize(parts, progress_callback); end

  def call(part_number, bytes_read); end
end

class Aws::S3::MultipartFileUploader::PartList
  def initialize(parts = T.unsafe(nil)); end

  def clear!; end
  def part_sizes; end
  def push(part); end
  def shift; end
  def size; end
  def to_a; end
end

Aws::S3::MultipartFileUploader::THREAD_COUNT = T.let(T.unsafe(nil), Integer)
Aws::S3::MultipartFileUploader::UPLOAD_PART_OPTIONS = T.let(T.unsafe(nil), Set)

class Aws::S3::MultipartStreamUploader
  def initialize(options = T.unsafe(nil)); end

  def client; end
  def upload(options = T.unsafe(nil), &block); end

  private

  def abort_upload(upload_id, options, errors); end
  def complete_upload(upload_id, parts, options); end
  def create_opts(options); end
  def initiate_upload(options); end
  def read_to_part_body(read_pipe); end
  def upload_in_threads(read_pipe, completed, options); end
  def upload_part_opts(options); end
  def upload_parts(upload_id, options, &block); end
end

Aws::S3::MultipartStreamUploader::CREATE_OPTIONS = T.let(T.unsafe(nil), Set)
Aws::S3::MultipartStreamUploader::PART_SIZE = T.let(T.unsafe(nil), Integer)
Aws::S3::MultipartStreamUploader::TEMPFILE_PREIX = T.let(T.unsafe(nil), String)
Aws::S3::MultipartStreamUploader::THREAD_COUNT = T.let(T.unsafe(nil), Integer)
Aws::S3::MultipartStreamUploader::UPLOAD_PART_OPTIONS = T.let(T.unsafe(nil), Set)

class Aws::S3::MultipartUpload
  extend ::Aws::Deprecations

  def initialize(*args); end

  def abort(options = T.unsafe(nil)); end
  def basic_complete(options = T.unsafe(nil)); end
  def bucket_name; end
  def client; end
  def complete(options = T.unsafe(nil)); end
  def data; end
  def data_loaded?; end
  def deprecated_identifiers; end
  def id; end
  def identifiers(*args, &block); end
  def initiated; end
  def initiator; end
  def key; end
  def load; end
  def object; end
  def object_key; end
  def owner; end
  def part(part_number); end
  def parts(options = T.unsafe(nil)); end
  def reload; end
  def storage_class; end
  def upload_id; end
  def wait_until(options = T.unsafe(nil), &block); end

  private

  def compute_parts; end
  def extract_bucket_name(args, options); end
  def extract_id(args, options); end
  def extract_object_key(args, options); end
end

class Aws::S3::MultipartUpload::Collection < ::Aws::Resources::Collection; end

class Aws::S3::MultipartUploadError < ::StandardError
  def initialize(message, errors); end

  def errors; end
end

class Aws::S3::MultipartUploadPart
  extend ::Aws::Deprecations

  def initialize(*args); end

  def bucket_name; end
  def client; end
  def copy_from(options = T.unsafe(nil)); end
  def data; end
  def data_loaded?; end
  def deprecated_identifiers; end
  def etag; end
  def identifiers(*args, &block); end
  def last_modified; end
  def load; end
  def multipart_upload; end
  def multipart_upload_id; end
  def object_key; end
  def part_number; end
  def reload; end
  def size; end
  def upload(options = T.unsafe(nil)); end
  def wait_until(options = T.unsafe(nil), &block); end

  private

  def extract_bucket_name(args, options); end
  def extract_multipart_upload_id(args, options); end
  def extract_object_key(args, options); end
  def extract_part_number(args, options); end
end

class Aws::S3::MultipartUploadPart::Collection < ::Aws::Resources::Collection; end

class Aws::S3::Object
  extend ::Aws::Deprecations

  def initialize(*args); end

  def accept_ranges; end
  def acl; end
  def archive_status; end
  def bucket; end
  def bucket_key_enabled; end
  def bucket_name; end
  def cache_control; end
  def client; end
  def content_disposition; end
  def content_encoding; end
  def content_language; end
  def content_length; end
  def content_type; end
  def copy_from(source, options = T.unsafe(nil)); end
  def copy_to(target, options = T.unsafe(nil)); end
  def data; end
  def data_loaded?; end
  def delete(options = T.unsafe(nil)); end
  def delete_marker; end
  def deprecated_identifiers; end
  def download_file(destination, options = T.unsafe(nil)); end
  def etag; end
  def exists?(options = T.unsafe(nil)); end
  def expiration; end
  def expires; end
  def expires_string; end
  def get(options = T.unsafe(nil), &block); end
  def identifiers(*args, &block); end
  def initiate_multipart_upload(options = T.unsafe(nil)); end
  def key; end
  def last_modified; end
  def load; end
  def metadata; end
  def missing_meta; end
  def move_to(target, options = T.unsafe(nil)); end
  def multipart_upload(id); end
  def object_lock_legal_hold_status; end
  def object_lock_mode; end
  def object_lock_retain_until_date; end
  def parts_count; end
  def presigned_post(options = T.unsafe(nil)); end
  def presigned_url(http_method, params = T.unsafe(nil)); end
  def public_url(options = T.unsafe(nil)); end
  def put(options = T.unsafe(nil)); end
  def reload; end
  def replication_status; end
  def request_charged; end
  def restore; end
  def restore_object(options = T.unsafe(nil)); end
  def server_side_encryption; end
  def size; end
  def sse_customer_algorithm; end
  def sse_customer_key_md5; end
  def ssekms_key_id; end
  def storage_class; end
  def upload_file(source, options = T.unsafe(nil)); end
  def upload_stream(options = T.unsafe(nil), &block); end
  def version(id); end
  def version_id; end
  def wait_until(options = T.unsafe(nil), &block); end
  def wait_until_exists(options = T.unsafe(nil), &block); end
  def wait_until_not_exists(options = T.unsafe(nil), &block); end
  def website_redirect_location; end

  private

  def extract_bucket_name(args, options); end
  def extract_key(args, options); end
  def separate_params_and_options(options); end
  def yield_waiter_and_warn(waiter, &block); end
end

class Aws::S3::Object::Collection < ::Aws::Resources::Collection
  def batch_delete!(options = T.unsafe(nil)); end
  def delete(*args, &block); end
  def deprecated_delete(options = T.unsafe(nil)); end
end

class Aws::S3::ObjectAcl
  extend ::Aws::Deprecations

  def initialize(*args); end

  def bucket_name; end
  def client; end
  def data; end
  def data_loaded?; end
  def deprecated_identifiers; end
  def grants; end
  def identifiers(*args, &block); end
  def load; end
  def object; end
  def object_key; end
  def owner; end
  def put(options = T.unsafe(nil)); end
  def reload; end
  def request_charged; end
  def wait_until(options = T.unsafe(nil), &block); end

  private

  def extract_bucket_name(args, options); end
  def extract_object_key(args, options); end
end

class Aws::S3::ObjectAcl::Collection < ::Aws::Resources::Collection; end

class Aws::S3::ObjectCopier
  def initialize(object, options = T.unsafe(nil)); end

  def copy_from(source, options = T.unsafe(nil)); end
  def copy_to(target, options = T.unsafe(nil)); end

  private

  def apply_source_client(source, options); end
  def copy_object(source, target, options); end
  def copy_source(source); end
  def copy_target(target); end
  def escape(str); end
  def merge_options(source_or_target, options); end
end

class Aws::S3::ObjectMultipartCopier
  def initialize(options = T.unsafe(nil)); end

  def client; end
  def copy(options = T.unsafe(nil)); end

  private

  def abort_upload(options); end
  def byte_range(offset, default_part_size, size); end
  def complete_upload(parts, options); end
  def compute_parts(size, default_part_size, options); end
  def copy_part(part); end
  def copy_part_thread(queue); end
  def copy_parts(size, default_part_size, options); end
  def default_part_size(source_size); end
  def initiate_upload(options); end
  def options_for(operation_name, options); end
  def source_size(options); end

  class << self
    def options_for(shape_name); end
  end
end

Aws::S3::ObjectMultipartCopier::API_OPTIONS = T.let(T.unsafe(nil), Hash)
Aws::S3::ObjectMultipartCopier::FILE_TOO_SMALL = T.let(T.unsafe(nil), String)
Aws::S3::ObjectMultipartCopier::FIVE_MB = T.let(T.unsafe(nil), Integer)
Aws::S3::ObjectMultipartCopier::MAX_PARTS = T.let(T.unsafe(nil), Integer)

class Aws::S3::ObjectMultipartCopier::PartQueue
  def initialize(parts = T.unsafe(nil)); end

  def clear!; end
  def shift; end
end

class Aws::S3::ObjectSummary
  extend ::Aws::Deprecations

  def initialize(*args); end

  def acl; end
  def bucket; end
  def bucket_name; end
  def client; end
  def content_length; end
  def copy_from(source, options = T.unsafe(nil)); end
  def copy_to(target, options = T.unsafe(nil)); end
  def data; end
  def data_loaded?; end
  def delete(options = T.unsafe(nil)); end
  def deprecated_identifiers; end
  def download_file(destination, options = T.unsafe(nil)); end
  def etag; end
  def exists?(options = T.unsafe(nil)); end
  def get(options = T.unsafe(nil), &block); end
  def identifiers(*args, &block); end
  def initiate_multipart_upload(options = T.unsafe(nil)); end
  def key; end
  def last_modified; end
  def load; end
  def move_to(target, options = T.unsafe(nil)); end
  def multipart_upload(id); end
  def object; end
  def owner; end
  def presigned_post(options = T.unsafe(nil)); end
  def presigned_url(http_method, params = T.unsafe(nil)); end
  def public_url(options = T.unsafe(nil)); end
  def put(options = T.unsafe(nil)); end
  def reload; end
  def restore_object(options = T.unsafe(nil)); end
  def size; end
  def storage_class; end
  def upload_file(source, options = T.unsafe(nil)); end
  def upload_stream(options = T.unsafe(nil), &block); end
  def version(id); end
  def wait_until(options = T.unsafe(nil), &block); end
  def wait_until_exists(options = T.unsafe(nil), &block); end
  def wait_until_not_exists(options = T.unsafe(nil), &block); end

  private

  def extract_bucket_name(args, options); end
  def extract_key(args, options); end
  def separate_params_and_options(options); end
  def yield_waiter_and_warn(waiter, &block); end
end

class Aws::S3::ObjectSummary::Collection < ::Aws::Resources::Collection
  def batch_delete!(options = T.unsafe(nil)); end
  def delete(*args, &block); end
  def deprecated_delete(options = T.unsafe(nil)); end
end

class Aws::S3::ObjectVersion
  extend ::Aws::Deprecations

  def initialize(*args); end

  def bucket_name; end
  def client; end
  def data; end
  def data_loaded?; end
  def delete(options = T.unsafe(nil)); end
  def deprecated_identifiers; end
  def etag; end
  def get(options = T.unsafe(nil), &block); end
  def head(options = T.unsafe(nil)); end
  def id; end
  def identifiers(*args, &block); end
  def is_latest; end
  def key; end
  def last_modified; end
  def load; end
  def object; end
  def object_key; end
  def owner; end
  def reload; end
  def size; end
  def storage_class; end
  def version_id; end
  def wait_until(options = T.unsafe(nil), &block); end

  private

  def extract_bucket_name(args, options); end
  def extract_id(args, options); end
  def extract_object_key(args, options); end
end

class Aws::S3::ObjectVersion::Collection < ::Aws::Resources::Collection
  def batch_delete!(options = T.unsafe(nil)); end
  def delete(*args, &block); end
  def deprecated_delete(options = T.unsafe(nil)); end
end

class Aws::S3::OutpostAccessPointARN < ::Aws::ARN
  def initialize(options); end

  def access_point_name; end
  def host_url(region, _dualstack = T.unsafe(nil), custom_endpoint = T.unsafe(nil)); end
  def outpost_id; end
  def support_dualstack?; end
  def support_fips?; end
  def validate_arn!; end
end

module Aws::S3::Plugins; end

class Aws::S3::Plugins::ARN < ::Seahorse::Client::Plugin
  def add_handlers(handlers, _config); end

  class << self
    def resolve_arn!(member_value, region, use_arn_region); end
    def resolve_url!(url, arn, region, dualstack = T.unsafe(nil), has_custom_endpoint = T.unsafe(nil)); end

    private

    def resolve_s3_use_arn_region(cfg); end
    def url_path(path, arn); end
    def validate_region_config!(arn, region, use_arn_region); end
  end
end

class Aws::S3::Plugins::ARN::ARNHandler < ::Seahorse::Client::Handler
  def call(context); end

  private

  def _bucket_member(input); end
  def extract_dualstack_config!(context); end
  def validate_config!(context, arn); end
end

class Aws::S3::Plugins::ARN::UrlHandler < ::Seahorse::Client::Handler
  def call(context); end
end

class Aws::S3::Plugins::Accelerate < ::Seahorse::Client::Plugin
  def add_handlers(handlers, config); end
end

class Aws::S3::Plugins::Accelerate::AccelerateHandler < ::Seahorse::Client::Handler
  def call(context); end

  private

  def use_accelerate_endpoint(context, dualstack); end
  def validate_bucket_name!(bucket_name); end
end

class Aws::S3::Plugins::Accelerate::OptionHandler < ::Seahorse::Client::Handler
  def call(context); end
end

class Aws::S3::Plugins::BucketDns < ::Seahorse::Client::Plugin
  def add_handlers(handlers, config); end

  class << self
    def dns_compatible?(bucket_name, ssl); end
    def valid_subdomain?(bucket_name); end
  end
end

class Aws::S3::Plugins::BucketDns::Handler < ::Seahorse::Client::Handler
  def call(context); end

  private

  def https?(uri); end
  def move_bucket_to_subdomain(bucket_name, endpoint); end
  def move_dns_compat_bucket_to_subdomain(context); end
end

class Aws::S3::Plugins::BucketNameRestrictions < ::Seahorse::Client::Plugin; end

class Aws::S3::Plugins::BucketNameRestrictions::Handler < ::Seahorse::Client::Handler
  def call(context); end

  private

  def _bucket_member(input); end
end

class Aws::S3::Plugins::Dualstack < ::Seahorse::Client::Plugin
  def add_handlers(handlers, config); end
end

class Aws::S3::Plugins::Dualstack::DualstackHandler < ::Seahorse::Client::Handler
  def call(context); end

  private

  def apply_dualstack_endpoint(context); end
  def use_bucket_dns?(bucket_name, context); end
  def use_dualstack_endpoint?(context); end
end

class Aws::S3::Plugins::Dualstack::OptionHandler < ::Seahorse::Client::Handler
  def call(context); end
end

class Aws::S3::Plugins::Expect100Continue < ::Seahorse::Client::Plugin
  def add_handlers(handlers, config); end
end

class Aws::S3::Plugins::Expect100Continue::Handler < ::Seahorse::Client::Handler
  def call(context); end
end

class Aws::S3::Plugins::GetBucketLocationFix < ::Seahorse::Client::Plugin; end

class Aws::S3::Plugins::GetBucketLocationFix::Handler < ::Seahorse::Client::Handler
  def call(context); end
end

class Aws::S3::Plugins::Http200Errors < ::Seahorse::Client::Plugin; end

class Aws::S3::Plugins::Http200Errors::Handler < ::Seahorse::Client::Handler
  def call(context); end
  def check_for_error(context); end
end

class Aws::S3::Plugins::IADRegionalEndpoint < ::Seahorse::Client::Plugin
  def add_handlers(handlers, config); end

  class << self
    def legacy_host(host); end
    def resolve_iad_regional_endpoint(cfg); end
  end
end

class Aws::S3::Plugins::IADRegionalEndpoint::Handler < ::Seahorse::Client::Handler
  def call(context); end
end

class Aws::S3::Plugins::LocationConstraint < ::Seahorse::Client::Plugin; end

class Aws::S3::Plugins::LocationConstraint::Handler < ::Seahorse::Client::Handler
  def call(context); end

  private

  def populate_location_constraint(params, region); end
end

class Aws::S3::Plugins::Md5s < ::Seahorse::Client::Plugin
  def add_handlers(handlers, config); end
end

class Aws::S3::Plugins::Md5s::Handler < ::Seahorse::Client::Handler
  def call(context); end

  private

  def md5(value); end
  def update_in_chunks(digest, io); end
end

Aws::S3::Plugins::Md5s::Handler::CHUNK_SIZE = T.let(T.unsafe(nil), Integer)
Aws::S3::Plugins::Md5s::OPTIONAL_OPERATIONS = T.let(T.unsafe(nil), Array)

class Aws::S3::Plugins::Redirects < ::Seahorse::Client::Plugin
  def add_handlers(handlers, config); end
end

class Aws::S3::Plugins::Redirects::Handler < ::Seahorse::Client::Handler
  def call(context); end
end

class Aws::S3::Plugins::RetryableBlockIO
  extend ::Forwardable

  def initialize(block_io); end

  def read(*args, &block); end
  def rewind; end
  def size(*args, &block); end
  def truncate(_integer); end
  def write(*args, &block); end
end

class Aws::S3::Plugins::RetryableManagedFile
  extend ::Forwardable

  def initialize(managed_file); end

  def close(*args, &block); end
  def open?(*args, &block); end
  def read(*args, &block); end
  def rewind; end
  def size(*args, &block); end
  def truncate(_integer); end
  def write(*args, &block); end
end

class Aws::S3::Plugins::S3HostId < ::Seahorse::Client::Plugin; end

class Aws::S3::Plugins::S3HostId::Handler < ::Seahorse::Client::Handler
  def call(context); end
end

class Aws::S3::Plugins::S3Signer < ::Seahorse::Client::Plugin
  def add_handlers(handlers, cfg); end
  def add_legacy_handler(handlers); end
  def add_v4_handlers(handlers); end

  class << self
    def build_v4_signer(options = T.unsafe(nil)); end
    def new_hostname(context, region); end
  end
end

class Aws::S3::Plugins::S3Signer::BucketRegionErrorHandler < ::Seahorse::Client::Handler
  def call(context); end

  private

  def custom_endpoint?(resp); end
  def fips_region?(resp); end
  def get_region_and_retry(context); end
  def handle_region_errors(response); end
  def log_warning(context, actual_region); end
  def region_from_body(body); end
  def resign_with_new_region(context, actual_region); end
  def update_bucket_cache(context, actual_region); end
  def wrong_sigv4_region?(resp); end
end

class Aws::S3::Plugins::S3Signer::CachedBucketRegionHandler < ::Seahorse::Client::Handler
  def call(context); end

  private

  def check_for_cached_region(context, bucket); end
end

class Aws::S3::Plugins::S3Signer::LegacyHandler < ::Seahorse::Client::Handler
  def call(context); end
end

class Aws::S3::Plugins::S3Signer::V4Handler < ::Seahorse::Client::Handler
  def call(context); end

  private

  def sigv4_signer(context); end
end

class Aws::S3::Plugins::SseCpk < ::Seahorse::Client::Plugin; end

class Aws::S3::Plugins::SseCpk::Handler < ::Seahorse::Client::Handler
  def call(context); end

  private

  def base64(str); end
  def compute_key_md5(context); end
  def md5(str); end
  def require_https(context); end
end

class Aws::S3::Plugins::StreamingRetry < ::Seahorse::Client::Plugin; end

class Aws::S3::Plugins::StreamingRetry::Handler < ::Seahorse::Client::Handler
  def call(context); end

  private

  def add_event_listeners(context, target); end
  def retryable_body?(context); end
  def supported_target?(target); end
  def truncated_body?(error); end
end

class Aws::S3::Plugins::UrlEncodedKeys < ::Seahorse::Client::Plugin; end

class Aws::S3::Plugins::UrlEncodedKeys::Handler < ::Seahorse::Client::Handler
  def call(context); end

  private

  def decode(member, struct); end
  def decode_list_multipart_uploads_keys(data); end
  def decode_list_object_versions_keys(data); end
  def decode_list_objects_keys(data); end
  def manage_keys(context); end
end

class Aws::S3::PresignedPost
  def initialize(credentials, bucket_region, bucket_name, options = T.unsafe(nil)); end

  def acl(value); end
  def acl_starts_with(value); end
  def allow_any(*field_names); end
  def cache_control(value); end
  def cache_control_starts_with(value); end
  def content_disposition(value); end
  def content_disposition_starts_with(value); end
  def content_encoding(value); end
  def content_encoding_starts_with(value); end
  def content_length_range(byte_range); end
  def content_type(value); end
  def content_type_starts_with(value); end
  def expires(time); end
  def expires_starts_with(prefix); end
  def fields; end
  def key(key); end
  def key_starts_with(prefix); end
  def metadata(hash); end
  def metadata_starts_with(hash); end
  def server_side_encryption(value); end
  def server_side_encryption_aws_kms_key_id(value); end
  def server_side_encryption_customer_algorithm(value); end
  def server_side_encryption_customer_key(value); end
  def server_side_encryption_customer_key_starts_with(prefix); end
  def storage_class(value); end
  def success_action_redirect(value); end
  def success_action_redirect_starts_with(value); end
  def success_action_status(value); end
  def url; end
  def website_redirect_location(value); end

  private

  def base64(str); end
  def bucket_url; end
  def check_required_values!; end
  def credential_scope(datetime); end
  def hexhmac(key, value); end
  def hmac(key, value); end
  def policy(datetime); end
  def signature(datetime, string_to_sign); end
  def signature_fields(datetime); end
  def starts_with(field_name, value, &block); end
  def with(field_name, value); end

  class << self
    def define_field(field, *args); end
  end
end

class Aws::S3::Presigner
  def initialize(options = T.unsafe(nil)); end

  def presigned_request(method, params = T.unsafe(nil)); end
  def presigned_url(method, params = T.unsafe(nil)); end

  private

  def _presigned_request(method, params, hoist = T.unsafe(nil)); end
  def expires_in(params); end
  def http_scheme(params); end
  def sign_but_dont_send(req, expires_in, scheme, time, unsigned_headers, hoist = T.unsafe(nil)); end
  def unsigned_headers(params); end
  def use_bucket_as_hostname(req); end
end

Aws::S3::Presigner::BLACKLISTED_HEADERS = T.let(T.unsafe(nil), Array)
Aws::S3::Presigner::FIFTEEN_MINUTES = T.let(T.unsafe(nil), Integer)
Aws::S3::Presigner::ONE_WEEK = T.let(T.unsafe(nil), Integer)
Aws::S3::REQUIRED_PARAMS = T.let(T.unsafe(nil), Array)

class Aws::S3::Resource
  def initialize(options = T.unsafe(nil)); end

  def bucket(name); end
  def buckets(options = T.unsafe(nil)); end
  def client; end
  def create_bucket(options = T.unsafe(nil)); end
end

Aws::S3::SUPPORTED_SECURITY_PROFILES = T.let(T.unsafe(nil), Array)
module Aws::S3::Types; end

class Aws::S3::Types::AbortIncompleteMultipartUpload < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::AbortIncompleteMultipartUpload::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::AbortMultipartUploadOutput < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::AbortMultipartUploadOutput::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::AbortMultipartUploadRequest < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::AbortMultipartUploadRequest::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::AccelerateConfiguration < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::AccelerateConfiguration::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::AccessControlPolicy < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::AccessControlPolicy::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::AccessControlTranslation < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::AccessControlTranslation::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::AnalyticsAndOperator < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::AnalyticsAndOperator::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::AnalyticsConfiguration < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::AnalyticsConfiguration::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::AnalyticsExportDestination < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::AnalyticsExportDestination::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::AnalyticsFilter < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::AnalyticsFilter::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::AnalyticsS3BucketDestination < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::AnalyticsS3BucketDestination::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::Bucket < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::Bucket::SENSITIVE = T.let(T.unsafe(nil), Array)
class Aws::S3::Types::BucketAlreadyExists < ::Aws::EmptyStructure; end
class Aws::S3::Types::BucketAlreadyOwnedByYou < ::Aws::EmptyStructure; end

class Aws::S3::Types::BucketLifecycleConfiguration < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::BucketLifecycleConfiguration::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::BucketLoggingStatus < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::BucketLoggingStatus::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::CORSConfiguration < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::CORSConfiguration::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::CORSRule < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::CORSRule::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::CSVInput < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::CSVInput::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::CSVOutput < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::CSVOutput::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::CloudFunctionConfiguration < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::CloudFunctionConfiguration::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::CommonPrefix < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::CommonPrefix::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::CompleteMultipartUploadOutput < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::CompleteMultipartUploadOutput::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::CompleteMultipartUploadRequest < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::CompleteMultipartUploadRequest::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::CompletedMultipartUpload < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::CompletedMultipartUpload::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::CompletedPart < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::CompletedPart::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::Condition < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::Condition::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::ContinuationEvent < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::ContinuationEvent::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::CopyObjectOutput < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::CopyObjectOutput::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::CopyObjectRequest < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::CopyObjectRequest::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::CopyObjectResult < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::CopyObjectResult::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::CopyPartResult < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::CopyPartResult::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::CreateBucketConfiguration < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::CreateBucketConfiguration::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::CreateBucketOutput < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::CreateBucketOutput::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::CreateBucketRequest < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::CreateBucketRequest::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::CreateMultipartUploadOutput < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::CreateMultipartUploadOutput::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::CreateMultipartUploadRequest < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::CreateMultipartUploadRequest::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::DefaultRetention < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::DefaultRetention::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::Delete < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::Delete::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::DeleteBucketAnalyticsConfigurationRequest < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::DeleteBucketAnalyticsConfigurationRequest::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::DeleteBucketCorsRequest < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::DeleteBucketCorsRequest::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::DeleteBucketEncryptionRequest < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::DeleteBucketEncryptionRequest::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::DeleteBucketIntelligentTieringConfigurationRequest < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::DeleteBucketIntelligentTieringConfigurationRequest::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::DeleteBucketInventoryConfigurationRequest < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::DeleteBucketInventoryConfigurationRequest::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::DeleteBucketLifecycleRequest < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::DeleteBucketLifecycleRequest::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::DeleteBucketMetricsConfigurationRequest < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::DeleteBucketMetricsConfigurationRequest::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::DeleteBucketOwnershipControlsRequest < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::DeleteBucketOwnershipControlsRequest::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::DeleteBucketPolicyRequest < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::DeleteBucketPolicyRequest::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::DeleteBucketReplicationRequest < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::DeleteBucketReplicationRequest::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::DeleteBucketRequest < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::DeleteBucketRequest::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::DeleteBucketTaggingRequest < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::DeleteBucketTaggingRequest::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::DeleteBucketWebsiteRequest < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::DeleteBucketWebsiteRequest::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::DeleteMarkerEntry < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::DeleteMarkerEntry::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::DeleteMarkerReplication < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::DeleteMarkerReplication::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::DeleteObjectOutput < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::DeleteObjectOutput::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::DeleteObjectRequest < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::DeleteObjectRequest::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::DeleteObjectTaggingOutput < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::DeleteObjectTaggingOutput::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::DeleteObjectTaggingRequest < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::DeleteObjectTaggingRequest::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::DeleteObjectsOutput < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::DeleteObjectsOutput::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::DeleteObjectsRequest < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::DeleteObjectsRequest::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::DeletePublicAccessBlockRequest < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::DeletePublicAccessBlockRequest::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::DeletedObject < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::DeletedObject::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::Destination < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::Destination::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::Encryption < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::Encryption::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::EncryptionConfiguration < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::EncryptionConfiguration::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::EndEvent < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::EndEvent::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::Error < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::Error::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::ErrorDocument < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::ErrorDocument::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::ExistingObjectReplication < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::ExistingObjectReplication::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::FilterRule < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::FilterRule::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::GetBucketAccelerateConfigurationOutput < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::GetBucketAccelerateConfigurationOutput::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::GetBucketAccelerateConfigurationRequest < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::GetBucketAccelerateConfigurationRequest::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::GetBucketAclOutput < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::GetBucketAclOutput::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::GetBucketAclRequest < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::GetBucketAclRequest::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::GetBucketAnalyticsConfigurationOutput < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::GetBucketAnalyticsConfigurationOutput::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::GetBucketAnalyticsConfigurationRequest < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::GetBucketAnalyticsConfigurationRequest::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::GetBucketCorsOutput < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::GetBucketCorsOutput::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::GetBucketCorsRequest < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::GetBucketCorsRequest::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::GetBucketEncryptionOutput < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::GetBucketEncryptionOutput::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::GetBucketEncryptionRequest < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::GetBucketEncryptionRequest::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::GetBucketIntelligentTieringConfigurationOutput < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::GetBucketIntelligentTieringConfigurationOutput::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::GetBucketIntelligentTieringConfigurationRequest < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::GetBucketIntelligentTieringConfigurationRequest::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::GetBucketInventoryConfigurationOutput < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::GetBucketInventoryConfigurationOutput::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::GetBucketInventoryConfigurationRequest < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::GetBucketInventoryConfigurationRequest::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::GetBucketLifecycleConfigurationOutput < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::GetBucketLifecycleConfigurationOutput::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::GetBucketLifecycleConfigurationRequest < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::GetBucketLifecycleConfigurationRequest::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::GetBucketLifecycleOutput < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::GetBucketLifecycleOutput::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::GetBucketLifecycleRequest < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::GetBucketLifecycleRequest::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::GetBucketLocationOutput < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::GetBucketLocationOutput::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::GetBucketLocationRequest < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::GetBucketLocationRequest::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::GetBucketLoggingOutput < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::GetBucketLoggingOutput::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::GetBucketLoggingRequest < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::GetBucketLoggingRequest::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::GetBucketMetricsConfigurationOutput < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::GetBucketMetricsConfigurationOutput::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::GetBucketMetricsConfigurationRequest < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::GetBucketMetricsConfigurationRequest::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::GetBucketNotificationConfigurationRequest < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::GetBucketNotificationConfigurationRequest::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::GetBucketOwnershipControlsOutput < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::GetBucketOwnershipControlsOutput::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::GetBucketOwnershipControlsRequest < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::GetBucketOwnershipControlsRequest::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::GetBucketPolicyOutput < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::GetBucketPolicyOutput::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::GetBucketPolicyRequest < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::GetBucketPolicyRequest::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::GetBucketPolicyStatusOutput < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::GetBucketPolicyStatusOutput::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::GetBucketPolicyStatusRequest < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::GetBucketPolicyStatusRequest::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::GetBucketReplicationOutput < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::GetBucketReplicationOutput::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::GetBucketReplicationRequest < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::GetBucketReplicationRequest::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::GetBucketRequestPaymentOutput < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::GetBucketRequestPaymentOutput::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::GetBucketRequestPaymentRequest < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::GetBucketRequestPaymentRequest::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::GetBucketTaggingOutput < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::GetBucketTaggingOutput::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::GetBucketTaggingRequest < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::GetBucketTaggingRequest::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::GetBucketVersioningOutput < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::GetBucketVersioningOutput::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::GetBucketVersioningRequest < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::GetBucketVersioningRequest::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::GetBucketWebsiteOutput < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::GetBucketWebsiteOutput::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::GetBucketWebsiteRequest < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::GetBucketWebsiteRequest::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::GetObjectAclOutput < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::GetObjectAclOutput::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::GetObjectAclRequest < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::GetObjectAclRequest::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::GetObjectLegalHoldOutput < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::GetObjectLegalHoldOutput::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::GetObjectLegalHoldRequest < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::GetObjectLegalHoldRequest::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::GetObjectLockConfigurationOutput < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::GetObjectLockConfigurationOutput::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::GetObjectLockConfigurationRequest < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::GetObjectLockConfigurationRequest::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::GetObjectOutput < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::GetObjectOutput::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::GetObjectRequest < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::GetObjectRequest::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::GetObjectRetentionOutput < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::GetObjectRetentionOutput::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::GetObjectRetentionRequest < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::GetObjectRetentionRequest::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::GetObjectTaggingOutput < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::GetObjectTaggingOutput::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::GetObjectTaggingRequest < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::GetObjectTaggingRequest::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::GetObjectTorrentOutput < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::GetObjectTorrentOutput::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::GetObjectTorrentRequest < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::GetObjectTorrentRequest::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::GetPublicAccessBlockOutput < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::GetPublicAccessBlockOutput::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::GetPublicAccessBlockRequest < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::GetPublicAccessBlockRequest::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::GlacierJobParameters < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::GlacierJobParameters::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::Grant < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::Grant::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::Grantee < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::Grantee::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::HeadBucketRequest < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::HeadBucketRequest::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::HeadObjectOutput < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::HeadObjectOutput::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::HeadObjectRequest < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::HeadObjectRequest::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::IndexDocument < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::IndexDocument::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::Initiator < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::Initiator::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::InputSerialization < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::InputSerialization::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::IntelligentTieringAndOperator < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::IntelligentTieringAndOperator::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::IntelligentTieringConfiguration < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::IntelligentTieringConfiguration::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::IntelligentTieringFilter < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::IntelligentTieringFilter::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::InvalidObjectState < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::InvalidObjectState::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::InventoryConfiguration < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::InventoryConfiguration::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::InventoryDestination < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::InventoryDestination::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::InventoryEncryption < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::InventoryEncryption::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::InventoryFilter < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::InventoryFilter::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::InventoryS3BucketDestination < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::InventoryS3BucketDestination::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::InventorySchedule < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::InventorySchedule::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::JSONInput < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::JSONInput::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::JSONOutput < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::JSONOutput::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::LambdaFunctionConfiguration < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::LambdaFunctionConfiguration::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::LifecycleConfiguration < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::LifecycleConfiguration::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::LifecycleExpiration < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::LifecycleExpiration::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::LifecycleRule < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::LifecycleRule::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::LifecycleRuleAndOperator < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::LifecycleRuleAndOperator::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::LifecycleRuleFilter < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::LifecycleRuleFilter::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::ListBucketAnalyticsConfigurationsOutput < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::ListBucketAnalyticsConfigurationsOutput::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::ListBucketAnalyticsConfigurationsRequest < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::ListBucketAnalyticsConfigurationsRequest::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::ListBucketIntelligentTieringConfigurationsOutput < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::ListBucketIntelligentTieringConfigurationsOutput::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::ListBucketIntelligentTieringConfigurationsRequest < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::ListBucketIntelligentTieringConfigurationsRequest::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::ListBucketInventoryConfigurationsOutput < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::ListBucketInventoryConfigurationsOutput::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::ListBucketInventoryConfigurationsRequest < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::ListBucketInventoryConfigurationsRequest::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::ListBucketMetricsConfigurationsOutput < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::ListBucketMetricsConfigurationsOutput::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::ListBucketMetricsConfigurationsRequest < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::ListBucketMetricsConfigurationsRequest::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::ListBucketsOutput < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::ListBucketsOutput::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::ListMultipartUploadsOutput < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::ListMultipartUploadsOutput::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::ListMultipartUploadsRequest < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::ListMultipartUploadsRequest::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::ListObjectVersionsOutput < ::Struct
  include ::Aws::Structure

  def versions_delete_markers; end
end

Aws::S3::Types::ListObjectVersionsOutput::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::ListObjectVersionsRequest < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::ListObjectVersionsRequest::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::ListObjectsOutput < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::ListObjectsOutput::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::ListObjectsRequest < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::ListObjectsRequest::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::ListObjectsV2Output < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::ListObjectsV2Output::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::ListObjectsV2Request < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::ListObjectsV2Request::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::ListPartsOutput < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::ListPartsOutput::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::ListPartsRequest < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::ListPartsRequest::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::LoggingEnabled < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::LoggingEnabled::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::MetadataEntry < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::MetadataEntry::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::Metrics < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::Metrics::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::MetricsAndOperator < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::MetricsAndOperator::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::MetricsConfiguration < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::MetricsConfiguration::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::MetricsFilter < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::MetricsFilter::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::MultipartUpload < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::MultipartUpload::SENSITIVE = T.let(T.unsafe(nil), Array)
class Aws::S3::Types::NoSuchBucket < ::Aws::EmptyStructure; end
class Aws::S3::Types::NoSuchKey < ::Aws::EmptyStructure; end
class Aws::S3::Types::NoSuchUpload < ::Aws::EmptyStructure; end

class Aws::S3::Types::NoncurrentVersionExpiration < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::NoncurrentVersionExpiration::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::NoncurrentVersionTransition < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::NoncurrentVersionTransition::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::NotificationConfiguration < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::NotificationConfiguration::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::NotificationConfigurationDeprecated < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::NotificationConfigurationDeprecated::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::NotificationConfigurationFilter < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::NotificationConfigurationFilter::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::Object < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::Object::SENSITIVE = T.let(T.unsafe(nil), Array)
class Aws::S3::Types::ObjectAlreadyInActiveTierError < ::Aws::EmptyStructure; end

class Aws::S3::Types::ObjectIdentifier < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::ObjectIdentifier::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::ObjectLockConfiguration < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::ObjectLockConfiguration::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::ObjectLockLegalHold < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::ObjectLockLegalHold::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::ObjectLockRetention < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::ObjectLockRetention::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::ObjectLockRule < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::ObjectLockRule::SENSITIVE = T.let(T.unsafe(nil), Array)
class Aws::S3::Types::ObjectNotInActiveTierError < ::Aws::EmptyStructure; end

class Aws::S3::Types::ObjectVersion < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::ObjectVersion::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::OutputLocation < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::OutputLocation::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::OutputSerialization < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::OutputSerialization::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::Owner < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::Owner::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::OwnershipControls < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::OwnershipControls::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::OwnershipControlsRule < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::OwnershipControlsRule::SENSITIVE = T.let(T.unsafe(nil), Array)
class Aws::S3::Types::ParquetInput < ::Aws::EmptyStructure; end

class Aws::S3::Types::Part < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::Part::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::PolicyStatus < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::PolicyStatus::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::Progress < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::Progress::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::ProgressEvent < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::ProgressEvent::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::PublicAccessBlockConfiguration < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::PublicAccessBlockConfiguration::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::PutBucketAccelerateConfigurationRequest < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::PutBucketAccelerateConfigurationRequest::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::PutBucketAclRequest < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::PutBucketAclRequest::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::PutBucketAnalyticsConfigurationRequest < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::PutBucketAnalyticsConfigurationRequest::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::PutBucketCorsRequest < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::PutBucketCorsRequest::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::PutBucketEncryptionRequest < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::PutBucketEncryptionRequest::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::PutBucketIntelligentTieringConfigurationRequest < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::PutBucketIntelligentTieringConfigurationRequest::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::PutBucketInventoryConfigurationRequest < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::PutBucketInventoryConfigurationRequest::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::PutBucketLifecycleConfigurationRequest < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::PutBucketLifecycleConfigurationRequest::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::PutBucketLifecycleRequest < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::PutBucketLifecycleRequest::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::PutBucketLoggingRequest < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::PutBucketLoggingRequest::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::PutBucketMetricsConfigurationRequest < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::PutBucketMetricsConfigurationRequest::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::PutBucketNotificationConfigurationRequest < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::PutBucketNotificationConfigurationRequest::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::PutBucketNotificationRequest < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::PutBucketNotificationRequest::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::PutBucketOwnershipControlsRequest < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::PutBucketOwnershipControlsRequest::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::PutBucketPolicyRequest < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::PutBucketPolicyRequest::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::PutBucketReplicationRequest < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::PutBucketReplicationRequest::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::PutBucketRequestPaymentRequest < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::PutBucketRequestPaymentRequest::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::PutBucketTaggingRequest < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::PutBucketTaggingRequest::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::PutBucketVersioningRequest < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::PutBucketVersioningRequest::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::PutBucketWebsiteRequest < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::PutBucketWebsiteRequest::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::PutObjectAclOutput < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::PutObjectAclOutput::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::PutObjectAclRequest < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::PutObjectAclRequest::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::PutObjectLegalHoldOutput < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::PutObjectLegalHoldOutput::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::PutObjectLegalHoldRequest < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::PutObjectLegalHoldRequest::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::PutObjectLockConfigurationOutput < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::PutObjectLockConfigurationOutput::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::PutObjectLockConfigurationRequest < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::PutObjectLockConfigurationRequest::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::PutObjectOutput < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::PutObjectOutput::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::PutObjectRequest < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::PutObjectRequest::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::PutObjectRetentionOutput < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::PutObjectRetentionOutput::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::PutObjectRetentionRequest < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::PutObjectRetentionRequest::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::PutObjectTaggingOutput < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::PutObjectTaggingOutput::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::PutObjectTaggingRequest < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::PutObjectTaggingRequest::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::PutPublicAccessBlockRequest < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::PutPublicAccessBlockRequest::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::QueueConfiguration < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::QueueConfiguration::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::QueueConfigurationDeprecated < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::QueueConfigurationDeprecated::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::RecordsEvent < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::RecordsEvent::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::Redirect < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::Redirect::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::RedirectAllRequestsTo < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::RedirectAllRequestsTo::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::ReplicaModifications < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::ReplicaModifications::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::ReplicationConfiguration < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::ReplicationConfiguration::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::ReplicationRule < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::ReplicationRule::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::ReplicationRuleAndOperator < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::ReplicationRuleAndOperator::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::ReplicationRuleFilter < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::ReplicationRuleFilter::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::ReplicationTime < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::ReplicationTime::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::ReplicationTimeValue < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::ReplicationTimeValue::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::RequestPaymentConfiguration < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::RequestPaymentConfiguration::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::RequestProgress < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::RequestProgress::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::RestoreObjectOutput < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::RestoreObjectOutput::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::RestoreObjectRequest < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::RestoreObjectRequest::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::RestoreRequest < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::RestoreRequest::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::RoutingRule < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::RoutingRule::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::Rule < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::Rule::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::S3KeyFilter < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::S3KeyFilter::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::S3Location < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::S3Location::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::SSEKMS < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::SSEKMS::SENSITIVE = T.let(T.unsafe(nil), Array)
class Aws::S3::Types::SSES3 < ::Aws::EmptyStructure; end

class Aws::S3::Types::ScanRange < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::ScanRange::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::SelectObjectContentEventStream < ::Enumerator
  def event_types; end
end

class Aws::S3::Types::SelectObjectContentOutput < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::SelectObjectContentOutput::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::SelectObjectContentRequest < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::SelectObjectContentRequest::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::SelectParameters < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::SelectParameters::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::ServerSideEncryptionByDefault < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::ServerSideEncryptionByDefault::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::ServerSideEncryptionConfiguration < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::ServerSideEncryptionConfiguration::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::ServerSideEncryptionRule < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::ServerSideEncryptionRule::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::SourceSelectionCriteria < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::SourceSelectionCriteria::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::SseKmsEncryptedObjects < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::SseKmsEncryptedObjects::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::Stats < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::Stats::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::StatsEvent < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::StatsEvent::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::StorageClassAnalysis < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::StorageClassAnalysis::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::StorageClassAnalysisDataExport < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::StorageClassAnalysisDataExport::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::Tag < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::Tag::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::Tagging < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::Tagging::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::TargetGrant < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::TargetGrant::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::Tiering < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::Tiering::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::TopicConfiguration < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::TopicConfiguration::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::TopicConfigurationDeprecated < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::TopicConfigurationDeprecated::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::Transition < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::Transition::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::UploadPartCopyOutput < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::UploadPartCopyOutput::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::UploadPartCopyRequest < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::UploadPartCopyRequest::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::UploadPartOutput < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::UploadPartOutput::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::UploadPartRequest < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::UploadPartRequest::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::VersioningConfiguration < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::VersioningConfiguration::SENSITIVE = T.let(T.unsafe(nil), Array)

class Aws::S3::Types::WebsiteConfiguration < ::Struct
  include ::Aws::Structure
end

Aws::S3::Types::WebsiteConfiguration::SENSITIVE = T.let(T.unsafe(nil), Array)
module Aws::S3::Waiters; end

class Aws::S3::Waiters::BucketExists
  def initialize(options); end

  def wait(params = T.unsafe(nil)); end
  def waiter; end
end

class Aws::S3::Waiters::BucketNotExists
  def initialize(options); end

  def wait(params = T.unsafe(nil)); end
  def waiter; end
end

class Aws::S3::Waiters::ObjectExists
  def initialize(options); end

  def wait(params = T.unsafe(nil)); end
  def waiter; end
end

class Aws::S3::Waiters::ObjectNotExists
  def initialize(options); end

  def wait(params = T.unsafe(nil)); end
  def waiter; end
end
