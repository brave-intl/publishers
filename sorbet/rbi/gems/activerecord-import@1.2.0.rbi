# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `activerecord-import` gem.
# Please instead update this file by running `bin/tapioca gem activerecord-import`.

module ActiveRecord
  extend ::ActiveSupport::Autoload

  class << self
    def eager_load!; end
    def gem_version; end
    def version; end
  end
end

class ActiveRecord::Associations::CollectionAssociation < ::ActiveRecord::Associations::Association
  def add_to_target(record, skip_callbacks: T.unsafe(nil), replace: T.unsafe(nil), &block); end
  def build(attributes = T.unsafe(nil), &block); end
  def bulk_import(*args, &block); end
  def concat(*records); end
  def delete(*records); end
  def delete_all(dependent = T.unsafe(nil)); end
  def destroy(*records); end
  def destroy_all; end
  def empty?; end
  def find(*args); end
  def find_from_target?; end
  def ids_reader; end
  def ids_writer(ids); end
  def import(*args, &block); end
  def include?(record); end
  def load_target; end
  def null_scope?; end
  def reader; end
  def replace(other_array); end
  def reset; end
  def scope; end
  def size; end
  def target=(record); end
  def transaction(*args); end
  def writer(records); end

  private

  def _create_record(attributes, raise = T.unsafe(nil), &block); end
  def callback(method, record); end
  def callbacks_for(callback_name); end
  def concat_records(records, raise = T.unsafe(nil)); end
  def delete_or_destroy(records, method); end
  def delete_records(records, method); end
  def find_by_scan(*args); end
  def include_in_memory?(record); end
  def insert_record(record, validate = T.unsafe(nil), raise = T.unsafe(nil), &block); end
  def merge_target_lists(persisted, memory); end
  def remove_records(existing_records, records, method); end
  def replace_common_records_in_memory(new_target, original_target); end
  def replace_on_target(record, index, skip_callbacks); end
  def replace_records(new_target, original_target); end
end

class ActiveRecord::Associations::CollectionProxy < ::ActiveRecord::Relation
  def initialize(klass, association, **_arg2); end

  def <<(*records); end
  def ==(other); end
  def _select!(*_arg0, &_arg1); end
  def and(*_arg0, &_arg1); end
  def and!(*_arg0, &_arg1); end
  def annotate(*_arg0, &_arg1); end
  def annotate!(*_arg0, &_arg1); end
  def annotate_values(*_arg0, &_arg1); end
  def annotate_values=(arg); end
  def append(*records); end
  def arel(*_arg0, &_arg1); end
  def build(attributes = T.unsafe(nil), &block); end
  def bulk_import(*args, &block); end
  def calculate(operation, column_name); end
  def clear; end
  def concat(*records); end
  def construct_join_dependency(*_arg0, &_arg1); end
  def create(attributes = T.unsafe(nil), &block); end
  def create!(attributes = T.unsafe(nil), &block); end
  def create_with(*_arg0, &_arg1); end
  def create_with!(*_arg0, &_arg1); end
  def create_with_value(*_arg0, &_arg1); end
  def create_with_value=(arg); end
  def delete(*records); end
  def delete_all(dependent = T.unsafe(nil)); end
  def destroy(*records); end
  def destroy_all; end
  def distinct(*_arg0, &_arg1); end
  def distinct!(*_arg0, &_arg1); end
  def distinct_value(*_arg0, &_arg1); end
  def distinct_value=(arg); end
  def eager_load(*_arg0, &_arg1); end
  def eager_load!(*_arg0, &_arg1); end
  def eager_load_values(*_arg0, &_arg1); end
  def eager_load_values=(arg); end
  def empty?; end
  def except(*_arg0, &_arg1); end
  def extending(*_arg0, &_arg1); end
  def extending!(*_arg0, &_arg1); end
  def extending_values(*_arg0, &_arg1); end
  def extending_values=(arg); end
  def extensions(*_arg0, &_arg1); end
  def extract_associated(*_arg0, &_arg1); end
  def find(*args); end
  def from(*_arg0, &_arg1); end
  def from!(*_arg0, &_arg1); end
  def from_clause(*_arg0, &_arg1); end
  def from_clause=(arg); end
  def group(*_arg0, &_arg1); end
  def group!(*_arg0, &_arg1); end
  def group_values(*_arg0, &_arg1); end
  def group_values=(arg); end
  def having(*_arg0, &_arg1); end
  def having!(*_arg0, &_arg1); end
  def having_clause(*_arg0, &_arg1); end
  def having_clause=(arg); end
  def import(*args, &block); end
  def include?(record); end
  def includes(*_arg0, &_arg1); end
  def includes!(*_arg0, &_arg1); end
  def includes_values(*_arg0, &_arg1); end
  def includes_values=(arg); end
  def insert(*_arg0, &_arg1); end
  def insert!(*_arg0, &_arg1); end
  def insert_all(*_arg0, &_arg1); end
  def insert_all!(*_arg0, &_arg1); end
  def inspect; end
  def joins(*_arg0, &_arg1); end
  def joins!(*_arg0, &_arg1); end
  def joins_values(*_arg0, &_arg1); end
  def joins_values=(arg); end
  def last(limit = T.unsafe(nil)); end
  def left_joins(*_arg0, &_arg1); end
  def left_outer_joins(*_arg0, &_arg1); end
  def left_outer_joins!(*_arg0, &_arg1); end
  def left_outer_joins_values(*_arg0, &_arg1); end
  def left_outer_joins_values=(arg); end
  def limit(*_arg0, &_arg1); end
  def limit!(*_arg0, &_arg1); end
  def limit_value(*_arg0, &_arg1); end
  def limit_value=(arg); end
  def load_target; end
  def loaded; end
  def loaded?; end
  def lock(*_arg0, &_arg1); end
  def lock!(*_arg0, &_arg1); end
  def lock_value(*_arg0, &_arg1); end
  def lock_value=(arg); end
  def merge(*_arg0, &_arg1); end
  def merge!(*_arg0, &_arg1); end
  def new(attributes = T.unsafe(nil), &block); end
  def none(*_arg0, &_arg1); end
  def none!(*_arg0, &_arg1); end
  def offset(*_arg0, &_arg1); end
  def offset!(*_arg0, &_arg1); end
  def offset_value(*_arg0, &_arg1); end
  def offset_value=(arg); end
  def only(*_arg0, &_arg1); end
  def optimizer_hints(*_arg0, &_arg1); end
  def optimizer_hints!(*_arg0, &_arg1); end
  def optimizer_hints_values(*_arg0, &_arg1); end
  def optimizer_hints_values=(arg); end
  def or(*_arg0, &_arg1); end
  def or!(*_arg0, &_arg1); end
  def order(*_arg0, &_arg1); end
  def order!(*_arg0, &_arg1); end
  def order_values(*_arg0, &_arg1); end
  def order_values=(arg); end
  def pluck(*column_names); end
  def preload(*_arg0, &_arg1); end
  def preload!(*_arg0, &_arg1); end
  def preload_values(*_arg0, &_arg1); end
  def preload_values=(arg); end
  def prepend(*args); end
  def proxy_association; end
  def push(*records); end
  def readonly(*_arg0, &_arg1); end
  def readonly!(*_arg0, &_arg1); end
  def readonly_value(*_arg0, &_arg1); end
  def readonly_value=(arg); end
  def records; end
  def references(*_arg0, &_arg1); end
  def references!(*_arg0, &_arg1); end
  def references_values(*_arg0, &_arg1); end
  def references_values=(arg); end
  def reload; end
  def reorder(*_arg0, &_arg1); end
  def reorder!(*_arg0, &_arg1); end
  def reordering_value(*_arg0, &_arg1); end
  def reordering_value=(arg); end
  def replace(other_array); end
  def reselect(*_arg0, &_arg1); end
  def reselect!(*_arg0, &_arg1); end
  def reset; end
  def reset_scope; end
  def reverse_order(*_arg0, &_arg1); end
  def reverse_order!(*_arg0, &_arg1); end
  def reverse_order_value(*_arg0, &_arg1); end
  def reverse_order_value=(arg); end
  def rewhere(*_arg0, &_arg1); end
  def scope; end
  def scoping(*_arg0, &_arg1); end
  def select_values(*_arg0, &_arg1); end
  def select_values=(arg); end
  def size; end
  def skip_preloading!(*_arg0, &_arg1); end
  def skip_query_cache!(*_arg0, &_arg1); end
  def skip_query_cache_value(*_arg0, &_arg1); end
  def skip_query_cache_value=(arg); end
  def spawn(*_arg0, &_arg1); end
  def strict_loading(*_arg0, &_arg1); end
  def strict_loading!(*_arg0, &_arg1); end
  def strict_loading_value(*_arg0, &_arg1); end
  def strict_loading_value=(arg); end
  def take(limit = T.unsafe(nil)); end
  def target; end
  def uniq!(*_arg0, &_arg1); end
  def unscope(*_arg0, &_arg1); end
  def unscope!(*_arg0, &_arg1); end
  def unscope_values(*_arg0, &_arg1); end
  def unscope_values=(arg); end
  def upsert(*_arg0, &_arg1); end
  def upsert_all(*_arg0, &_arg1); end
  def values(*_arg0, &_arg1); end
  def where(*_arg0, &_arg1); end
  def where!(*_arg0, &_arg1); end
  def where_clause(*_arg0, &_arg1); end
  def where_clause=(arg); end

  private

  def exec_queries; end
  def find_from_target?; end
  def find_nth_from_last(index); end
  def find_nth_with_limit(index, limit); end
  def null_scope?; end
end

class ActiveRecord::Base
  include ::ActiveRecord::Core
  include ::ActiveRecord::Persistence
  include ::ActiveRecord::ReadonlyAttributes
  include ::ActiveRecord::ModelSchema
  include ::ActiveRecord::Inheritance
  include ::ActiveRecord::Scoping
  include ::ActiveRecord::Scoping::Default
  include ::ActiveRecord::Scoping::Named
  include ::ActiveRecord::Sanitization
  include ::ActiveModel::ForbiddenAttributesProtection
  include ::ActiveModel::AttributeAssignment
  include ::ActiveRecord::AttributeAssignment
  include ::ActiveModel::Conversion
  include ::ActiveRecord::Integration
  include ::ActiveModel::Validations
  include ::ActiveSupport::Callbacks
  include ::ActiveModel::Validations::HelperMethods
  include ::ActiveRecord::Validations
  include ::ActiveRecord::CounterCache
  include ::ActiveRecord::Attributes
  include ::ActiveRecord::Locking::Optimistic
  include ::ActiveRecord::Locking::Pessimistic
  include ::ActiveModel::AttributeMethods
  include ::ActiveRecord::AttributeMethods
  include ::ActiveRecord::Base::GeneratedAttributeMethods
  include ::ActiveRecord::Base::GeneratedAssociationMethods
  include ::ActiveRecord::AttributeMethods::Read
  include ::ActiveRecord::AttributeMethods::Write
  include ::ActiveRecord::AttributeMethods::BeforeTypeCast
  include ::ActiveRecord::AttributeMethods::Query
  include ::ActiveRecord::AttributeMethods::PrimaryKey
  include ::ActiveRecord::AttributeMethods::TimeZoneConversion
  include ::ActiveModel::Dirty
  include ::ActiveRecord::AttributeMethods::Dirty
  include ::ActiveRecord::AttributeMethods::Serialization
  include ::ActiveRecord::Callbacks
  include ::ActiveModel::Validations::Callbacks
  include ::ActiveRecord::Timestamp
  include ::ActiveRecord::Associations
  include ::ActiveModel::SecurePassword
  include ::ActiveRecord::AutosaveAssociation
  include ::ActiveRecord::NestedAttributes
  include ::ActiveRecord::Transactions
  include ::ActiveRecord::TouchLater
  include ::ActiveRecord::NoTouching
  include ::ActiveRecord::Reflection
  include ::ActiveModel::Serialization
  include ::ActiveModel::Serializers::JSON
  include ::ActiveRecord::Serialization
  include ::ActiveRecord::Store
  include ::ActiveRecord::SecureToken
  include ::ActiveRecord::SignedId
  include ::ActiveRecord::Suppressor
  include ::AttrEncrypted::InstanceMethods
  include ::CanCan::ModelAdditions
  include ::PaperTrail::Model
  extend ::ActiveModel::Naming
  extend ::ActiveSupport::Benchmarkable
  extend ::ActiveSupport::DescendantsTracker
  extend ::ActiveRecord::ConnectionHandling
  extend ::ActiveRecord::QueryCache::ClassMethods
  extend ::ActiveRecord::Querying
  extend ::ActiveModel::Translation
  extend ::ActiveRecord::Translation
  extend ::ActiveRecord::DynamicMatchers
  extend ::ActiveRecord::DelegatedType
  extend ::ActiveRecord::Explain
  extend ::ActiveRecord::Enum
  extend ::ActiveRecord::Delegation::DelegateCache
  extend ::ActiveRecord::Aggregations::ClassMethods
  extend ::ActiveRecord::Core::ClassMethods
  extend ::ActiveRecord::Persistence::ClassMethods
  extend ::ActiveRecord::ReadonlyAttributes::ClassMethods
  extend ::ActiveRecord::ModelSchema::ClassMethods
  extend ::ActiveRecord::Inheritance::ClassMethods
  extend ::ActiveRecord::Scoping::ClassMethods
  extend ::ActiveRecord::Scoping::Default::ClassMethods
  extend ::ActiveRecord::Scoping::Named::ClassMethods
  extend ::ActiveRecord::Sanitization::ClassMethods
  extend ::ActiveModel::Conversion::ClassMethods
  extend ::ActiveRecord::Integration::ClassMethods
  extend ::ActiveModel::Validations::ClassMethods
  extend ::ActiveModel::Callbacks
  extend ::ActiveSupport::Callbacks::ClassMethods
  extend ::ActiveModel::Validations::HelperMethods
  extend ::ActiveRecord::Validations::ClassMethods
  extend ::ActiveRecord::CounterCache::ClassMethods
  extend ::ActiveRecord::Attributes::ClassMethods
  extend ::ActiveRecord::Locking::Optimistic::ClassMethods
  extend ::ActiveModel::AttributeMethods::ClassMethods
  extend ::ActiveRecord::AttributeMethods::ClassMethods
  extend ::ActiveRecord::AttributeMethods::Read::ClassMethods
  extend ::ActiveRecord::AttributeMethods::Write::ClassMethods
  extend ::ActiveRecord::AttributeMethods::PrimaryKey::ClassMethods
  extend ::ActiveRecord::AttributeMethods::TimeZoneConversion::ClassMethods
  extend ::ActiveRecord::AttributeMethods::Serialization::ClassMethods
  extend ::ActiveRecord::Callbacks::ClassMethods
  extend ::ActiveModel::Validations::Callbacks::ClassMethods
  extend ::ActiveRecord::Timestamp::ClassMethods
  extend ::ActiveRecord::Associations::ClassMethods
  extend ::ActiveModel::SecurePassword::ClassMethods
  extend ::ActiveRecord::AutosaveAssociation::ClassMethods
  extend ::ActiveRecord::NestedAttributes::ClassMethods
  extend ::ActiveRecord::Transactions::ClassMethods
  extend ::ActiveRecord::NoTouching::ClassMethods
  extend ::ActiveRecord::Reflection::ClassMethods
  extend ::ActiveRecord::Store::ClassMethods
  extend ::ActiveRecord::SecureToken::ClassMethods
  extend ::ActiveRecord::SignedId::ClassMethods
  extend ::ActiveRecord::Suppressor::ClassMethods
  extend ::AttrEncrypted
  extend ::AttrEncrypted::Adapters::ActiveRecord
  extend ::CanCan::ModelAdditions::ClassMethods
  extend ::OrmAdapter::ToAdapter
  extend ::PaperTrail::Model::ClassMethods
  extend ::ActiveRecord::Import::Connection

  def __callbacks; end
  def __callbacks?; end
  def _before_commit_callbacks; end
  def _commit_callbacks; end
  def _create_callbacks; end
  def _destroy_callbacks; end
  def _find_callbacks; end
  def _initialize_callbacks; end
  def _reflections; end
  def _reflections?; end
  def _rollback_callbacks; end
  def _run_before_commit_callbacks(&block); end
  def _run_commit_callbacks(&block); end
  def _run_create_callbacks(&block); end
  def _run_destroy_callbacks(&block); end
  def _run_find_callbacks(&block); end
  def _run_initialize_callbacks(&block); end
  def _run_rollback_callbacks(&block); end
  def _run_save_callbacks(&block); end
  def _run_touch_callbacks(&block); end
  def _run_update_callbacks(&block); end
  def _run_validate_callbacks(&block); end
  def _run_validation_callbacks(&block); end
  def _save_callbacks; end
  def _touch_callbacks; end
  def _update_callbacks; end
  def _validate_callbacks; end
  def _validation_callbacks; end
  def _validators; end
  def _validators?; end
  def aggregate_reflections; end
  def aggregate_reflections?; end
  def assign_attributes(*args); end
  def assign_attributes_without_attr_encrypted(new_attributes); end
  def attr_encrypted_options=(_arg0); end
  def attribute_aliases; end
  def attribute_aliases?; end
  def attribute_method_matchers; end
  def attribute_method_matchers?; end
  def attributes=(*args); end
  def attributes_without_attr_encrypted=(new_attributes); end
  def cache_timestamp_format; end
  def cache_timestamp_format?; end
  def cache_versioning; end
  def cache_versioning?; end
  def collection_cache_versioning; end
  def collection_cache_versioning?; end
  def column_for_attribute(*_arg0, &_arg1); end
  def default_connection_handler; end
  def default_connection_handler?; end
  def default_role; end
  def default_role?; end
  def default_scope_override; end
  def default_scopes; end
  def default_shard; end
  def default_shard?; end
  def default_timezone; end
  def defined_enums; end
  def defined_enums?; end
  def destroy_association_async_job; end
  def dump_schema_after_migration; end
  def dump_schemas; end
  def error_on_ignored_order; end
  def include_root_in_json; end
  def include_root_in_json?; end
  def index_nested_attribute_errors; end
  def legacy_connection_handling; end
  def lock_optimistically; end
  def lock_optimistically?; end
  def logger; end
  def model_name(*_arg0, &_arg1); end
  def nested_attributes_options; end
  def nested_attributes_options?; end
  def partial_writes; end
  def partial_writes?; end
  def pluralize_table_names; end
  def pluralize_table_names?; end
  def primary_key_prefix_type; end
  def record_timestamps; end
  def record_timestamps=(_arg0); end
  def record_timestamps?; end
  def reload(*args, &block); end
  def reload_without_attr_encrypted(options = T.unsafe(nil)); end
  def schema_format; end
  def signed_id_verifier_secret; end
  def skip_time_zone_conversion_for_attributes; end
  def skip_time_zone_conversion_for_attributes?; end
  def store_full_class_name; end
  def store_full_class_name?; end
  def store_full_sti_class; end
  def store_full_sti_class?; end
  def suppress_multiple_database_warning; end
  def synchronize(instances, key = T.unsafe(nil)); end
  def table_name_prefix; end
  def table_name_prefix?; end
  def table_name_suffix; end
  def table_name_suffix?; end
  def time_zone_aware_attributes; end
  def time_zone_aware_types; end
  def time_zone_aware_types?; end
  def timestamped_migrations; end
  def type_for_attribute(*_arg0, &_arg1); end
  def validation_context; end
  def verbose_query_logs; end
  def warn_on_records_fetched_greater_than; end

  private

  def perform_attribute_assignment(method, new_attributes, *args); end
  def validation_context=(_arg0); end

  class << self
    def __callbacks; end
    def __callbacks=(value); end
    def __callbacks?; end
    def _attr_readonly; end
    def _attr_readonly=(value); end
    def _attr_readonly?; end
    def _before_commit_callbacks; end
    def _before_commit_callbacks=(value); end
    def _commit_callbacks; end
    def _commit_callbacks=(value); end
    def _create_callbacks; end
    def _create_callbacks=(value); end
    def _destroy_callbacks; end
    def _destroy_callbacks=(value); end
    def _find_callbacks; end
    def _find_callbacks=(value); end
    def _initialize_callbacks; end
    def _initialize_callbacks=(value); end
    def _reflections; end
    def _reflections=(value); end
    def _reflections?; end
    def _rollback_callbacks; end
    def _rollback_callbacks=(value); end
    def _save_callbacks; end
    def _save_callbacks=(value); end
    def _touch_callbacks; end
    def _touch_callbacks=(value); end
    def _update_callbacks; end
    def _update_callbacks=(value); end
    def _validate_callbacks; end
    def _validate_callbacks=(value); end
    def _validation_callbacks; end
    def _validation_callbacks=(value); end
    def _validators; end
    def _validators=(value); end
    def _validators?; end
    def action_on_strict_loading_violation; end
    def action_on_strict_loading_violation=(val); end
    def after_create(*args, **options, &block); end
    def after_destroy(*args, **options, &block); end
    def after_find(*args, **options, &block); end
    def after_initialize(*args, **options, &block); end
    def after_save(*args, **options, &block); end
    def after_touch(*args, **options, &block); end
    def after_update(*args, **options, &block); end
    def aggregate_reflections; end
    def aggregate_reflections=(value); end
    def aggregate_reflections?; end
    def allow_unsafe_raw_sql; end
    def allow_unsafe_raw_sql=(value); end
    def around_create(*args, **options, &block); end
    def around_destroy(*args, **options, &block); end
    def around_save(*args, **options, &block); end
    def around_update(*args, **options, &block); end
    def attribute_aliases; end
    def attribute_aliases=(value); end
    def attribute_aliases?; end
    def attribute_method_matchers; end
    def attribute_method_matchers=(value); end
    def attribute_method_matchers?; end
    def attributes_to_define_after_schema_loads; end
    def attributes_to_define_after_schema_loads=(value); end
    def attributes_to_define_after_schema_loads?; end
    def before_create(*args, **options, &block); end
    def before_destroy(*args, **options, &block); end
    def before_save(*args, **options, &block); end
    def before_update(*args, **options, &block); end
    def belongs_to_required_by_default; end
    def belongs_to_required_by_default=(value); end
    def belongs_to_required_by_default?; end
    def bulk_import(*args); end
    def bulk_import!(*args); end
    def cache_timestamp_format; end
    def cache_timestamp_format=(value); end
    def cache_timestamp_format?; end
    def cache_versioning; end
    def cache_versioning=(value); end
    def cache_versioning?; end
    def collection_cache_versioning; end
    def collection_cache_versioning=(value); end
    def collection_cache_versioning?; end
    def configurations; end
    def configurations=(config); end
    def connected_to_stack; end
    def connection_class; end
    def connection_class=(b); end
    def connection_class?; end
    def connection_classes; end
    def connection_handler; end
    def connection_handler=(handler); end
    def connection_handlers; end
    def connection_handlers=(handlers); end
    def current_preventing_writes; end
    def current_role; end
    def current_shard; end
    def default_connection_handler; end
    def default_connection_handler=(value); end
    def default_connection_handler?; end
    def default_role; end
    def default_role=(value); end
    def default_role?; end
    def default_scope_override; end
    def default_scope_override=(value); end
    def default_scopes; end
    def default_scopes=(value); end
    def default_shard; end
    def default_shard=(value); end
    def default_shard?; end
    def default_timezone; end
    def default_timezone=(val); end
    def defined_enums; end
    def defined_enums=(value); end
    def defined_enums?; end
    def destroy_association_async_job; end
    def destroy_association_async_job=(value); end
    def dump_schema_after_migration; end
    def dump_schema_after_migration=(val); end
    def dump_schemas; end
    def dump_schemas=(val); end
    def error_on_ignored_order; end
    def error_on_ignored_order=(val); end
    def has_many_inversing; end
    def has_many_inversing=(val); end
    def immutable_strings_by_default; end
    def immutable_strings_by_default=(value); end
    def immutable_strings_by_default?; end
    def implicit_order_column; end
    def implicit_order_column=(value); end
    def implicit_order_column?; end
    def import(*args); end
    def import!(*args); end
    def import_helper(*args); end
    def import_with_validations(column_names, array_of_attributes, options = T.unsafe(nil)); end
    def import_without_validations_or_callbacks(column_names, array_of_attributes, options = T.unsafe(nil)); end
    def include_root_in_json; end
    def include_root_in_json=(value); end
    def include_root_in_json?; end
    def index_nested_attribute_errors; end
    def index_nested_attribute_errors=(val); end
    def internal_metadata_table_name; end
    def internal_metadata_table_name=(value); end
    def internal_metadata_table_name?; end
    def legacy_connection_handling; end
    def legacy_connection_handling=(val); end
    def local_stored_attributes; end
    def local_stored_attributes=(_arg0); end
    def lock_optimistically; end
    def lock_optimistically=(value); end
    def lock_optimistically?; end
    def logger; end
    def logger=(val); end
    def maintain_test_schema; end
    def maintain_test_schema=(val); end
    def method_missing_without_attr_encrypted(method, *arguments, &block); end
    def nested_attributes_options; end
    def nested_attributes_options=(value); end
    def nested_attributes_options?; end
    def nulldb_connection(config); end
    def partial_writes; end
    def partial_writes=(value); end
    def partial_writes?; end
    def pluralize_table_names; end
    def pluralize_table_names=(value); end
    def pluralize_table_names?; end
    def primary_key_prefix_type; end
    def primary_key_prefix_type=(val); end
    def queues; end
    def queues=(val); end
    def reading_role; end
    def reading_role=(val); end
    def record_timestamps; end
    def record_timestamps=(value); end
    def record_timestamps?; end
    def schema_format; end
    def schema_format=(val); end
    def schema_migrations_table_name; end
    def schema_migrations_table_name=(value); end
    def schema_migrations_table_name?; end
    def signed_id_verifier_secret; end
    def signed_id_verifier_secret=(val); end
    def skip_time_zone_conversion_for_attributes; end
    def skip_time_zone_conversion_for_attributes=(value); end
    def skip_time_zone_conversion_for_attributes?; end
    def store_full_class_name; end
    def store_full_class_name=(value); end
    def store_full_class_name?; end
    def store_full_sti_class; end
    def store_full_sti_class=(value); end
    def store_full_sti_class?; end
    def strict_loading_by_default; end
    def strict_loading_by_default=(value); end
    def strict_loading_by_default?; end
    def strict_loading_violation!(owner:, reflection:); end
    def supports_import?(*args); end
    def supports_on_duplicate_key_update?; end
    def supports_setting_primary_key_of_imported_objects?; end
    def suppress_multiple_database_warning; end
    def suppress_multiple_database_warning=(val); end
    def synchronize(instances, keys = T.unsafe(nil)); end
    def table_name_prefix; end
    def table_name_prefix=(value); end
    def table_name_prefix?; end
    def table_name_suffix; end
    def table_name_suffix=(value); end
    def table_name_suffix?; end
    def time_zone_aware_attributes; end
    def time_zone_aware_attributes=(val); end
    def time_zone_aware_types; end
    def time_zone_aware_types=(value); end
    def time_zone_aware_types?; end
    def timestamped_migrations; end
    def timestamped_migrations=(val); end
    def verbose_query_logs; end
    def verbose_query_logs=(val); end
    def warn_on_records_fetched_greater_than; end
    def warn_on_records_fetched_greater_than=(val); end
    def writing_role; end
    def writing_role=(val); end

    protected

    def method_missing(method, *args, &block); end

    private

    def add_special_rails_stamps(column_names, array_of_attributes, options); end
    def find_associated_objects_for_import(associated_objects_by_class, model); end
    def import_associations(models, options); end
    def load_association_ids(model); end
    def set_attributes_and_mark_clean(models, import_result, timestamps, options); end
    def validate_hash_import(hash, required_keys, allow_extra_keys); end
    def validations_array_for_column_names_and_attributes(column_names, array_of_attributes); end
    def values_sql_for_columns_and_attributes(columns, array_of_attributes); end
  end
end

module ActiveRecord::Base::GeneratedAssociationMethods; end
module ActiveRecord::Base::GeneratedAttributeMethods; end
ActiveRecord::Base::OrmAdapter = OrmAdapter::ActiveRecord

module ActiveRecord::ConnectionAdapters
  extend ::ActiveSupport::Autoload
end

class ActiveRecord::ConnectionAdapters::AbstractAdapter
  include ::ActiveSupport::Callbacks
  include ::ActiveRecord::Migration::JoinTable
  include ::ActiveRecord::ConnectionAdapters::SchemaStatements
  include ::ActiveRecord::ConnectionAdapters::DatabaseStatements
  include ::ActiveRecord::ConnectionAdapters::Quoting
  include ::ActiveRecord::ConnectionAdapters::DatabaseLimits
  include ::ActiveRecord::ConnectionAdapters::QueryCache
  include ::ActiveRecord::ConnectionAdapters::Savepoints
  include ::ActiveRecord::Import::AbstractAdapter::InstanceMethods
  extend ::ActiveSupport::Callbacks::ClassMethods
  extend ::ActiveSupport::DescendantsTracker

  def initialize(connection, logger = T.unsafe(nil), config = T.unsafe(nil)); end

  def __callbacks; end
  def __callbacks?; end
  def _checkin_callbacks; end
  def _checkout_callbacks; end
  def _run_checkin_callbacks(&block); end
  def _run_checkout_callbacks(&block); end
  def active?; end
  def adapter_name; end
  def advisory_locks_enabled?; end
  def build_insert_sql(insert); end
  def case_insensitive_comparison(attribute, value); end
  def case_sensitive_comparison(attribute, value); end
  def check_version; end
  def clear_cache!; end
  def close; end
  def connection_klass; end
  def create(*_arg0); end
  def database_version; end
  def default_index_type?(index); end
  def default_uniqueness_comparison(attribute, value); end
  def delete(*_arg0); end
  def disable_extension(name); end
  def disable_referential_integrity; end
  def discard!; end
  def disconnect!; end
  def enable_extension(name); end
  def exec_insert_all(*_arg0); end
  def expire; end
  def extensions; end
  def get_advisory_lock(lock_id); end
  def get_database_version; end
  def in_use?; end
  def index_algorithms; end
  def insert(*_arg0); end
  def lease; end
  def lock; end
  def logger; end
  def migration_context; end
  def migrations_paths; end
  def owner; end
  def pool; end
  def pool=(_arg0); end
  def prefetch_primary_key?(table_name = T.unsafe(nil)); end
  def prepared_statements; end
  def prepared_statements?; end
  def prepared_statements_disabled_cache; end
  def preventing_writes?; end
  def raw_connection; end
  def reconnect!; end
  def release_advisory_lock(lock_id); end
  def replica?; end
  def requires_reloading?; end
  def reset!; end
  def rollback_db_transaction(*_arg0); end
  def rollback_to_savepoint(*_arg0); end
  def schema_cache; end
  def schema_cache=(cache); end
  def schema_migration; end
  def seconds_idle; end
  def steal!; end
  def supports_advisory_locks?; end
  def supports_bulk_alter?; end
  def supports_check_constraints?; end
  def supports_comments?; end
  def supports_comments_in_create?; end
  def supports_common_table_expressions?; end
  def supports_datetime_with_precision?; end
  def supports_ddl_transactions?; end
  def supports_explain?; end
  def supports_expression_index?; end
  def supports_extensions?; end
  def supports_foreign_keys?; end
  def supports_foreign_tables?; end
  def supports_index_sort_order?; end
  def supports_indexes_in_create?; end
  def supports_insert_conflict_target?; end
  def supports_insert_on_duplicate_skip?; end
  def supports_insert_on_duplicate_update?; end
  def supports_insert_returning?; end
  def supports_json?; end
  def supports_lazy_transactions?; end
  def supports_materialized_views?; end
  def supports_optimizer_hints?; end
  def supports_partial_index?; end
  def supports_partitioned_indexes?; end
  def supports_savepoints?; end
  def supports_transaction_isolation?; end
  def supports_validate_constraints?; end
  def supports_views?; end
  def supports_virtual_columns?; end
  def throw_away!; end
  def truncate(*_arg0); end
  def truncate_tables(*_arg0); end
  def unprepared_statement; end
  def update(*_arg0); end
  def use_metadata_table?; end
  def valid_type?(type); end
  def verify!; end
  def visitor; end

  private

  def arel_visitor; end
  def build_result(columns:, rows:, column_types: T.unsafe(nil)); end
  def build_statement_pool; end
  def can_perform_case_insensitive_comparison_for?(column); end
  def collector; end
  def column_for(table_name, column_name); end
  def column_for_attribute(attribute); end
  def extract_limit(sql_type); end
  def extract_precision(sql_type); end
  def extract_scale(sql_type); end
  def initialize_type_map(m = T.unsafe(nil)); end
  def log(sql, name = T.unsafe(nil), binds = T.unsafe(nil), type_casted_binds = T.unsafe(nil), statement_name = T.unsafe(nil)); end
  def register_class_with_limit(mapping, key, klass); end
  def register_class_with_precision(mapping, key, klass); end
  def reload_type_map; end
  def translate_exception(exception, message:, sql:, binds:); end
  def translate_exception_class(e, sql, binds); end
  def type_map; end
  def without_prepared_statement?(binds); end

  class << self
    def __callbacks; end
    def __callbacks=(value); end
    def __callbacks?; end
    def _checkin_callbacks; end
    def _checkin_callbacks=(value); end
    def _checkout_callbacks; end
    def _checkout_callbacks=(value); end
    def build_read_query_regexp(*parts); end
    def database_exists?(config); end
    def quoted_column_names; end
    def quoted_table_names; end
    def type_cast_config_to_boolean(config); end
    def type_cast_config_to_integer(config); end
  end
end

ActiveRecord::ConnectionAdapters::AbstractAdapter::ADAPTER_NAME = T.let(T.unsafe(nil), String)
ActiveRecord::ConnectionAdapters::AbstractAdapter::COMMENT_REGEX = T.let(T.unsafe(nil), Regexp)
ActiveRecord::ConnectionAdapters::AbstractAdapter::SIMPLE_INT = T.let(T.unsafe(nil), Regexp)

class ActiveRecord::ConnectionAdapters::AddColumnDefinition < ::Struct
  def column; end
  def column=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

class ActiveRecord::ConnectionAdapters::ChangeColumnDefinition < ::Struct
  def column; end
  def column=(_); end
  def name; end
  def name=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

class ActiveRecord::ConnectionAdapters::CheckConstraintDefinition < ::Struct
  def export_name_on_schema_dump?; end
  def expression; end
  def expression=(_); end
  def name; end
  def options; end
  def options=(_); end
  def table_name; end
  def table_name=(_); end
  def validate?; end
  def validated?; end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

class ActiveRecord::ConnectionAdapters::ColumnDefinition < ::Struct
  def aliased_types(name, fallback); end
  def collation; end
  def collation=(value); end
  def comment; end
  def comment=(value); end
  def default; end
  def default=(value); end
  def limit; end
  def limit=(value); end
  def name; end
  def name=(_); end
  def null; end
  def null=(value); end
  def options; end
  def options=(_); end
  def precision; end
  def precision=(value); end
  def primary_key?; end
  def scale; end
  def scale=(value); end
  def sql_type; end
  def sql_type=(_); end
  def type; end
  def type=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

class ActiveRecord::ConnectionAdapters::CreateIndexDefinition < ::Struct
  def algorithm; end
  def algorithm=(_); end
  def if_not_exists; end
  def if_not_exists=(_); end
  def index; end
  def index=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

class ActiveRecord::ConnectionAdapters::ForeignKeyDefinition < ::Struct
  def column; end
  def custom_primary_key?; end
  def defined_for?(to_table: T.unsafe(nil), validate: T.unsafe(nil), **options); end
  def export_name_on_schema_dump?; end
  def from_table; end
  def from_table=(_); end
  def name; end
  def on_delete; end
  def on_update; end
  def options; end
  def options=(_); end
  def primary_key; end
  def to_table; end
  def to_table=(_); end
  def validate?; end
  def validated?; end

  private

  def default_primary_key; end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

class ActiveRecord::ConnectionAdapters::PrimaryKeyDefinition < ::Struct
  def name; end
  def name=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

module ActiveRecord::Import
  class << self
    def base_adapter(adapter); end
    def load_from_connection_pool(connection_pool); end
    def require_adapter(adapter); end
  end
end

ActiveRecord::Import::ADAPTER_PATH = T.let(T.unsafe(nil), String)
module ActiveRecord::Import::AbstractAdapter; end

module ActiveRecord::Import::AbstractAdapter::InstanceMethods
  def after_import_synchronize(instances); end
  def increment_locking_column!(table_name, results, locking_column); end
  def insert_many(sql, values, _options = T.unsafe(nil), *args); end
  def next_value_for_sequence(sequence_name); end
  def post_sql_statements(table_name, options); end
  def pre_sql_statements(options); end
  def supports_on_duplicate_key_update?; end
end

module ActiveRecord::Import::Connection
  def establish_connection(args = T.unsafe(nil)); end
end

module ActiveRecord::Import::ConnectionAdapters; end

module ActiveRecord::Import::ImportSupport
  def supports_import?; end
end

class ActiveRecord::Import::MissingColumnError < ::StandardError
  def initialize(name, index); end
end

module ActiveRecord::Import::OnDuplicateKeyUpdateSupport
  def supports_on_duplicate_key_update?; end
end

class ActiveRecord::Import::Result < ::Struct
  def failed_instances; end
  def failed_instances=(_); end
  def ids; end
  def ids=(_); end
  def num_inserts; end
  def num_inserts=(_); end
  def results; end
  def results=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

class ActiveRecord::Import::Validator
  def initialize(klass, options = T.unsafe(nil)); end

  def init_validations(klass); end
  def valid_model?(model); end
end

class ActiveRecord::Import::ValueSetTooLargeError < ::StandardError
  def initialize(msg = T.unsafe(nil), size = T.unsafe(nil)); end

  def size; end
end

class ActiveRecord::Import::ValueSetsBytesParser
  def initialize(values, options); end

  def max_bytes; end
  def parse; end
  def reserved_bytes; end
  def values; end

  private

  def default_max_bytes; end

  class << self
    def parse(values, options); end
  end
end

class ActiveRecord::Import::ValueSetsRecordsParser
  def initialize(values, options); end

  def max_records; end
  def parse; end
  def values; end

  class << self
    def parse(values, options); end
  end
end

class ActiveRecord::MigrationProxy < ::Struct
  def initialize(name, version, filename, scope); end

  def announce(*_arg0, &_arg1); end
  def basename; end
  def disable_ddl_transaction(*_arg0, &_arg1); end
  def filename; end
  def filename=(_); end
  def migrate(*_arg0, &_arg1); end
  def name; end
  def name=(_); end
  def scope; end
  def scope=(_); end
  def version; end
  def version=(_); end
  def write(*_arg0, &_arg1); end

  private

  def load_migration; end
  def migration; end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

ActiveRecord::UnknownAttributeError = ActiveModel::UnknownAttributeError
